'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var constants = require('./constants.js');
var _get = _interopDefault(require('lodash/get'));

var FUNDERS_WITH_ONBOARDING = [constants.FUNDERS.HICAPS, constants.FUNDERS.MEDICARE, constants.FUNDERS.ICARE, constants.FUNDERS.WCQ, constants.FUNDERS.COMCARE, constants.FUNDERS.WSV];
var CLAIMABLE_FUNDERS = [constants.FUNDERS.ADF, constants.FUNDERS.COMCARE, constants.FUNDERS.DVA, constants.FUNDERS.GARRISON, constants.FUNDERS.HEALTHPOINT, constants.FUNDERS.HICAPS, constants.FUNDERS.ICARE, constants.FUNDERS.MEDICARE, constants.FUNDERS.OHC, constants.FUNDERS.WCQ, constants.FUNDERS.WSV];
var getFunderCodeFromTransaction = function getFunderCodeFromTransaction(transaction, funderCode) {
  if (transaction.isPatientFunded || _get(transaction, 'claims[0].isPatientFunded')) {
    return constants.FUNDERS.PATIENT;
  } else if (funderCode === constants.FUNDERS.HICAPS) {
    return constants.FUNDERS.HICAPS;
  } else if (funderCode === constants.FUNDERS.ADF) {
    return constants.FUNDERS.ADF;
  } else if (funderCode === constants.FUNDERS.GARRISON) {
    return constants.FUNDERS.GARRISON;
  } else if (funderCode === constants.FUNDERS.PATIENT) {
    return constants.FUNDERS.PATIENT;
  } else if (funderCode === constants.FUNDERS.MEDICARE) {
    return constants.FUNDERS.MEDICARE;
  } else if (funderCode === constants.FUNDERS.HBF) {
    return constants.FUNDERS.HBF;
  } else if (funderCode === constants.FUNDERS.ICARE) {
    return constants.FUNDERS.ICARE;
  } else if (funderCode === constants.FUNDERS.NDIS) {
    return constants.FUNDERS.NDIS;
  } else if (funderCode === constants.FUNDERS.OHC) {
    return constants.FUNDERS.OHC;
  } else if (funderCode === constants.FUNDERS.DVA) {
    return constants.FUNDERS.DVA;
  } else if (funderCode === constants.FUNDERS.WCQ) {
    return constants.FUNDERS.WCQ;
  } else if (funderCode === constants.FUNDERS.COMCARE) {
    return constants.FUNDERS.COMCARE;
  } else if (funderCode === constants.FUNDERS.HEALTHPOINT) {
    return constants.FUNDERS.HEALTHPOINT;
  } else if (funderCode === constants.FUNDERS.WSV) {
    return constants.FUNDERS.WSV;
  }

  return constants.FUNDERS.PATIENT;
};
var isADF = function isADF(funderCode) {
  return funderCode === constants.FUNDERS.ADF;
};
var isComcare = function isComcare(funderCode) {
  return funderCode === constants.FUNDERS.COMCARE;
};
var isDVA = function isDVA(funderCode) {
  return funderCode === constants.FUNDERS.DVA;
};
var isGHS = function isGHS(funderCode) {
  return funderCode === constants.FUNDERS.GARRISON;
};
var isHBF = function isHBF(funderCode) {
  return funderCode === constants.FUNDERS.HBF;
};
var isHICAPS = function isHICAPS(funderCode) {
  return funderCode === constants.FUNDERS.HICAPS;
};
var isIcare = function isIcare(funderCode) {
  return funderCode === constants.FUNDERS.ICARE;
};
var isHealthPoint = function isHealthPoint(funderCode) {
  return funderCode === constants.FUNDERS.HEALTHPOINT;
};
var isMedicare = function isMedicare(funderCode) {
  return funderCode === constants.FUNDERS.MEDICARE;
};
var isNDIS = function isNDIS(funderCode) {
  return funderCode === constants.FUNDERS.NDIS;
};
var isOHC = function isOHC(funderCode) {
  return funderCode === constants.FUNDERS.OHC;
};
var isPatientFunded = function isPatientFunded(funderCode) {
  return funderCode === constants.FUNDERS.PATIENT;
};
var isWCQ = function isWCQ(funderCode) {
  return funderCode === constants.FUNDERS.WCQ;
};
var isWSV = function isWSV(funderCode) {
  return funderCode === constants.FUNDERS.WSV;
};
var isFunderClaimable = function isFunderClaimable(funderCode) {
  return CLAIMABLE_FUNDERS.includes(funderCode);
};

exports.CLAIMABLE_FUNDERS = CLAIMABLE_FUNDERS;
exports.FUNDERS_WITH_ONBOARDING = FUNDERS_WITH_ONBOARDING;
exports.getFunderCodeFromTransaction = getFunderCodeFromTransaction;
exports.isADF = isADF;
exports.isComcare = isComcare;
exports.isDVA = isDVA;
exports.isFunderClaimable = isFunderClaimable;
exports.isGHS = isGHS;
exports.isHBF = isHBF;
exports.isHICAPS = isHICAPS;
exports.isHealthPoint = isHealthPoint;
exports.isIcare = isIcare;
exports.isMedicare = isMedicare;
exports.isNDIS = isNDIS;
exports.isOHC = isOHC;
exports.isPatientFunded = isPatientFunded;
exports.isWCQ = isWCQ;
exports.isWSV = isWSV;
