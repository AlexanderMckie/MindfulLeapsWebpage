'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _get = _interopDefault(require('lodash/get'));
var Sentry = require('@sentry/browser');
var createSentryMiddleware = _interopDefault(require('redux-sentry-middleware'));
var masked = _interopDefault(require('masked'));
var _set = _interopDefault(require('lodash/set'));
var sensitiveKeys = require('./sensitive-keys.js');

var ERROR_CODES = {
  INVALID_AUTHENTICATION: 10007
};
var ERROR_MESSAGES = {
  NETWORK_ERROR: 'Network Error'
};
var STATUS_CODES = {
  UNAUTHORIZED: 401,
  SERVER_ERROR: 500
};

var _ignore = function _ignore(error) {
  return process.env.NODE_ENV === 'test' || error.message === ERROR_MESSAGES.NETWORK_ERROR || _get(error, 'data.statusCode') === STATUS_CODES.UNAUTHORIZED || _get(error, 'data.statusCode') >= STATUS_CODES.SERVER_ERROR || _get(error, 'data.errorCode') === ERROR_CODES.INVALID_AUTHENTICATION;
};

var clearUserContext = function clearUserContext() {
  return Sentry.setUser();
};
var createReduxMiddleware = function createReduxMiddleware() {
  return createSentryMiddleware(Sentry, {
    actionTransformer: function actionTransformer(action) {
      return masked(action, sensitiveKeys.default);
    },
    stateTransformer: function stateTransformer(state) {
      return masked(state, sensitiveKeys.default);
    }
  });
};
var logError = function logError(_error, _temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      name = _ref.name,
      data = _ref.data;

  var error = _error;

  if (error instanceof Error) {
    var _error2, _error2$config;

    var errorHeaders = (_error2 = error) == null ? void 0 : (_error2$config = _error2.config) == null ? void 0 : _error2$config.headers;
    var maskedErrorHeaders = masked(errorHeaders, ['Authorization']);
    error = _set(error, 'config.headers', maskedErrorHeaders);
  }

  if (_ignore(error)) {
    return null;
  }

  Sentry.withScope(function (scope) {
    scope.setExtra('error', error);
    scope.setExtra('data', masked(data, sensitiveKeys.default));

    var message = _get(error, 'data.message', error.message);

    var sentryError = error instanceof Error ? error : new Error(message);

    if (name) {
      sentryError.name = name || message;
    }

    Sentry.captureException(sentryError);
  });
  console.error(error);
};
var setup = function setup(_ref2) {
  var environment = _ref2.environment,
      url = _ref2.url,
      version = _ref2.version;

  if (window.location.hostname !== 'localhost') {
    Sentry.init({
      dsn: url,
      environment: environment,
      release: version
    });
  }
};
var setUserContext = function setUserContext(user) {
  return Sentry.setUser(masked(user, sensitiveKeys.default));
};
var setTag = function setTag(key, value) {
  return Sentry.setTag(key, value);
};
var sentry = {};

exports.clearUserContext = clearUserContext;
exports.createReduxMiddleware = createReduxMiddleware;
exports.default = sentry;
exports.logError = logError;
exports.setTag = setTag;
exports.setUserContext = setUserContext;
exports.setup = setup;
