(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(factory());
}(this, (function () { 'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _repeat = require('lodash/repeat');
var _forOwn = require('lodash/forOwn');

var MASK_CHAR = '*';

var _maskedString = function _maskedString(_ref) {
  var length = _ref.length,
      maskChar = _ref.maskChar;
  return _repeat(maskChar, length);
};

var masked = function masked(data, keys) {
  if (!data) {
    return null;
  }
  if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) !== 'object') {
    return data;
  }
  if (!keys || !Array.isArray(keys) && typeof keys !== 'string') {
    if (!keys) {
      throw new Error('Second parameter `keys` not given');
    }
    throw new TypeError('Expected a string or array, got ' + (typeof keys === 'undefined' ? 'undefined' : _typeof(keys)));
  }

  if (Array.isArray(data)) {
    return data.map(function (data) {
      if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) !== 'object') {
        return data;
      }
      return masked(data, keys);
    });
  }

  var newData = _extends({}, data);
  _forOwn(newData, function (value, key) {
    if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
      if (Array.isArray(value) && Array.isArray(keys) && keys.includes(key)) {
        newData[key] = value.map(function () {
          return _maskedString({ length: 8, maskChar: MASK_CHAR });
        });
      } else {
        newData[key] = masked(value, keys);
      }
    } else if (key === keys || Array.isArray(keys) && keys.includes(key)) {
      newData[key] = _maskedString({ length: 8, maskChar: MASK_CHAR });
    }
  });
  return newData;
};

module.exports = masked;

})));
