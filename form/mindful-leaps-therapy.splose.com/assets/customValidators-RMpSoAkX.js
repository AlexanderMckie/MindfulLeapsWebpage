function d(r,e){return!e||new RegExp(/^0?[1-9]( ?-?[0-9]){7,9}$/).test(e)?Promise.resolve():Promise.reject(new Error("Invalid phone number"))}function u(r,e){return!e||new RegExp(/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/).test(e)?Promise.resolve():Promise.reject(new Error("Invalid email"))}function f(r,e){const t=["^(?=.*[A-Z])","^(?=.*[a-z])","^(?=.*[0-9])","^(?=.*[^A-Za-z0-9])"];return!e||e.length>=8&&t.every(n=>new RegExp(n).test(e))?Promise.resolve():Promise.reject(new Error("Password too weak"))}function l(r,e){return e&&e.trackingCategoryID&&!e.selectedOption?Promise.reject(new Error("Option must be selected")):Promise.resolve()}async function w(r,e){if(e&&!(e.length===10&&c(e)))throw new Error("Invalid medicare number")}function c(r){let e=!0;const t=r.match(/^([2-6]\d{7})(\d)/);if(t){const n=t[1],a=t[2],o=[1,3,7,9,1,3,7,9];let s=0;o.forEach((m,i)=>{s+=+n[i]*o[i]}),s%10===parseInt(a,10)&&(e=!0)}else e=!1;return e}export{u as e,w as m,d as p,f as s,l as x};
