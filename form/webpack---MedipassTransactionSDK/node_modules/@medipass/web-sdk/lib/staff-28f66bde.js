'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _defineProperty = _interopDefault(require('@babel/runtime/helpers/defineProperty'));
var _regeneratorRuntime = _interopDefault(require('@babel/runtime/regenerator'));
var _asyncToGenerator = _interopDefault(require('@babel/runtime/helpers/asyncToGenerator'));
var _merge = _interopDefault(require('lodash/merge'));
var _uniq = _interopDefault(require('lodash/uniq'));
var axios = _interopDefault(require('axios'));
var differenceInSeconds = _interopDefault(require('date-fns/differenceInSeconds'));
var jwtDecode = _interopDefault(require('jwt-decode'));
var _forOwn = _interopDefault(require('lodash/forOwn'));
var _get = _interopDefault(require('lodash/get'));
var sentry = require('@medipass/utils/sentry');
var getAxiosError = require('./utils/get-axios-error.js');
var paramError = require('./utils/param-error.js');
var doesParamExist = require('./utils/does-param-exist.js');
var _omitBy = _interopDefault(require('lodash/omitBy'));
var _isEmpty = _interopDefault(require('lodash/isEmpty'));
var storage = require('./services/storage.js');
var platform = _interopDefault(require('platform'));
var constants = require('@medipass/utils/constants');
var braintreeClient = _interopDefault(require('braintree-web/client'));
var braintreeGooglePayment = _interopDefault(require('braintree-web/google-payment'));
var braintreeApplePay = _interopDefault(require('braintree-web/apple-pay'));
var pify = _interopDefault(require('@medipass/pify'));
var env = _interopDefault(require('@medipass/utils/get-env'));
var filterOption = require('./types/filter-option.js');
var funders$1 = require('@medipass/utils/funders');
var compareVersions = _interopDefault(require('compare-versions'));
var index = require('./utils/base-urls/index.js');
var _flatten = _interopDefault(require('lodash/flatten'));
var regions = require('./regions-0da90c43.js');

var staffUtils = /*#__PURE__*/Object.freeze({
  __proto__: null,
  get parseProviderSet () { return parseProviderSet; },
  get parseProviderRegistrations () { return parseProviderRegistrations; }
});

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var DEFAULT_API_NAME = 'core';

var getBaseUrl = function getBaseUrl(apiName, requestOpts) {
  return requestOpts.baseUrl || _get(sdkClient, "baseUrls[" + apiName + "]");
};

var getVersion = function getVersion(apiName, requestOpts) {
  return requestOpts.ver || _get(sdkClient, "apiVersions[" + apiName + "]") || sdkClient.defaultVersion;
};

var request = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(medipassRequestOpts, axiosRequestOpts) {
    var apiName, version, baseUrl, res, _medipassRequestOpts$, _medipassRequestOpts$2, axiosError, skipErrorLogging;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (axiosRequestOpts === void 0) {
              axiosRequestOpts = {};
            }

            apiName = medipassRequestOpts.apiName || DEFAULT_API_NAME;
            version = getVersion(apiName, medipassRequestOpts);
            baseUrl = getBaseUrl(apiName, medipassRequestOpts);
            _context.prev = 4;
            _context.next = 7;
            return sdkClient.axios(medipassRequestOpts.hyperMediaEndpoint || "" + baseUrl + version + medipassRequestOpts.path, _objectSpread({}, axiosRequestOpts, {}, medipassRequestOpts.requestConfig));

          case 7:
            res = _context.sent;
            return _context.abrupt("return", medipassRequestOpts.getFullResponse ? res : res.data);

          case 11:
            _context.prev = 11;
            _context.t0 = _context["catch"](4);
            axiosError = medipassRequestOpts.getFullError ? _context.t0 : getAxiosError.default(_context.t0);
            skipErrorLogging = (medipassRequestOpts == null ? void 0 : (_medipassRequestOpts$ = medipassRequestOpts.skipErrorLoggingCodes) == null ? void 0 : _medipassRequestOpts$.length) > 0 && (medipassRequestOpts == null ? void 0 : (_medipassRequestOpts$2 = medipassRequestOpts.skipErrorLoggingCodes) == null ? void 0 : _medipassRequestOpts$2.includes(axiosError == null ? void 0 : axiosError.status));

            if (!skipErrorLogging) {
              sentry.logError(_context.t0, {
                name: 'AxiosError',
                data: axiosError
              });
            }

            throw axiosError;

          case 17:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[4, 11]]);
  }));

  return function request(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var pathGetAbr = function pathGetAbr() {
  return '/abr/search';
};

/**
 * Get Australian Business Register information
 * @param {Object} opts - Additional options
 */
var getAbr = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(query, opts) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            return _context.abrupt("return", request(_objectSpread$1({}, opts, {
              path: pathGetAbr()
            }), {
              method: 'get',
              params: query
            }));

          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function getAbr(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var abr = /*#__PURE__*/Object.freeze({
  __proto__: null,
  pathGetAbr: pathGetAbr,
  getAbr: getAbr
});

function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var PATH__ACCOUNTS = '/accounts';

var pathAccountsByAccountId = function pathAccountsByAccountId(accountId) {
  return "/accounts/" + accountId;
};

var pathAccountExists = function pathAccountExists() {
  return "/accounts/exists";
};

var pathAccountRolesByAccountId = function pathAccountRolesByAccountId(accountId) {
  return "/accounts/" + accountId + "/roles";
};

var pathAccountSecretKeysByAccountId = function pathAccountSecretKeysByAccountId(accountId) {
  return "/accounts/" + accountId + "/secretkeys";
};

var pathAccountSecretKey = function pathAccountSecretKey(accountId, secretKey) {
  return "/accounts/" + accountId + "/secretkeys/" + secretKey;
};

var pathAccountTransactions = function pathAccountTransactions(accountId) {
  return "/accounts/" + accountId + "/transactions";
};

var pathBusinessStaffAccount = function pathBusinessStaffAccount(businessId, staffId) {
  return "/businesses/" + businessId + "/staff/" + staffId + "/account";
};

var pathChangePassword = function pathChangePassword() {
  return "/accounts/changepassword";
};

var pathEnableAccount = function pathEnableAccount(accountId) {
  return "/accounts/" + accountId + "/enable";
};

var pathDisableAccount = function pathDisableAccount(accountId) {
  return "/accounts/" + accountId + "/disable";
};

var pathRequestVerifyAccount = function pathRequestVerifyAccount(accountId) {
  return "/accounts/" + accountId + "/verify/request";
};

var pathHealthFundAccounts = function pathHealthFundAccounts(healthFundId) {
  return "/healthfunds/" + healthFundId + "/accounts";
};

var pathHealthFundAccount = function pathHealthFundAccount(healthFundId, accountId) {
  return "/healthfunds/" + healthFundId + "/accounts/" + accountId;
};

var pathOrganisationAccounts = function pathOrganisationAccounts(organisationId) {
  return "/organisations/" + organisationId + "/accounts";
};

var pathAccountPractices = function pathAccountPractices(accountId) {
  return "/accounts/" + accountId + "/practices";
};

var PATH__ACCEPT_ACCOUNT_INVITE = '/accounts/invites/accept';
var PATH__REQUEST_ACCOUNT_RESET = '/accounts/reset/request';
var PATH__REQUEST_PASSWORD_RESET = '/accounts/reset/password/request';
var PATH__REQUEST_MOBILE_RESET = '/accounts/reset/mobile/request';
var PATH__ACCOUNT_RESET = '/accounts/reset';
var PATH__ACCOUNT_PASSWORD_RESET = '/accounts/reset/password';
var PATH__ACCOUNT_MOBILE_RESET = '/accounts/reset/mobile';
var PATH__ACCOUNT_VERIFY = '/accounts/verify';
var PATH__SIGN_UP = '/signup';
/**
 * Create account secret key
 * @param {String} accountId - Account ID
 * @param {Object} opts - Additional options
 */

var createAccountSecretKey = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(accountId, opts) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              accountId: accountId
            }, opts.hyperMediaEndpoint);
            return _context.abrupt("return", request(_objectSpread$2({}, opts, {
              path: pathAccountSecretKeysByAccountId(accountId)
            }), {
              method: 'post'
            }));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function createAccountSecretKey(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * Create organisation account
 * @param {String} organisationId - Organisation ID
 * @param {Object} body - Response body
 * @param {Object} opts - Additional options
 */

var createOrganisationAccount = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(organisationId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              organisationId: organisationId
            }, opts.hyperMediaEndpoint);
            return _context2.abrupt("return", request(_objectSpread$2({}, opts, {
              path: pathOrganisationAccounts(organisationId)
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function createOrganisationAccount(_x3, _x4, _x5) {
    return _ref2.apply(this, arguments);
  };
}();
/**
 * Delete account secret key
 * @param {String} accountId - Account ID
 * @param {String} secretKey - Secret Key
 * @param {Object} opts - Additional options
 */

var deleteAccountSecretKey = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(accountId, secretKey, opts) {
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              accountId: accountId,
              secretKey: secretKey
            }, opts.hyperMediaEndpoint);
            return _context3.abrupt("return", request(_objectSpread$2({}, opts, {
              path: pathAccountSecretKey(accountId, secretKey)
            }), {
              method: 'delete'
            }));

          case 3:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function deleteAccountSecretKey(_x6, _x7, _x8) {
    return _ref3.apply(this, arguments);
  };
}();
/**
 * Delete account
 * @param {String} accountId - Account ID
 * @param {Object} opts - Additional options
 */

var deleteAccount = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(accountId, opts) {
    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              accountId: accountId
            }, opts.hyperMediaEndpoint);
            return _context4.abrupt("return", request(_objectSpread$2({}, opts, {
              path: pathAccountsByAccountId(accountId)
            }), {
              method: 'delete'
            }));

          case 3:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));

  return function deleteAccount(_x9, _x10) {
    return _ref4.apply(this, arguments);
  };
}();
/**
 * Disable account
 * @param {String} accountId - Account ID
 * @param {Object} opts - Additional options
 */

var disableAccount = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(accountId, opts) {
    return _regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              accountId: accountId
            }, opts.hyperMediaEndpoint);
            return _context5.abrupt("return", request(_objectSpread$2({}, opts, {
              path: pathDisableAccount(accountId)
            }), {
              method: 'put'
            }));

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));

  return function disableAccount(_x11, _x12) {
    return _ref5.apply(this, arguments);
  };
}();
/**
 * Enable account
 * @param {String} accountId - Account ID
 * @param {Object} opts - Additional options
 */

var enableAccount = /*#__PURE__*/function () {
  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(accountId, opts) {
    return _regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              accountId: accountId
            }, opts.hyperMediaEndpoint);
            return _context6.abrupt("return", request(_objectSpread$2({}, opts, {
              path: pathEnableAccount(accountId)
            }), {
              method: 'put'
            }));

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));

  return function enableAccount(_x13, _x14) {
    return _ref6.apply(this, arguments);
  };
}();
/**
 * Request reset for account # DEPRECATED
 * @param {String} email - Account email address
 * @param {String} accountType - Account type (business, consumer, healthfund)
 * @param {Object} opts - Additional options
 */

var requestAccountReset = /*#__PURE__*/function () {
  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(email, accountType, opts) {
    return _regeneratorRuntime.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            return _context7.abrupt("return", request(_objectSpread$2({}, opts, {
              path: PATH__REQUEST_ACCOUNT_RESET
            }), {
              method: 'post',
              data: {
                email: email,
                accountType: accountType
              }
            }));

          case 2:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));

  return function requestAccountReset(_x15, _x16, _x17) {
    return _ref7.apply(this, arguments);
  };
}();
/**
 * Request password reset for username-based Medipass accounts
 * @param {Object} opts - Account ID or email
 * @param {String} accountType - Account type (business, consumer, healthfund). Will fail for consumer account.
 * @param {Object} opts - Additional options
 */

var requestPasswordReset = /*#__PURE__*/function () {
  var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(_ref8, accountType, opts) {
    var accountId, email, data;
    return _regeneratorRuntime.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            accountId = _ref8.accountId, email = _ref8.email;

            if (opts === void 0) {
              opts = {};
            }

            data = {
              accountType: accountType
            };

            if (email) {
              // @ts-expect-error TS(2322): Type '{ email: string; accountType: string; }' is ... Remove this comment to see the full error message
              data = _objectSpread$2({}, data, {
                email: email
              });
            } else if (accountId) {
              // @ts-expect-error TS(2322): Type '{ accountId: string; accountType: string; }'... Remove this comment to see the full error message
              data = _objectSpread$2({}, data, {
                accountId: accountId
              });
            }

            return _context8.abrupt("return", request(_objectSpread$2({}, opts, {
              path: PATH__REQUEST_PASSWORD_RESET
            }), {
              method: 'post',
              data: data
            }));

          case 5:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  }));

  return function requestPasswordReset(_x18, _x19, _x20) {
    return _ref9.apply(this, arguments);
  };
}();
/**
 * Request mobile reset for mobile-based Medipass accounts
 * @param {Object} opts - Account ID or mobile
 * @param {String} accountType - Account type (business, consumer, healthfund). Will fail for non consumer accounts.
 * @param {Object} opts - Additional options
 */

var requestMobileReset = /*#__PURE__*/function () {
  var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(_ref10, accountType, opts) {
    var accountId, email, data;
    return _regeneratorRuntime.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            accountId = _ref10.accountId, email = _ref10.email;

            if (opts === void 0) {
              opts = {};
            }

            data = {
              accountType: accountType
            };

            if (email) {
              // @ts-expect-error TS(2322): Type '{ email: string; accountType: string; }' is ... Remove this comment to see the full error message
              data = _objectSpread$2({}, data, {
                email: email
              });
            } else if (accountId) {
              // @ts-expect-error TS(2322): Type '{ accountId: string; accountType: string; }'... Remove this comment to see the full error message
              data = _objectSpread$2({}, data, {
                accountId: accountId
              });
            }

            return _context9.abrupt("return", request(_objectSpread$2({}, opts, {
              path: PATH__REQUEST_MOBILE_RESET
            }), {
              method: 'post',
              data: data
            }));

          case 5:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));

  return function requestMobileReset(_x21, _x22, _x23) {
    return _ref11.apply(this, arguments);
  };
}();
/**
 * Reset an account # DEPRECATED
 * @param {Object} body - Object body
 * @param {Object} opts - Additional options
 */

var resetAccount = /*#__PURE__*/function () {
  var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(body, opts) {
    return _regeneratorRuntime.wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            return _context10.abrupt("return", request(_objectSpread$2({}, opts, {
              path: PATH__ACCOUNT_RESET
            }), {
              method: 'post',
              data: body
            }));

          case 2:
          case "end":
            return _context10.stop();
        }
      }
    }, _callee10);
  }));

  return function resetAccount(_x24, _x25) {
    return _ref12.apply(this, arguments);
  };
}();
/**
 * Reset a password for username-based Medipass accounts
 * @param {Object} body - Object body
 * @param {Object} opts - Additional options
 */

var resetPassword = /*#__PURE__*/function () {
  var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(body, opts) {
    return _regeneratorRuntime.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            return _context11.abrupt("return", request(_objectSpread$2({}, opts, {
              path: PATH__ACCOUNT_PASSWORD_RESET
            }), {
              method: 'post',
              data: body
            }));

          case 2:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));

  return function resetPassword(_x26, _x27) {
    return _ref13.apply(this, arguments);
  };
}();
/**
 * Reset a mobile number for mobile-based Medipass accounts
 * @param {Object} body - Object body
 * @param {Object} opts - Additional options
 */

var resetMobile = /*#__PURE__*/function () {
  var _ref14 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(body, opts) {
    return _regeneratorRuntime.wrap(function _callee12$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            return _context12.abrupt("return", request(_objectSpread$2({}, opts, {
              path: PATH__ACCOUNT_MOBILE_RESET
            }), {
              method: 'post',
              data: body
            }));

          case 2:
          case "end":
            return _context12.stop();
        }
      }
    }, _callee12);
  }));

  return function resetMobile(_x28, _x29) {
    return _ref14.apply(this, arguments);
  };
}();
/**
 * Verify an account
 * @param {Object} body - Object body
 * @param {Object} opts - Additional options
 */

var verifyAccount = /*#__PURE__*/function () {
  var _ref15 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(body, opts) {
    return _regeneratorRuntime.wrap(function _callee13$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            return _context13.abrupt("return", request(_objectSpread$2({}, opts, {
              path: PATH__ACCOUNT_VERIFY
            }), {
              method: 'post',
              data: body
            }));

          case 2:
          case "end":
            return _context13.stop();
        }
      }
    }, _callee13);
  }));

  return function verifyAccount(_x30, _x31) {
    return _ref15.apply(this, arguments);
  };
}();
/**
 * Get accounts
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getAccounts = /*#__PURE__*/function () {
  var _ref16 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(query, opts) {
    return _regeneratorRuntime.wrap(function _callee14$(_context14) {
      while (1) {
        switch (_context14.prev = _context14.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            return _context14.abrupt("return", request(_objectSpread$2({}, opts, {
              path: PATH__ACCOUNTS
            }), {
              method: 'get',
              params: query
            }));

          case 3:
          case "end":
            return _context14.stop();
        }
      }
    }, _callee14);
  }));

  return function getAccounts(_x32, _x33) {
    return _ref16.apply(this, arguments);
  };
}();
/**
 * Get health fund account
 * @param {String} healthFundId - The health fund ID
 * @param {String} accountId - The account ID
 * @param {Object} opts - Additional options
 */

var getHealthFundAccount = /*#__PURE__*/function () {
  var _ref17 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(healthFundId, accountId, opts) {
    return _regeneratorRuntime.wrap(function _callee15$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              accountId: accountId,
              healthFundId: healthFundId
            }, opts.hyperMediaEndpoint);
            return _context15.abrupt("return", request(_objectSpread$2({}, opts, {
              path: pathHealthFundAccount(healthFundId, accountId)
            }), {
              method: 'get'
            }));

          case 3:
          case "end":
            return _context15.stop();
        }
      }
    }, _callee15);
  }));

  return function getHealthFundAccount(_x34, _x35, _x36) {
    return _ref17.apply(this, arguments);
  };
}();
/**
 * Get health fund accounts
 * @param {String} healthFundId - The health fund ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getHealthFundAccounts = /*#__PURE__*/function () {
  var _ref18 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(healthFundId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee16$(_context16) {
      while (1) {
        switch (_context16.prev = _context16.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              healthFundId: healthFundId
            }, opts.hyperMediaEndpoint);
            return _context16.abrupt("return", request(_objectSpread$2({}, opts, {
              path: pathHealthFundAccounts(healthFundId)
            }), {
              method: 'get',
              params: query
            }));

          case 4:
          case "end":
            return _context16.stop();
        }
      }
    }, _callee16);
  }));

  return function getHealthFundAccounts(_x37, _x38, _x39) {
    return _ref18.apply(this, arguments);
  };
}();
/**
 * Get organisation accounts
 * @param {String} organisationId - The organisation ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getOrganisationAccounts = /*#__PURE__*/function () {
  var _ref19 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(organisationId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              organisationId: organisationId
            }, opts.hyperMediaEndpoint);
            return _context17.abrupt("return", request(_objectSpread$2({}, opts, {
              path: pathOrganisationAccounts(organisationId)
            }), {
              method: 'get',
              params: query
            }));

          case 4:
          case "end":
            return _context17.stop();
        }
      }
    }, _callee17);
  }));

  return function getOrganisationAccounts(_x40, _x41, _x42) {
    return _ref19.apply(this, arguments);
  };
}();
/**
 * Get account
 * @param {String} accountId - Account ID
 * @param {Object} opts - Additional options
 */

var getAccount = /*#__PURE__*/function () {
  var _ref20 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(accountId, opts) {
    var account;
    return _regeneratorRuntime.wrap(function _callee18$(_context18) {
      while (1) {
        switch (_context18.prev = _context18.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              accountId: accountId
            }, opts.hyperMediaEndpoint);
            _context18.next = 4;
            return request(_objectSpread$2({}, opts, {
              path: pathAccountsByAccountId(accountId)
            }), {
              method: 'get'
            });

          case 4:
            account = _context18.sent;

            if (accountId === _get(sdkClient, 'account._id')) {
              sdkClient.setAccount(account);
            }

            return _context18.abrupt("return", account);

          case 7:
          case "end":
            return _context18.stop();
        }
      }
    }, _callee18);
  }));

  return function getAccount(_x43, _x44) {
    return _ref20.apply(this, arguments);
  };
}();
/**
 * Get business staff account
 * @param {String} businessId - Business ID
 * @param {String} staffId - Staff ID
 * @param {Object} opts - Additional options
 */

var getBusinessStaffAccount = /*#__PURE__*/function () {
  var _ref21 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(businessId, staffId, opts) {
    return _regeneratorRuntime.wrap(function _callee19$(_context19) {
      while (1) {
        switch (_context19.prev = _context19.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              staffId: staffId
            }, opts.hyperMediaEndpoint);
            _context19.next = 4;
            return request(_objectSpread$2({}, opts, {
              path: pathBusinessStaffAccount(businessId, staffId)
            }), {
              method: 'get'
            });

          case 4:
            return _context19.abrupt("return", _context19.sent);

          case 5:
          case "end":
            return _context19.stop();
        }
      }
    }, _callee19);
  }));

  return function getBusinessStaffAccount(_x45, _x46, _x47) {
    return _ref21.apply(this, arguments);
  };
}();
/**
 * Check if account exists
 * @param {String} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getAccountExists = /*#__PURE__*/function () {
  var _ref22 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20(query, opts) {
    return _regeneratorRuntime.wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            return _context20.abrupt("return", request(_objectSpread$2({}, opts, {
              path: pathAccountExists()
            }), {
              method: 'get',
              params: query
            }));

          case 3:
          case "end":
            return _context20.stop();
        }
      }
    }, _callee20);
  }));

  return function getAccountExists(_x48, _x49) {
    return _ref22.apply(this, arguments);
  };
}();
/**
 * Get account roles
 * @param {String} accountId - Account ID
 * @param {Object} opts - Additional options
 */

var getAccountRoles = /*#__PURE__*/function () {
  var _ref23 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(accountId, opts) {
    return _regeneratorRuntime.wrap(function _callee21$(_context21) {
      while (1) {
        switch (_context21.prev = _context21.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              accountId: accountId
            }, opts.hyperMediaEndpoint);
            return _context21.abrupt("return", request(_objectSpread$2({}, opts, {
              path: pathAccountRolesByAccountId(accountId)
            }), {
              method: 'get'
            }));

          case 3:
          case "end":
            return _context21.stop();
        }
      }
    }, _callee21);
  }));

  return function getAccountRoles(_x50, _x51) {
    return _ref23.apply(this, arguments);
  };
}();
/**
 * Get account secret keys
 * @param {String} accountId - Account ID
 * @param {Object} opts - Additional options
 */

var getAccountSecretKeys = /*#__PURE__*/function () {
  var _ref24 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22(accountId, opts) {
    return _regeneratorRuntime.wrap(function _callee22$(_context22) {
      while (1) {
        switch (_context22.prev = _context22.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              accountId: accountId
            }, opts.hyperMediaEndpoint);
            return _context22.abrupt("return", request(_objectSpread$2({}, opts, {
              path: pathAccountSecretKeysByAccountId(accountId)
            }), {
              method: 'get'
            }));

          case 3:
          case "end":
            return _context22.stop();
        }
      }
    }, _callee22);
  }));

  return function getAccountSecretKeys(_x52, _x53) {
    return _ref24.apply(this, arguments);
  };
}();
/**
 * Get account transactions
 * @param {String} accountId - Account ID
 * @param {Object} query - query parameters
 * @param {Object} opts - Additional options
 */

var getAccountTransactions = /*#__PURE__*/function () {
  var _ref25 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23(accountId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee23$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              accountId: accountId
            }, opts.hyperMediaEndpoint);
            return _context23.abrupt("return", request(_objectSpread$2({}, opts, {
              path: pathAccountTransactions(accountId)
            }), {
              method: 'get',
              params: query
            }));

          case 4:
          case "end":
            return _context23.stop();
        }
      }
    }, _callee23);
  }));

  return function getAccountTransactions(_x54, _x55, _x56) {
    return _ref25.apply(this, arguments);
  };
}();
/**
 * Invite health fund account
 * @param {String} healthFundId - The health fund ID
 * @param {Object} requestBody - Request body
 * @param {Object} opts - Additional options
 */

var inviteHealthFundAccount = /*#__PURE__*/function () {
  var _ref26 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24(healthFundId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee24$(_context24) {
      while (1) {
        switch (_context24.prev = _context24.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              healthFundId: healthFundId
            }, opts.hyperMediaEndpoint);
            return _context24.abrupt("return", request(_objectSpread$2({}, opts, {
              path: pathHealthFundAccounts(healthFundId) + "/invites"
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context24.stop();
        }
      }
    }, _callee24);
  }));

  return function inviteHealthFundAccount(_x57, _x58, _x59) {
    return _ref26.apply(this, arguments);
  };
}();
/**
 * Remove health fund from account
 * @param {String} healthFundId - Health fund ID
 * @param {String} accountId - Account ID
 * @param {Object} opts - Additional options
 */

var removeHealthFundFromAccount = /*#__PURE__*/function () {
  var _ref27 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee25(healthFundId, accountId, opts) {
    return _regeneratorRuntime.wrap(function _callee25$(_context25) {
      while (1) {
        switch (_context25.prev = _context25.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              accountId: accountId,
              healthFundId: healthFundId
            }, opts.hyperMediaEndpoint);
            return _context25.abrupt("return", request(_objectSpread$2({}, opts, {
              path: pathHealthFundAccount(healthFundId, accountId)
            }), {
              method: 'delete'
            }));

          case 3:
          case "end":
            return _context25.stop();
        }
      }
    }, _callee25);
  }));

  return function removeHealthFundFromAccount(_x60, _x61, _x62) {
    return _ref27.apply(this, arguments);
  };
}();
/**
 * Request to verify an account
 * @param {String} accountId - Account ID
 * @param {Object} opts - Additional options
 */

var requestToVerifyAccount = /*#__PURE__*/function () {
  var _ref28 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee26(accountId, opts) {
    return _regeneratorRuntime.wrap(function _callee26$(_context26) {
      while (1) {
        switch (_context26.prev = _context26.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              accountId: accountId
            }, opts.hyperMediaEndpoint);
            return _context26.abrupt("return", request(_objectSpread$2({}, opts, {
              path: pathRequestVerifyAccount(accountId)
            }), {
              method: 'post'
            }));

          case 3:
          case "end":
            return _context26.stop();
        }
      }
    }, _callee26);
  }));

  return function requestToVerifyAccount(_x63, _x64) {
    return _ref28.apply(this, arguments);
  };
}();
/**
 * Sign up for an account
 * @param {String} email - Account email address
 * @param {String} mobile - Mobile number
 * @param {Object} body - Object body
 * @param {Object} opts - Additional options
 */

var signUp = /*#__PURE__*/function () {
  var _ref29 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee27(email, mobile, body, opts) {
    return _regeneratorRuntime.wrap(function _callee27$(_context27) {
      while (1) {
        switch (_context27.prev = _context27.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              email: email,
              mobile: mobile
            }, opts.hyperMediaEndpoint);
            return _context27.abrupt("return", request(_objectSpread$2({}, opts, {
              path: PATH__SIGN_UP
            }), {
              method: 'post',
              data: _objectSpread$2({
                email: email,
                mobile: mobile
              }, body)
            }));

          case 3:
          case "end":
            return _context27.stop();
        }
      }
    }, _callee27);
  }));

  return function signUp(_x65, _x66, _x67, _x68) {
    return _ref29.apply(this, arguments);
  };
}();
/**
 * Accept an invite
 * @param {Object} body - Object body
 * @param {Object} opts - Additional options
 */

var acceptInvite = /*#__PURE__*/function () {
  var _ref30 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee28(body, opts) {
    return _regeneratorRuntime.wrap(function _callee28$(_context28) {
      while (1) {
        switch (_context28.prev = _context28.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            return _context28.abrupt("return", request(_objectSpread$2({}, opts, {
              path: PATH__ACCEPT_ACCOUNT_INVITE
            }), {
              method: 'post',
              data: body
            }));

          case 2:
          case "end":
            return _context28.stop();
        }
      }
    }, _callee28);
  }));

  return function acceptInvite(_x69, _x70) {
    return _ref30.apply(this, arguments);
  };
}();
/**
 * Update account
 * @param {String} accountId - Account ID
 * @param {Object} body - Object body
 * @param {Object} opts - Additional options
 */

var updateAccount = /*#__PURE__*/function () {
  var _ref31 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee29(accountId, body, opts) {
    var account;
    return _regeneratorRuntime.wrap(function _callee29$(_context29) {
      while (1) {
        switch (_context29.prev = _context29.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              accountId: accountId
            }, opts.hyperMediaEndpoint);
            _context29.next = 4;
            return request(_objectSpread$2({}, opts, {
              path: pathAccountsByAccountId(accountId)
            }), {
              method: 'put',
              data: body
            });

          case 4:
            account = _context29.sent;

            if (accountId === _get(sdkClient, 'account._id')) {
              sdkClient.setAccount(account);
            }

            return _context29.abrupt("return", account);

          case 7:
          case "end":
            return _context29.stop();
        }
      }
    }, _callee29);
  }));

  return function updateAccount(_x71, _x72, _x73) {
    return _ref31.apply(this, arguments);
  };
}();
/**
 * Update account roles
 * @param {String} accountId - Account ID
 * @param {Object} opts - Additional options
 */

var updateAccountRoles = /*#__PURE__*/function () {
  var _ref32 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee30(accountId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee30$(_context30) {
      while (1) {
        switch (_context30.prev = _context30.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              accountId: accountId
            }, opts.hyperMediaEndpoint);
            return _context30.abrupt("return", request(_objectSpread$2({}, opts, {
              path: pathAccountRolesByAccountId(accountId)
            }), {
              method: 'put',
              data: body
            }));

          case 3:
          case "end":
            return _context30.stop();
        }
      }
    }, _callee30);
  }));

  return function updateAccountRoles(_x74, _x75, _x76) {
    return _ref32.apply(this, arguments);
  };
}();
/**
 * Get account practices
 * @param {String} accountId - Account ID
 * @param {Object} query - query parameters
 * @param {Object} opts - Additional options
 */

var getAccountPractices = /*#__PURE__*/function () {
  var _ref33 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee31(accountId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee31$(_context31) {
      while (1) {
        switch (_context31.prev = _context31.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              accountId: accountId
            }, opts.hyperMediaEndpoint);
            return _context31.abrupt("return", request(_objectSpread$2({}, opts, {
              path: pathAccountPractices(accountId)
            }), {
              method: 'get',
              params: query
            }));

          case 4:
          case "end":
            return _context31.stop();
        }
      }
    }, _callee31);
  }));

  return function getAccountPractices(_x77, _x78, _x79) {
    return _ref33.apply(this, arguments);
  };
}();
/**
 * Change password
 * @param {Object} body - Object body
 * @param {Object} opts - Additional options
 */

var changePassword = /*#__PURE__*/function () {
  var _ref34 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee32(body, opts) {
    return _regeneratorRuntime.wrap(function _callee32$(_context32) {
      while (1) {
        switch (_context32.prev = _context32.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            return _context32.abrupt("return", request(_objectSpread$2({}, opts, {
              path: pathChangePassword()
            }), {
              method: 'post',
              data: body
            }));

          case 2:
          case "end":
            return _context32.stop();
        }
      }
    }, _callee32);
  }));

  return function changePassword(_x80, _x81) {
    return _ref34.apply(this, arguments);
  };
}();

var accounts = /*#__PURE__*/Object.freeze({
  __proto__: null,
  createAccountSecretKey: createAccountSecretKey,
  createOrganisationAccount: createOrganisationAccount,
  deleteAccountSecretKey: deleteAccountSecretKey,
  deleteAccount: deleteAccount,
  disableAccount: disableAccount,
  enableAccount: enableAccount,
  requestAccountReset: requestAccountReset,
  requestPasswordReset: requestPasswordReset,
  requestMobileReset: requestMobileReset,
  resetAccount: resetAccount,
  resetPassword: resetPassword,
  resetMobile: resetMobile,
  verifyAccount: verifyAccount,
  getAccounts: getAccounts,
  getHealthFundAccount: getHealthFundAccount,
  getHealthFundAccounts: getHealthFundAccounts,
  getOrganisationAccounts: getOrganisationAccounts,
  getAccount: getAccount,
  getBusinessStaffAccount: getBusinessStaffAccount,
  getAccountExists: getAccountExists,
  getAccountRoles: getAccountRoles,
  getAccountSecretKeys: getAccountSecretKeys,
  getAccountTransactions: getAccountTransactions,
  inviteHealthFundAccount: inviteHealthFundAccount,
  removeHealthFundFromAccount: removeHealthFundFromAccount,
  requestToVerifyAccount: requestToVerifyAccount,
  signUp: signUp,
  acceptInvite: acceptInvite,
  updateAccount: updateAccount,
  updateAccountRoles: updateAccountRoles,
  getAccountPractices: getAccountPractices,
  changePassword: changePassword
});

function ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var PATH__ACTIONS = '/actions';

var pathAction = function pathAction(actionId) {
  return PATH__ACTIONS + "/" + actionId;
};
/**
 * Get actions
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */


var getActions = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(query, opts) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            return _context.abrupt("return", request(_objectSpread$3({}, opts, {
              path: PATH__ACTIONS
            }), {
              method: 'get',
              params: query
            }));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function getActions(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * Get action
 * @param {String} actionId - Action ID
 * @param {Object} opts - Additional options
 */

var getAction = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(actionId, opts) {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            return _context2.abrupt("return", request(_objectSpread$3({}, opts, {
              path: pathAction(actionId)
            }), {
              method: 'get'
            }));

          case 2:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function getAction(_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();

var actions = /*#__PURE__*/Object.freeze({
  __proto__: null,
  getActions: getActions,
  getAction: getAction
});

function ownKeys$4(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$4(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$4(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$4(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var pathApiKeysByBusinessId = function pathApiKeysByBusinessId(businessId) {
  return "/businesses/" + businessId + "/apikeys";
};
var pathApiKeyByApiKeyId = function pathApiKeyByApiKeyId(businessId, apiKeyId) {
  return "/businesses/" + businessId + "/apikeys/" + apiKeyId;
};
/**
 * Create an Api Key
 * @param {String} businessId - Business ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var createApiKey = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(businessId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId
            }, opts.hyperMediaEndpoint);
            return _context.abrupt("return", request(_objectSpread$4({}, opts, {
              path: pathApiKeysByBusinessId(businessId)
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function createApiKey(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * Get Api Keys for a business
 * @param {String} businessId - Business ID
 * @param {Object} query - query parameters
 * @param {Object} opts - Additional options
 */

var getBusinessApiKeys = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(businessId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId
            }, opts.hyperMediaEndpoint);
            return _context2.abrupt("return", request(_objectSpread$4({}, opts, {
              path: pathApiKeysByBusinessId(businessId)
            }), {
              method: 'get',
              params: query
            }));

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function getBusinessApiKeys(_x4, _x5, _x6) {
    return _ref2.apply(this, arguments);
  };
}();
/**
 * Delete Api Key by apiKeyId
 * @param {String} businessId - Business ID
 * @param {String} apiKeyId - Api Key ID
 * @param {Object} opts - Additional options
 */

var deleteApiKey = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(businessId, apiKeyId, opts) {
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              apiKeyId: apiKeyId
            }, opts.hyperMediaEndpoint);
            return _context3.abrupt("return", request(_objectSpread$4({}, opts, {
              path: pathApiKeyByApiKeyId(businessId, apiKeyId)
            }), {
              method: 'delete'
            }));

          case 3:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function deleteApiKey(_x7, _x8, _x9) {
    return _ref3.apply(this, arguments);
  };
}();

var apiKeys = /*#__PURE__*/Object.freeze({
  __proto__: null,
  pathApiKeysByBusinessId: pathApiKeysByBusinessId,
  pathApiKeyByApiKeyId: pathApiKeyByApiKeyId,
  createApiKey: createApiKey,
  getBusinessApiKeys: getBusinessApiKeys,
  deleteApiKey: deleteApiKey
});

function ownKeys$5(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$5(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$5(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$5(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var pathGetClaimAttachmentUrl = function pathGetClaimAttachmentUrl(businessId, practiceId, staffId) {
  return "/businesses/" + businessId + "/practices/" + practiceId + "/staff/" + staffId + "/attachments/uploadurl";
};
var pathGetS3SignedUrl = function pathGetS3SignedUrl(businessId, practiceId, staffId, s3SignedUrlId) {
  return "/businesses/" + businessId + "/practices/" + practiceId + "/staff/" + staffId + "/attachments/s3signedurls/" + s3SignedUrlId;
};
var pathScanClaimFile = function pathScanClaimFile(businessId, practiceId, staffId) {
  return "/businesses/" + businessId + "/practices/" + practiceId + "/staff/" + staffId + "/attachments/virusscan";
};
/**
 * Get url to upload a file associated to a claim
 * @param {String} businessId - Business ID
 * @param {String} practiceId - Practice ID
 * @param {String} staffId - Staff ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var getClaimAttachmentUrl = function getClaimAttachmentUrl(businessId, practiceId, staffId, query, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId,
    practiceId: practiceId,
    staffId: staffId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$5({}, opts, {
    path: pathGetClaimAttachmentUrl(businessId, practiceId, staffId)
  }), {
    method: 'get',
    params: query
  });
};
/**
 * Scan a file associated to a claim
 * @param {String} businessId - Business ID
 * @param {String} practiceId - Practice ID
 * @param {String} staffId - Staff ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var scanClaimFile = function scanClaimFile(businessId, practiceId, staffId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId,
    practiceId: practiceId,
    staffId: staffId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$5({}, opts, {
    path: pathScanClaimFile(businessId, practiceId, staffId)
  }), {
    method: 'post',
    data: body
  });
};
/**
 * Get s3 signed url
 * @param {String} businessId - Business ID
 * @param {String} practiceId - Practice ID
 * @param {String} staffId - Staff ID
 * @param {String} s3SignedUrlId - Internal s3 signed url ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var getS3SignedUrl = function getS3SignedUrl(businessId, practiceId, staffId, s3SignedUrlId, query, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId,
    practiceId: practiceId,
    staffId: staffId,
    s3SignedUrlId: s3SignedUrlId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$5({}, opts, {
    path: pathGetS3SignedUrl(businessId, practiceId, staffId, s3SignedUrlId)
  }), {
    method: 'get',
    params: query
  });
};

var attachments = /*#__PURE__*/Object.freeze({
  __proto__: null,
  pathGetClaimAttachmentUrl: pathGetClaimAttachmentUrl,
  pathGetS3SignedUrl: pathGetS3SignedUrl,
  pathScanClaimFile: pathScanClaimFile,
  getClaimAttachmentUrl: getClaimAttachmentUrl,
  scanClaimFile: scanClaimFile,
  getS3SignedUrl: getS3SignedUrl
});

function ownKeys$6(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$6(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$6(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$6(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var PATH__MEMBERS = '/members';
var PATH__DISCOVER_MEMBERS = '/discovery/members';

var pathAccountMembers = function pathAccountMembers(accountId) {
  return "/accounts/" + accountId + "/members";
};

var pathBusinessMember = function pathBusinessMember(businessId, memberId) {
  return "/businesses/" + businessId + "/members/" + memberId;
};

var pathBusinessMembers = function pathBusinessMembers(businessId) {
  return "/businesses/" + businessId + "/members";
};

var pathMember = function pathMember(memberId) {
  return "/members/" + memberId;
};

var pathMembersForHealthFund = function pathMembersForHealthFund(healthFundId) {
  return "/healthfunds/" + healthFundId + "/members";
};

var pathHealthFundMemberByMemberId = function pathHealthFundMemberByMemberId(healthFundId, memberId) {
  return "/healthfunds/" + healthFundId + "/members/" + memberId;
};
/**
 * Check for duplicate member
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */


var checkDupe = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(body, opts) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            return _context.abrupt("return", request(_objectSpread$6({}, opts, {
              path: PATH__MEMBERS + "/checkdupe"
            }), {
              method: 'post',
              data: body
            }));

          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function checkDupe(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * Create member for an account
 * @param {string} accountId - Account ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var createAccountMember = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(accountId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            return _context2.abrupt("return", request(_objectSpread$6({}, opts, {
              path: pathAccountMembers(accountId)
            }), {
              method: 'post',
              data: body
            }));

          case 2:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function createAccountMember(_x3, _x4, _x5) {
    return _ref2.apply(this, arguments);
  };
}();
/**
 * Delete a members
 * @param {Object} memberId - Member ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var deleteMember = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(memberId, opts) {
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              memberId: memberId
            }, opts.hyperMediaEndpoint);
            return _context3.abrupt("return", request(_objectSpread$6({}, opts, {
              path: pathMember(memberId)
            }), {
              method: 'delete'
            }));

          case 3:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function deleteMember(_x6, _x7) {
    return _ref3.apply(this, arguments);
  };
}();
/**
 * Discover a member
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var discoverMember = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(query, opts) {
    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            return _context4.abrupt("return", request(_objectSpread$6({}, opts, {
              path: PATH__DISCOVER_MEMBERS
            }), {
              method: 'get',
              params: query
            }));

          case 2:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));

  return function discoverMember(_x8, _x9) {
    return _ref4.apply(this, arguments);
  };
}();
/**
 * Invite someone to become a Medipass member
 * @param {String} businessId - Member ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var inviteAnyone = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(businessId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId
            }, opts.hyperMediaEndpoint);
            return _context5.abrupt("return", request(_objectSpread$6({}, opts, {
              path: pathBusinessMembers(businessId) + "/invites"
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));

  return function inviteAnyone(_x10, _x11, _x12) {
    return _ref5.apply(this, arguments);
  };
}();
/**
 * Send an SMS to member with link to download app
 * @param {String} memberId - Member ID
 * @param {Object} opts - Additional options
 */

var inviteMember = /*#__PURE__*/function () {
  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(memberId, opts) {
    return _regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              memberId: memberId
            }, opts.hyperMediaEndpoint);
            return _context6.abrupt("return", request(_objectSpread$6({}, opts, {
              path: pathMember(memberId) + "/invites"
            }), {
              method: 'post'
            }));

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));

  return function inviteMember(_x13, _x14) {
    return _ref6.apply(this, arguments);
  };
}();
/**
 * Get members for an account
 * @param {string} accountId - Account ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getAccountMembers = /*#__PURE__*/function () {
  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(accountId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            return _context7.abrupt("return", request(_objectSpread$6({}, opts, {
              path: pathAccountMembers(accountId)
            }), {
              method: 'get',
              params: query
            }));

          case 3:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));

  return function getAccountMembers(_x15, _x16, _x17) {
    return _ref7.apply(this, arguments);
  };
}();
/**
 * Get members by health fund
 * @param {String} healthFundId - Health fund ID
 * @param {Object} opts - Additional options
 */

var getMembersForHealthFund = /*#__PURE__*/function () {
  var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(healthFundId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            return _context8.abrupt("return", request(_objectSpread$6({}, opts, {
              path: pathMembersForHealthFund(healthFundId)
            }), {
              method: 'get',
              params: query
            }));

          case 3:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  }));

  return function getMembersForHealthFund(_x18, _x19, _x20) {
    return _ref8.apply(this, arguments);
  };
}();
/**
 * Get health fund member by member ID.
 * @param {String} healthFundId - Health Fund ID
 * @param {String} memberId - Member ID
 * @param {Object} opts - Additional options
 */

var getHealthFundMemberByMemberId = /*#__PURE__*/function () {
  var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(healthFundId, memberId, opts) {
    return _regeneratorRuntime.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            return _context9.abrupt("return", request(_objectSpread$6({}, opts, {
              path: pathHealthFundMemberByMemberId(healthFundId, memberId)
            }), {
              method: 'get'
            }));

          case 2:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));

  return function getHealthFundMemberByMemberId(_x21, _x22, _x23) {
    return _ref9.apply(this, arguments);
  };
}();
/**
 * Get business members
 * @param {String} businessId - Business ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getBusinessMembers = /*#__PURE__*/function () {
  var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(businessId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId
            }, opts.hyperMediaEndpoint);
            return _context10.abrupt("return", request(_objectSpread$6({}, opts, {
              path: pathBusinessMembers(businessId)
            }), {
              method: 'get',
              params: query
            }));

          case 4:
          case "end":
            return _context10.stop();
        }
      }
    }, _callee10);
  }));

  return function getBusinessMembers(_x24, _x25, _x26) {
    return _ref10.apply(this, arguments);
  };
}();
/**
 * Get business member
 * @param {String} businessId - Business ID
 * @param {String} memberId - Member ID
 * @param {Object} opts - Additional options
 */

var getBusinessMember = /*#__PURE__*/function () {
  var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(businessId, memberId, opts) {
    return _regeneratorRuntime.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId
            }, opts.hyperMediaEndpoint);
            return _context11.abrupt("return", request(_objectSpread$6({}, opts, {
              path: pathBusinessMember(businessId, memberId)
            }), {
              method: 'get'
            }));

          case 3:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));

  return function getBusinessMember(_x27, _x28, _x29) {
    return _ref11.apply(this, arguments);
  };
}();
/**
 * Get members
 * @param {Object} opts - Additional options
 */

var getMembers = /*#__PURE__*/function () {
  var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(query, opts) {
    return _regeneratorRuntime.wrap(function _callee12$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            return _context12.abrupt("return", request(_objectSpread$6({}, opts, {
              path: PATH__MEMBERS
            }), {
              method: 'get',
              params: query
            }));

          case 3:
          case "end":
            return _context12.stop();
        }
      }
    }, _callee12);
  }));

  return function getMembers(_x30, _x31) {
    return _ref12.apply(this, arguments);
  };
}();
/**
 * Get member
 * @param {String} memberId - Member ID
 * @param {Object} opts - Additional options
 */

var getMember = /*#__PURE__*/function () {
  var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(memberId, opts) {
    var member;
    return _regeneratorRuntime.wrap(function _callee13$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              memberId: memberId
            }, opts.hyperMediaEndpoint);
            _context13.next = 4;
            return request(_objectSpread$6({}, opts, {
              path: pathMember(memberId)
            }), {
              method: 'get'
            });

          case 4:
            member = _context13.sent;

            if (memberId === _get(sdkClient, 'member._id')) {
              sdkClient.setMember(member);
            }

            return _context13.abrupt("return", member);

          case 7:
          case "end":
            return _context13.stop();
        }
      }
    }, _callee13);
  }));

  return function getMember(_x32, _x33) {
    return _ref13.apply(this, arguments);
  };
}();
/**
 * Update a members
 * @param {Object} memberId - Member ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var updateMember = /*#__PURE__*/function () {
  var _ref14 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(memberId, body, opts) {
    var member;
    return _regeneratorRuntime.wrap(function _callee14$(_context14) {
      while (1) {
        switch (_context14.prev = _context14.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              memberId: memberId
            }, opts.hyperMediaEndpoint);
            _context14.next = 4;
            return request(_objectSpread$6({}, opts, {
              path: pathMember(memberId)
            }), {
              method: 'put',
              data: body
            });

          case 4:
            member = _context14.sent;

            if (memberId === _get(sdkClient, 'member._id')) {
              sdkClient.setMember(member);
            }

            return _context14.abrupt("return", member);

          case 7:
          case "end":
            return _context14.stop();
        }
      }
    }, _callee14);
  }));

  return function updateMember(_x34, _x35, _x36) {
    return _ref14.apply(this, arguments);
  };
}();

var members = /*#__PURE__*/Object.freeze({
  __proto__: null,
  checkDupe: checkDupe,
  createAccountMember: createAccountMember,
  deleteMember: deleteMember,
  discoverMember: discoverMember,
  inviteAnyone: inviteAnyone,
  inviteMember: inviteMember,
  getAccountMembers: getAccountMembers,
  getMembersForHealthFund: getMembersForHealthFund,
  getHealthFundMemberByMemberId: getHealthFundMemberByMemberId,
  getBusinessMembers: getBusinessMembers,
  getBusinessMember: getBusinessMember,
  getMembers: getMembers,
  getMember: getMember,
  updateMember: updateMember
});

function ownKeys$7(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$7(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$7(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$7(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var PATH__AUTH = '/auth';
var PATH__OTK = '/otk';
var PATH__AUTH_TOKEN = '/auth/token';

var pathImpersonateAccount = function pathImpersonateAccount(accountId) {
  return "/auth/impersonate/" + accountId;
};

var pathAuthy = function pathAuthy(accountId) {
  return "/accounts/" + accountId + "/authy";
};

var pathAuthyVerify = function pathAuthyVerify(accountId) {
  return "/accounts/" + accountId + "/authy/verify";
};

var HEADER__SUPER_ADMIN = 'x-super-admin';

var setupAccountResources = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(account) {
    var ownerMemberId, member;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            storage.default.onboardingStatus.remove();
            sdkClient.setAccount(account); // Check if the account has a member attached to it.

            ownerMemberId = account.ownerMemberId;

            if (!ownerMemberId) {
              _context.next = 9;
              break;
            }

            _context.next = 6;
            return getMember(ownerMemberId);

          case 6:
            member = _context.sent;
            sdkClient.setMember(member);
            return _context.abrupt("return", _objectSpread$7({}, account, {
              _member: member
            }));

          case 9:
            return _context.abrupt("return", account);

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function setupAccountResources(_x) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * Log in a user
 * @param {String} email - Email
 * @param {String} password - Password
 * @param {{ otkCode: ?String, accountType: String }} body - The request body
 * @param {{ ver: ?String }} opts - Additional options
 */


var login = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(email, password, body, opts) {
    var data, res, isSuperAdmin, account;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (body === void 0) {
              body = {};
            }

            if (opts === void 0) {
              opts = {
                asSuperAdmin: false
              };
            }

            data = _objectSpread$7({
              email: email
            }, body);

            if (password) {
              // @ts-expect-error TS(2339): Property 'password' does not exist on type '{ emai... Remove this comment to see the full error message
              data.password = password;
            } // $FlowFixMe


            _context2.next = 6;
            return request(_objectSpread$7({}, opts, {
              path: PATH__AUTH,
              getFullResponse: true
            }), {
              method: 'post',
              data: data
            });

          case 6:
            res = _context2.sent;
            isSuperAdmin = res.headers[HEADER__SUPER_ADMIN];

            if (!(opts.asSuperAdmin && !isSuperAdmin)) {
              _context2.next = 11;
              break;
            }

            sdkClient.clearTokens();
            throw {
              response: 'You need to be a super admin to log in!'
            };

          case 11:
            if (isSuperAdmin) {
              sdkClient.isSuperAdmin = isSuperAdmin;
              storage.default.set('isSuperAdmin', isSuperAdmin);
            }

            _context2.next = 14;
            return setupAccountResources(res.data);

          case 14:
            account = _context2.sent;
            return _context2.abrupt("return", account);

          case 16:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function login(_x2, _x3, _x4, _x5) {
    return _ref2.apply(this, arguments);
  };
}();
/**
 * Login with token
 * @param {String} accountId - Account ID
 * @param {String} token - JWT
 */

var loginWithToken = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(token, accountId) {
    var account, newAccount;
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            sdkClient.setToken(token);
            _context3.next = 3;
            return sdkClient.accounts.getAccount(accountId);

          case 3:
            account = _context3.sent;
            _context3.next = 6;
            return setupAccountResources(account);

          case 6:
            newAccount = _context3.sent;
            return _context3.abrupt("return", newAccount);

          case 8:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function loginWithToken(_x6, _x7) {
    return _ref3.apply(this, arguments);
  };
}();
/**
 * Impersonate a user
 * @param {String} accountId - Account ID
 * @param {Object} opts - Additional options
 */

var impersonate = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(accountId, opts) {
    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              accountId: accountId
            }, opts.hyperMediaEndpoint);
            return _context4.abrupt("return", request(_objectSpread$7({}, opts, {
              getFullResponse: true,
              path: pathImpersonateAccount(accountId)
            }), {
              method: 'post'
            }));

          case 3:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));

  return function impersonate(_x8, _x9) {
    return _ref4.apply(this, arguments);
  };
}();
/**
 * Log out a user
 * @param {Object} opts - Additional options
 */

var logout = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(opts) {
    var res;
    return _regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return request(_objectSpread$7({}, opts, {
              getFullResponse: true,
              path: PATH__AUTH
            }), {
              method: 'delete'
            });

          case 2:
            res = _context5.sent;
            sdkClient.removeStorage();
            return _context5.abrupt("return", res);

          case 5:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));

  return function logout(_x10) {
    return _ref5.apply(this, arguments);
  };
}();
/**
 * Object OTK
 * @param {String} email - Email address
 * @param {String} accountId - Account ID
 * @param {Object} opts - Additional options
 */

var requestOtk = /*#__PURE__*/function () {
  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(email, accountId, requestBody, opts) {
    var body, res;
    return _regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            body = _omitBy(_objectSpread$7({
              email: email,
              accountId: accountId
            }, requestBody), _isEmpty);
            _context6.next = 3;
            return request(_objectSpread$7({}, opts, {
              getFullResponse: true,
              path: PATH__OTK
            }), {
              method: 'post',
              data: body
            });

          case 3:
            res = _context6.sent;
            return _context6.abrupt("return", res);

          case 5:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));

  return function requestOtk(_x11, _x12, _x13, _x14) {
    return _ref6.apply(this, arguments);
  };
}();
/**
 * Generate Authy
 * @param {String} accountId - Account ID
 * @param {Object} opts - Additional options
 */

var generateAuthy = /*#__PURE__*/function () {
  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(accountId, opts) {
    var res;
    return _regeneratorRuntime.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              accountId: accountId
            }, opts.hyperMediaEndpoint);
            _context7.next = 4;
            return request(_objectSpread$7({}, opts, {
              path: pathAuthy(accountId),
              getFullResponse: true
            }), {
              method: 'post'
            });

          case 4:
            res = _context7.sent;
            return _context7.abrupt("return", res);

          case 6:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));

  return function generateAuthy(_x15, _x16) {
    return _ref7.apply(this, arguments);
  };
}();
/**
 * Remove Authy
 * @param {String} accountId - Account ID
 * @param {Object} opts - Additional options
 */

var removeAuthy = /*#__PURE__*/function () {
  var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(accountId, opts) {
    var res;
    return _regeneratorRuntime.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              accountId: accountId
            }, opts.hyperMediaEndpoint);
            _context8.next = 4;
            return request(_objectSpread$7({}, opts, {
              path: pathAuthy(accountId),
              getFullResponse: true
            }), {
              method: 'delete'
            });

          case 4:
            res = _context8.sent;
            return _context8.abrupt("return", res);

          case 6:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  }));

  return function removeAuthy(_x17, _x18) {
    return _ref8.apply(this, arguments);
  };
}();
/**
 * Verify Authy
 * @param {String} accountId - Account ID
 * @param {String} token - Authy Token
 * @param {Object} opts - Additional options
 */

var verifyAuthy = /*#__PURE__*/function () {
  var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(accountId, token, opts) {
    var res;
    return _regeneratorRuntime.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              accountId: accountId
            }, opts.hyperMediaEndpoint);
            _context9.next = 4;
            return request(_objectSpread$7({}, opts, {
              path: pathAuthyVerify(accountId),
              getFullResponse: true
            }), {
              method: 'post',
              data: {
                token: token
              }
            });

          case 4:
            res = _context9.sent;
            return _context9.abrupt("return", res);

          case 6:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));

  return function verifyAuthy(_x19, _x20, _x21) {
    return _ref9.apply(this, arguments);
  };
}();
/**
 * Create a short lived token
 * @param {String} apiKey - API Key
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var createShortLivedToken = /*#__PURE__*/function () {
  var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(apiKey, body, opts) {
    var res;
    return _regeneratorRuntime.wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              apiKey: apiKey
            }, opts.hyperMediaEndpoint);
            sdkClient.setToken("Bearer " + apiKey);
            _context10.next = 5;
            return request(_objectSpread$7({}, opts, {
              path: PATH__AUTH_TOKEN
            }), {
              method: 'post',
              data: body
            });

          case 5:
            res = _context10.sent;
            return _context10.abrupt("return", res);

          case 7:
          case "end":
            return _context10.stop();
        }
      }
    }, _callee10);
  }));

  return function createShortLivedToken(_x22, _x23, _x24) {
    return _ref10.apply(this, arguments);
  };
}();

var auth = /*#__PURE__*/Object.freeze({
  __proto__: null,
  login: login,
  loginWithToken: loginWithToken,
  impersonate: impersonate,
  logout: logout,
  requestOtk: requestOtk,
  generateAuthy: generateAuthy,
  removeAuthy: removeAuthy,
  verifyAuthy: verifyAuthy,
  createShortLivedToken: createShortLivedToken
});

function ownKeys$8(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$8(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$8(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$8(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var PATH__APPLICATIONS = '/applications';
var PATH__SELF_APPLICATION = '/applications/me';

var pathApplication = function pathApplication(applicationId) {
  return "/applications/" + applicationId;
};
/**
 * Get self application
 * @param {Object} opts - Additional options
 */


var getSelfApplication = function getSelfApplication(opts) {
  if (opts === void 0) {
    opts = {};
  }

  return request(_objectSpread$8({}, opts, {
    path: PATH__SELF_APPLICATION
  }), {
    method: 'get'
  });
};
/**
 * Get applications
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getApplications = function getApplications(query, opts) {
  if (query === void 0) {
    query = {};
  }

  if (opts === void 0) {
    opts = {};
  }

  return request(_objectSpread$8({}, opts, {
    path: PATH__APPLICATIONS
  }), {
    method: 'get',
    params: query
  });
};
/**
 * Get application
 * @param {String} applicationId - Application ID
 * @param {Object} opts - Additional options
 */

var getApplication = function getApplication(applicationId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    applicationId: applicationId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$8({}, opts, {
    path: pathApplication(applicationId)
  }), {
    method: 'get'
  });
};
/**
 * Update application
 * @param {String} applicationId - Application ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var updateApplication = function updateApplication(applicationId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    applicationId: applicationId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$8({}, opts, {
    path: pathApplication(applicationId)
  }), {
    method: 'put',
    data: body
  });
};
/**
 * Create application
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var createApplication = function createApplication(body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  return request(_objectSpread$8({}, opts, {
    path: PATH__APPLICATIONS
  }), {
    method: 'post',
    data: body
  });
};

var applications = /*#__PURE__*/Object.freeze({
  __proto__: null,
  getSelfApplication: getSelfApplication,
  getApplications: getApplications,
  getApplication: getApplication,
  updateApplication: updateApplication,
  createApplication: createApplication
});

function ownKeys$9(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$9(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$9(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$9(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var pathBusinessBulkUploads = function pathBusinessBulkUploads(businessId) {
  return "/businesses/" + businessId + "/bulkuploads";
};
var pathBusinessBulkUpload = function pathBusinessBulkUpload(businessId, bulkUploadId) {
  return "/businesses/" + businessId + "/bulkuploads/" + bulkUploadId;
};
var pathBusinessBulkUploadUrl = function pathBusinessBulkUploadUrl(businessId) {
  return "/businesses/" + businessId + "/bulkuploads/uploadurl";
};
/**
 * Create a bulk upload from file
 * @param {string} businessId - Business ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var createBulkUpload = function createBulkUpload(businessId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  });
  return request(_objectSpread$9({}, opts, {
    path: pathBusinessBulkUploads(businessId)
  }), {
    method: 'post',
    data: body
  });
};
/**
 * Get a bulk upload
 * @param {string} businessId - Business ID
 * @param {string} bulkUploadId - Bulk upload ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var getBulkUpload = function getBulkUpload(businessId, bulkUploadId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId,
    bulkUploadId: bulkUploadId
  });
  return request(_objectSpread$9({}, opts, {
    path: pathBusinessBulkUpload(businessId, bulkUploadId)
  }), {
    method: 'get'
  });
};
/**
 * Get a bulk upload url
 * @param {string} businessId - Business ID
 * @param {Object} query - Query params
 * @param {Object} opts - Additional options
 */

var getBulkUploadUrl = function getBulkUploadUrl(businessId, query, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  });
  return request(_objectSpread$9({}, opts, {
    path: pathBusinessBulkUploadUrl(businessId)
  }), {
    method: 'get',
    params: query
  });
};

var bulkUploads = /*#__PURE__*/Object.freeze({
  __proto__: null,
  pathBusinessBulkUploads: pathBusinessBulkUploads,
  pathBusinessBulkUpload: pathBusinessBulkUpload,
  pathBusinessBulkUploadUrl: pathBusinessBulkUploadUrl,
  createBulkUpload: createBulkUpload,
  getBulkUpload: getBulkUpload,
  getBulkUploadUrl: getBulkUploadUrl
});

function ownKeys$a(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$a(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$a(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$a(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var pathSubmitDraftInvoices = function pathSubmitDraftInvoices(businessId) {
  return "/businesses/" + businessId + "/bulksubmits";
};
var pathGetDraftProgressStatus = function pathGetDraftProgressStatus(businessId, bulkSubmitId) {
  return "/businesses/" + businessId + "/bulksubmits/" + bulkSubmitId;
};
/**
 * Bulk submission of one or more draft invoices.
 * @param {String} businessId - Business ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var submitDraftInvoices = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(businessId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId
            }, opts.hyperMediaEndpoint);
            return _context.abrupt("return", request(_objectSpread$a({}, opts, {
              path: pathSubmitDraftInvoices(businessId)
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function submitDraftInvoices(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * Get draft invocies progress status
 * @param {String} businessId - Business ID
 * @param {String} bulkSubmitId - Bulk Submit ID
 * @param {Object} opts - Additional options
 */

var getDraftProgressStatus = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(businessId, bulkSubmitId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              bulkSubmitId: bulkSubmitId
            }, opts.hyperMediaEndpoint);
            return _context2.abrupt("return", request(_objectSpread$a({}, opts, {
              path: pathGetDraftProgressStatus(businessId, bulkSubmitId)
            }), {
              method: 'get',
              params: query
            }));

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function getDraftProgressStatus(_x4, _x5, _x6, _x7) {
    return _ref2.apply(this, arguments);
  };
}();

var bulkSubmits = /*#__PURE__*/Object.freeze({
  __proto__: null,
  pathSubmitDraftInvoices: pathSubmitDraftInvoices,
  pathGetDraftProgressStatus: pathGetDraftProgressStatus,
  submitDraftInvoices: submitDraftInvoices,
  getDraftProgressStatus: getDraftProgressStatus
});

function ownKeys$b(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$b(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$b(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$b(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var pathLinkBusinessProfile = function pathLinkBusinessProfile(businessProfileId) {
  return "/businessprofiles/" + businessProfileId + "/link";
};
var pathUnlinkBusinessProfile = function pathUnlinkBusinessProfile(businessProfileId) {
  return "/businessprofiles/" + businessProfileId + "/unlink";
};
var pathOrganisationBusinessProfiles = function pathOrganisationBusinessProfiles(organisationId) {
  return "/organisations/" + organisationId + "/businessprofiles";
};
var getOrganisationBusinessProfiles = function getOrganisationBusinessProfiles(organisationId, query, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    organisationId: organisationId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$b({}, opts, {
    path: pathOrganisationBusinessProfiles(organisationId)
  }), {
    method: 'get',
    params: query
  });
};
var linkBusinessProfile = function linkBusinessProfile(businessProfileId, businessId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessProfileId: businessProfileId,
    businessId: businessId
  }, opts.hyperMediaEndpoint);
  var body = {
    businessId: businessId
  };
  return request(_objectSpread$b({}, opts, {
    path: pathLinkBusinessProfile(businessProfileId)
  }), {
    method: 'put',
    data: body
  });
};
var unlinkBusinessProfile = function unlinkBusinessProfile(businessProfileId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessProfileId: businessProfileId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$b({}, opts, {
    path: pathUnlinkBusinessProfile(businessProfileId)
  }), {
    method: 'put'
  });
};

var businessProfiles = /*#__PURE__*/Object.freeze({
  __proto__: null,
  pathLinkBusinessProfile: pathLinkBusinessProfile,
  pathUnlinkBusinessProfile: pathUnlinkBusinessProfile,
  pathOrganisationBusinessProfiles: pathOrganisationBusinessProfiles,
  getOrganisationBusinessProfiles: getOrganisationBusinessProfiles,
  linkBusinessProfile: linkBusinessProfile,
  unlinkBusinessProfile: unlinkBusinessProfile
});

function ownKeys$c(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$c(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$c(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$c(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var PATH__BUSINESSES = '/businesses';
var PATH__MY_BUSINESSES = '/businesses/me';

var pathBusiness = function pathBusiness(businessId) {
  return "/businesses/" + businessId;
};

var pathAccountsBusinesses = function pathAccountsBusinesses(accountId) {
  return "/accounts/" + accountId + "/businesses";
};

var pathBusinessOnboardingQuestions = function pathBusinessOnboardingQuestions(businessId) {
  return "/businesses/" + businessId + "/onboarding/emailquestions";
};

var pathBusinessSendEmails = function pathBusinessSendEmails(businessId) {
  return "/businesses/" + businessId + "/sendemail";
};

var pathOrganisationBusiness = function pathOrganisationBusiness(organisationId) {
  return "/organisations/" + organisationId + "/businesses";
};

var pathVerifyMedicare = function pathVerifyMedicare(businessId) {
  return "/businesses/" + businessId + "/medicare/verify";
}; // This can be removed once we migrate to the new medicare service


var oldPathVerifyDVA = function oldPathVerifyDVA(businessId) {
  return "/businesses/" + businessId + "/dva/pvv/verify";
};

var pathVerifyDVA = function pathVerifyDVA(businessId) {
  return "/businesses/" + businessId + "/dva/verify";
};

var pathVerifyIcare = function pathVerifyIcare(businessId) {
  return "/businesses/" + businessId + "/icare/verify";
};

var pathVerifyComcare = function pathVerifyComcare(businessId, staffId, providerSetItemId) {
  return "/businesses/" + businessId + "/staff/" + staffId + "/providersetitems/" + providerSetItemId + "/comcare/verify";
};

var pathCreateSupportNote = function pathCreateSupportNote(businessId) {
  return "/businesses/" + businessId + "/supportnotes";
};

var pathBsbDetails = function pathBsbDetails(businessId) {
  return "/businesses/" + businessId + "/bsbs";
};

var pathDisableBusiness = function pathDisableBusiness(businessId) {
  return "/businesses/" + businessId + "/disable";
};

var pathEnableBusiness = function pathEnableBusiness(businessId) {
  return "/businesses/" + businessId + "/reenable";
};

var pathSuspendBusiness = function pathSuspendBusiness(businessId) {
  return "/businesses/" + businessId + "/suspend";
};

var pathUnsuspendBusiness = function pathUnsuspendBusiness(businessId) {
  return "/businesses/" + businessId + "/unsuspend";
};
/**
 * Create businesses
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */


var createBusiness = function createBusiness(body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  return request(_objectSpread$c({}, opts, {
    path: PATH__BUSINESSES
  }), {
    method: 'post',
    data: body
  });
};
/**
 * Create organisation businesses
 * @param {String} organisationId - Business ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var createOrganisationBusiness = function createOrganisationBusiness(organisationId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    organisationId: organisationId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$c({}, opts, {
    path: pathOrganisationBusiness(organisationId)
  }), {
    method: 'post',
    data: body
  });
};
/**
 * Delete business
 * @param {String} businessId - Business ID
 * @param {Object} opts - Additional options
 */

var deleteBusiness = function deleteBusiness(businessId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$c({}, opts, {
    path: pathBusiness(businessId)
  }), {
    method: 'delete'
  });
};
/**
 * Disable business
 * @param {String} businessId - Business ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var disableBusiness = function disableBusiness(businessId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$c({}, opts, {
    path: pathDisableBusiness(businessId)
  }), {
    method: 'post',
    data: body
  });
};
/**
 * Email business setup questions to support
 * @param {Object} businessId - Business ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var emailBusinessOnboardingQuestions = function emailBusinessOnboardingQuestions(businessId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$c({}, opts, {
    path: pathBusinessOnboardingQuestions(businessId)
  }), {
    method: 'post',
    data: body
  });
};
/**
 * Enable business
 * @param {String} businessId - Business ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var enableBusiness = function enableBusiness(businessId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$c({}, opts, {
    path: pathEnableBusiness(businessId)
  }), {
    method: 'post',
    data: body
  });
};
/**
 * Get business
 * @param {String} businessId - Business ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getBusiness = function getBusiness(businessId, query, opts) {
  if (query === void 0) {
    query = {};
  }

  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$c({}, opts, {
    path: pathBusiness(businessId)
  }), {
    method: 'get',
    params: query
  });
};
/**
 * Get businesses
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getBusinesses = function getBusinesses(query, opts) {
  if (query === void 0) {
    query = {};
  }

  if (opts === void 0) {
    opts = {};
  }

  return request(_objectSpread$c({}, opts, {
    path: PATH__BUSINESSES
  }), {
    method: 'get',
    params: query
  });
};
/**
 * Get businesses
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getMyBusinesses = function getMyBusinesses(query, opts) {
  if (query === void 0) {
    query = {};
  }

  if (opts === void 0) {
    opts = {};
  }

  return request(_objectSpread$c({}, opts, {
    path: PATH__MY_BUSINESSES
  }), {
    method: 'get',
    params: query
  });
};
/**
 * Get business PDFs
 * @param {String} businessId - Business ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var getBusinessPDFs = function getBusinessPDFs(businessId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$c({}, opts, {
    path: pathBusiness(businessId) + "/pdfs"
  }), {
    method: 'post',
    data: body,
    responseType: 'arraybuffer'
  });
};
/**
 * Get accounts businesses
 * @param {String} accountId - Organisation ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getAccountsBusinesses = function getAccountsBusinesses(accountId, query, opts) {
  if (query === void 0) {
    query = {};
  }

  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    accountId: accountId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$c({}, opts, {
    path: pathAccountsBusinesses(accountId)
  }), {
    method: 'get',
    params: query
  });
};
/**
 * Get organisation businesses
 * @param {String} organisationId - Organisation ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getOrganisationBusinesses = function getOrganisationBusinesses(organisationId, query, opts) {
  if (query === void 0) {
    query = {};
  }

  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    organisationId: organisationId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$c({}, opts, {
    path: pathOrganisationBusiness(organisationId)
  }), {
    method: 'get',
    params: query
  });
};
/**
 * Update businesses
 * @param {String} businessId - Business ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var updateBusiness = function updateBusiness(businessId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$c({}, opts, {
    path: pathBusiness(businessId)
  }), {
    method: 'put',
    data: body
  });
};
/**
 * Unsuspend business
 * @param {String} businessId - Business ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var unsuspendBusiness = function unsuspendBusiness(businessId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$c({}, opts, {
    path: pathUnsuspendBusiness(businessId)
  }), {
    method: 'post',
    data: body
  });
};
/**
 * Verify Medicare
 * @param {String} businessId - Business ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var verifyMedicare = function verifyMedicare(businessId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$c({}, opts, {
    path: pathVerifyMedicare(businessId)
  }), {
    method: 'post',
    data: body
  });
};
/**
 * Old verify DVA - This can be removed once we migrate to the new medicare service
 * @param {String} businessId - Business ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var oldVerifyDVA = function oldVerifyDVA(businessId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$c({}, opts, {
    path: oldPathVerifyDVA(businessId)
  }), {
    method: 'post',
    data: body
  });
};
/**
 * Verify DVA
 * @param {String} businessId - Business ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var verifyDVA = function verifyDVA(businessId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$c({}, opts, {
    path: pathVerifyDVA(businessId)
  }), {
    method: 'post',
    data: body
  });
};
/**
 * Verify icare
 * @param {String} businessId - Business ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var verifyIcare = function verifyIcare(businessId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$c({}, opts, {
    path: pathVerifyIcare(businessId)
  }), {
    method: 'post',
    data: body
  });
};
/**
 * Verify Comcare claim number
 * @param {String} businessId - Business ID
 * @param {String} staffId - Staff ID
 * @param {String} providerSetItemId - Provider set item ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var verifyComcare = function verifyComcare(businessId, staffId, providerSetItemId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId,
    staffId: staffId,
    providerSetItemId: providerSetItemId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$c({}, opts, {
    path: pathVerifyComcare(businessId, staffId, providerSetItemId)
  }), {
    method: 'post',
    data: body
  });
};
/**
 * Create business support note
 * @param {String} businessId - Business ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var createSupportNote = function createSupportNote(businessId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$c({}, opts, {
    path: pathCreateSupportNote(businessId)
  }), {
    method: 'post',
    data: body
  });
};
/**
 * Get bank state branch (BSB) details
 * @param {String} businessId - Business ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var getBsbDetails = function getBsbDetails(businessId, query, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$c({}, opts, {
    path: pathBsbDetails(businessId)
  }), {
    method: 'get',
    params: query
  });
};
/**
 * Send email to business
 * @param {Object} businessId - Business ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var sendBusinessEmail = function sendBusinessEmail(businessId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$c({}, opts, {
    path: pathBusinessSendEmails(businessId)
  }), {
    method: 'post',
    data: body
  });
};
/**
 * Suspend business
 * @param {String} businessId - Business ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var suspendBusiness = function suspendBusiness(businessId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$c({}, opts, {
    path: pathSuspendBusiness(businessId)
  }), {
    method: 'post',
    data: body
  });
};

var businesses = /*#__PURE__*/Object.freeze({
  __proto__: null,
  createBusiness: createBusiness,
  createOrganisationBusiness: createOrganisationBusiness,
  deleteBusiness: deleteBusiness,
  disableBusiness: disableBusiness,
  emailBusinessOnboardingQuestions: emailBusinessOnboardingQuestions,
  enableBusiness: enableBusiness,
  getBusiness: getBusiness,
  getBusinesses: getBusinesses,
  getMyBusinesses: getMyBusinesses,
  getBusinessPDFs: getBusinessPDFs,
  getAccountsBusinesses: getAccountsBusinesses,
  getOrganisationBusinesses: getOrganisationBusinesses,
  updateBusiness: updateBusiness,
  unsuspendBusiness: unsuspendBusiness,
  verifyMedicare: verifyMedicare,
  oldVerifyDVA: oldVerifyDVA,
  verifyDVA: verifyDVA,
  verifyIcare: verifyIcare,
  verifyComcare: verifyComcare,
  createSupportNote: createSupportNote,
  getBsbDetails: getBsbDetails,
  sendBusinessEmail: sendBusinessEmail,
  suspendBusiness: suspendBusiness
});

function ownKeys$d(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$d(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$d(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$d(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var pathBusinessClaimItems = function pathBusinessClaimItems(businessId) {
  return "/businesses/" + businessId + "/claimitems";
};

var pathBusinessClaimItem = function pathBusinessClaimItem(businessId, claimItemId) {
  return "/businesses/" + businessId + "/claimitems/" + claimItemId;
};

var pathHealthFundClaimItems = function pathHealthFundClaimItems(healthFundId) {
  return "/healthfunds/" + healthFundId + "/claimitems";
};

var pathHealthFundClaimItem = function pathHealthFundClaimItem(healthFundId, claimItemId) {
  return "/healthfunds/" + healthFundId + "/claimitems/" + claimItemId;
};
/**
 * Get business claim items
 * @param {String} businessId - Business ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */


var getBusinessClaimItems = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(businessId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId
            }, opts.hyperMediaEndpoint);
            return _context.abrupt("return", request(_objectSpread$d({}, opts, {
              path: pathBusinessClaimItems(businessId)
            }), {
              method: 'get',
              params: query
            }));

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function getBusinessClaimItems(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * Get business claim item
 * @param {String} businessId - Business ID
 * @param {String} claimItemId - Claim item ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getBusinessClaimItem = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(businessId, claimItemId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              claimItemId: claimItemId
            }, opts.hyperMediaEndpoint);
            return _context2.abrupt("return", request(_objectSpread$d({}, opts, {
              path: pathBusinessClaimItem(businessId, claimItemId)
            }), {
              method: 'get',
              params: query
            }));

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function getBusinessClaimItem(_x4, _x5, _x6, _x7) {
    return _ref2.apply(this, arguments);
  };
}();
/**
 * Get health fund claim items
 * @param {String} healthFundId - Health fund ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getHealthFundClaimItems = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(healthFundId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              healthFundId: healthFundId
            }, opts.hyperMediaEndpoint);
            return _context3.abrupt("return", request(_objectSpread$d({}, opts, {
              path: pathHealthFundClaimItems(healthFundId)
            }), {
              method: 'get',
              params: query
            }));

          case 4:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function getHealthFundClaimItems(_x8, _x9, _x10) {
    return _ref3.apply(this, arguments);
  };
}();
/**
 * Get health fund claim item
 * @param {String} healthFundId - Health fund ID
 * @param {String} claimItemId - Health fund ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getHealthFundClaimItem = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(healthFundId, claimItemId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              healthFundId: healthFundId,
              claimItemId: claimItemId
            }, opts.hyperMediaEndpoint);
            return _context4.abrupt("return", request(_objectSpread$d({}, opts, {
              path: pathHealthFundClaimItem(healthFundId, claimItemId)
            }), {
              method: 'get',
              params: query
            }));

          case 4:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));

  return function getHealthFundClaimItem(_x11, _x12, _x13, _x14) {
    return _ref4.apply(this, arguments);
  };
}();

var claimItems = /*#__PURE__*/Object.freeze({
  __proto__: null,
  getBusinessClaimItems: getBusinessClaimItems,
  getBusinessClaimItem: getBusinessClaimItem,
  getHealthFundClaimItems: getHealthFundClaimItems,
  getHealthFundClaimItem: getHealthFundClaimItem
});

function ownKeys$e(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$e(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$e(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$e(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var PATH__DEVICES = '/devices';
var isRegistering = false;
/**
 * Register a device
 * @param {Object} opts - Additional options
 * @returns {Object} The device data
 */

var registerDevice = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(opts) {
    var deviceData, data, _data;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (isRegistering) {
              _context.next = 15;
              break;
            }

            _context.prev = 1;
            isRegistering = true;
            deviceData = {
              deviceType: 'browser',
              os: {
                type: platform.os.family || 'Unknown',
                ver: platform.os.version || '0'
              },
              app: {
                appId: platform.ua || 'Unknown'
              }
            };
            _context.next = 6;
            return request(_objectSpread$e({}, opts, {
              path: PATH__DEVICES
            }), {
              method: 'post',
              data: deviceData,
              skipDeviceCheck: true
            });

          case 6:
            data = _context.sent;
            sdkClient.device = data;
            storage.default.set('device', data);
            return _context.abrupt("return", data);

          case 10:
            _context.prev = 10;
            isRegistering = false;
            return _context.finish(10);

          case 13:
            _context.next = 20;
            break;

          case 15:
            _context.next = 17;
            return new Promise(function (resolve) {
              return setTimeout(resolve, 100);
            });

          case 17:
            _data = sdkClient.device;

          case 18:
            if (!_data) {
              _context.next = 15;
              break;
            }

          case 19:
            return _context.abrupt("return", _data);

          case 20:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[1,, 10, 13]]);
  }));

  return function registerDevice(_x) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * Check if the device exists, and set the device id request header.
 */

var getDeviceId = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
    var device, data;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            device = sdkClient.device || storage.default.get('device');

            if (!(!device || !device.deviceId)) {
              _context2.next = 6;
              break;
            }

            _context2.next = 4;
            return registerDevice();

          case 4:
            data = _context2.sent;
            return _context2.abrupt("return", data.deviceId);

          case 6:
            return _context2.abrupt("return", device.deviceId);

          case 7:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function getDeviceId() {
    return _ref2.apply(this, arguments);
  };
}();

var devices = /*#__PURE__*/Object.freeze({
  __proto__: null,
  registerDevice: registerDevice,
  getDeviceId: getDeviceId
});

function ownKeys$f(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$f(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$f(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$f(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var PATH__DOC_ACCOUNTS = '/docaccounts';

var pathDocAccount = function pathDocAccount(docAccountId) {
  return "/docaccounts/" + docAccountId;
};
/**
 * Get documentation accounts
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */


var getDocAccounts = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(query, opts) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            return _context.abrupt("return", request(_objectSpread$f({}, opts, {
              path: PATH__DOC_ACCOUNTS
            }), {
              method: 'get',
              params: query
            }));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function getDocAccounts(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * Get documentation account
 * @param {String} docAccountId - Documentation Account ID
 * @param {Object} opts - Additional options
 */

var getDocAccount = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(partnerId, opts) {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              partnerId: partnerId
            }, opts.hyperMediaEndpoint);
            return _context2.abrupt("return", request(_objectSpread$f({}, opts, {
              path: pathDocAccount(partnerId)
            }), {
              method: 'get'
            }));

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function getDocAccount(_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();
/**
 * Create documentation account
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var createDocAccount = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(body, opts) {
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            return _context3.abrupt("return", request(_objectSpread$f({}, opts, {
              path: PATH__DOC_ACCOUNTS
            }), {
              method: 'post',
              data: body
            }));

          case 2:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function createDocAccount(_x5, _x6) {
    return _ref3.apply(this, arguments);
  };
}();
/**
 * Update documentation account
 * @param {String} docAccountId - Documentation Account ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var updateDocAccount = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(docAccountId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              docAccountId: docAccountId
            }, opts.hyperMediaEndpoint);
            return _context4.abrupt("return", request(_objectSpread$f({}, opts, {
              path: pathDocAccount(docAccountId)
            }), {
              method: 'put',
              data: body
            }));

          case 3:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));

  return function updateDocAccount(_x7, _x8, _x9) {
    return _ref4.apply(this, arguments);
  };
}();
/**
 * Delete documentation account
 * @param {String} docAccountId - Documentation Account ID
 * @param {Object} opts - Additional options
 */

var deleteDocAccount = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(docAccountId, opts) {
    return _regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              docAccountId: docAccountId
            }, opts.hyperMediaEndpoint);
            return _context5.abrupt("return", request(_objectSpread$f({}, opts, {
              path: pathDocAccount(docAccountId)
            }), {
              method: 'delete'
            }));

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));

  return function deleteDocAccount(_x10, _x11) {
    return _ref5.apply(this, arguments);
  };
}();

var docAccounts = /*#__PURE__*/Object.freeze({
  __proto__: null,
  getDocAccounts: getDocAccounts,
  getDocAccount: getDocAccount,
  createDocAccount: createDocAccount,
  updateDocAccount: updateDocAccount,
  deleteDocAccount: deleteDocAccount
});

function ownKeys$g(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$g(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$g(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$g(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var pathBusinessDocuments = function pathBusinessDocuments(businessId) {
  return "/businesses/" + businessId + "/documents";
};
var pathBusinessDocument = function pathBusinessDocument(businessId, documentId) {
  return "/businesses/" + businessId + "/documents/" + documentId;
};
var pathBusinessDocumentCancel = function pathBusinessDocumentCancel(businessId, documentId) {
  return "/businesses/" + businessId + "/documents/" + documentId + "/cancellations";
};
var pathHealthFundDocument = function pathHealthFundDocument(healthFundId, documentId) {
  return "/healthfunds/" + healthFundId + "/documents/" + documentId;
};
var pathHealthFundDocumentApprove = function pathHealthFundDocumentApprove(healthFundId, documentId) {
  return "/healthfunds/" + healthFundId + "/documents/" + documentId + "/approvals";
};
var pathHealthFundDocumentAssignToMe = function pathHealthFundDocumentAssignToMe(healthFundId, documentId) {
  return "/healthfunds/" + healthFundId + "/documents/" + documentId + "/assigntome";
};
var pathHealthFundDocumentDecline = function pathHealthFundDocumentDecline(healthFundId, documentId) {
  return "/healthfunds/" + healthFundId + "/documents/" + documentId + "/decline";
};
var pathHealthFundDocumentCease = function pathHealthFundDocumentCease(healthFundId, documentId) {
  return "/healthfunds/" + healthFundId + "/documents/" + documentId + "/cease";
};
var pathHealthFundDocumentPark = function pathHealthFundDocumentPark(healthFundId, documentId) {
  return "/healthfunds/" + healthFundId + "/documents/" + documentId + "/park";
};
var pathHealthFundDocumentTag = function pathHealthFundDocumentTag(healthFundId, documentId, tagId) {
  return "/healthfunds/" + healthFundId + "/documents/" + documentId + "/tags/" + tagId;
};
var pathHealthFundDocuments = function pathHealthFundDocuments(healthFundId) {
  return "/healthfunds/" + healthFundId + "/documents";
};
/**
 * Approve health fund document
 * @param {String} healthFundId - Business ID
 * @param {String} documentId - Document ID
 * @param {Object} opts - Additional options
 */

var approveHealthFundDocument = function approveHealthFundDocument(healthFundId, documentId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    healthFundId: healthFundId,
    documentId: documentId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$g({}, opts, {
    path: pathHealthFundDocumentApprove(healthFundId, documentId)
  }), {
    method: 'post'
  });
};
/**
 * Get business documents
 * @param {String} businessId - Business ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var assignHealthFundDocumentToMe = function assignHealthFundDocumentToMe(healthFundId, documentId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    healthFundId: healthFundId,
    documentId: documentId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$g({}, opts, {
    path: pathHealthFundDocumentAssignToMe(healthFundId, documentId)
  }), {
    method: 'put'
  });
};
/**
 * Cancel business document
 * @param {String} businessId - Business ID
 * @param {String} documentId - Document ID
 * @param {Object} opts - Additional options
 */

var cancelBusinessDocument = function cancelBusinessDocument(businessId, documentId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId,
    documentId: documentId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$g({}, opts, {
    path: pathBusinessDocumentCancel(businessId, documentId)
  }), {
    method: 'post'
  });
};
/**
 * Decline health fund document
 * @param {String} healthFundId - Business ID
 * @param {String} documentId - Document ID
 * @param {Object} opts - Additional options
 */

var declineHealthFundDocument = function declineHealthFundDocument(healthFundId, documentId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    healthFundId: healthFundId,
    documentId: documentId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$g({}, opts, {
    path: pathHealthFundDocumentDecline(healthFundId, documentId)
  }), {
    method: 'post',
    data: body
  });
};
/**
 * Cease health fund document
 * @param {String} healthFundId - Business ID
 * @param {String} documentId - Document ID
 * @param {Object} opts - Additional options
 */

var ceaseHealthFundDocument = function ceaseHealthFundDocument(healthFundId, documentId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    healthFundId: healthFundId,
    documentId: documentId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$g({}, opts, {
    path: pathHealthFundDocumentCease(healthFundId, documentId)
  }), {
    method: 'post',
    data: body
  });
};
/**
 * Delete business document tag
 * @param {String} businessId - Business ID
 * @param {String} documentId - Document ID
 * @param {String} tagId - Tag ID
 * @param {Object} opts - Additional options
 */

var deleteHealthFundDocumentTag = function deleteHealthFundDocumentTag(healthFundId, documentId, tagId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    healthFundId: healthFundId,
    documentId: documentId,
    tagId: tagId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$g({}, opts, {
    path: pathHealthFundDocumentTag(healthFundId, documentId, tagId)
  }), {
    method: 'delete'
  });
};
/**
 * Get business documents
 * @param {String} businessId - Business ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getBusinessDocuments = function getBusinessDocuments(businessId, query, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$g({}, opts, {
    path: pathBusinessDocuments(businessId)
  }), {
    method: 'get',
    params: query
  });
};
/**
 * Get business document
 * @param {String} businessId - Business ID
 * @param {String} documentId - Document ID
 * @param {Object} opts - Additional options
 */

var getBusinessDocument = function getBusinessDocument(businessId, documentId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$g({}, opts, {
    path: pathBusinessDocument(businessId, documentId)
  }), {
    method: 'get'
  });
};
/**
 * Get health fund documents
 * @param {String} healthFundId - Business ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getHealthFundDocuments = function getHealthFundDocuments(healthFundId, query, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    healthFundId: healthFundId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$g({}, opts, {
    path: pathHealthFundDocuments(healthFundId)
  }), {
    method: 'get',
    params: query
  });
};
/**
 * Get health fund document
 * @param {String} healthFundId - Business ID
 * @param {String} documentId - Document ID
 * @param {Object} opts - Additional options
 */

var getHealthFundDocument = function getHealthFundDocument(healthFundId, documentId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    healthFundId: healthFundId,
    documentId: documentId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$g({}, opts, {
    path: pathHealthFundDocument(healthFundId, documentId)
  }), {
    method: 'get'
  });
};
/**
 * Park a health fund document
 * @param {String} healthFundId - Business ID
 * @param {String} documentId - Document ID
 * @param {Object} opts - Additional options
 */

var parkHealthFundDocument = function parkHealthFundDocument(healthFundId, documentId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    healthFundId: healthFundId,
    documentId: documentId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$g({}, opts, {
    path: pathHealthFundDocumentPark(healthFundId, documentId)
  }), {
    method: 'post',
    data: body
  });
};

var documents = /*#__PURE__*/Object.freeze({
  __proto__: null,
  pathBusinessDocuments: pathBusinessDocuments,
  pathBusinessDocument: pathBusinessDocument,
  pathBusinessDocumentCancel: pathBusinessDocumentCancel,
  pathHealthFundDocument: pathHealthFundDocument,
  pathHealthFundDocumentApprove: pathHealthFundDocumentApprove,
  pathHealthFundDocumentAssignToMe: pathHealthFundDocumentAssignToMe,
  pathHealthFundDocumentDecline: pathHealthFundDocumentDecline,
  pathHealthFundDocumentCease: pathHealthFundDocumentCease,
  pathHealthFundDocumentPark: pathHealthFundDocumentPark,
  pathHealthFundDocumentTag: pathHealthFundDocumentTag,
  pathHealthFundDocuments: pathHealthFundDocuments,
  approveHealthFundDocument: approveHealthFundDocument,
  assignHealthFundDocumentToMe: assignHealthFundDocumentToMe,
  cancelBusinessDocument: cancelBusinessDocument,
  declineHealthFundDocument: declineHealthFundDocument,
  ceaseHealthFundDocument: ceaseHealthFundDocument,
  deleteHealthFundDocumentTag: deleteHealthFundDocumentTag,
  getBusinessDocuments: getBusinessDocuments,
  getBusinessDocument: getBusinessDocument,
  getHealthFundDocuments: getHealthFundDocuments,
  getHealthFundDocument: getHealthFundDocument,
  parkHealthFundDocument: parkHealthFundDocument
});

function ownKeys$h(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$h(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$h(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$h(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var healthFundEmailSections = function healthFundEmailSections(healthFundId, emailTemplateId) {
  return "/healthfunds/" + healthFundId + "/emailtemplates/" + emailTemplateId + "/emailsections";
};
var healthFundEmailTemplates = function healthFundEmailTemplates(healthFundId) {
  return "/healthfunds/" + healthFundId + "/emailtemplates";
};
var healthFundTransactionEmail = function healthFundTransactionEmail(healthFundId, transactionId) {
  return "/healthfunds/" + healthFundId + "/transactions/" + transactionId + "/emails";
};
var healthFundDocumentEmail = function healthFundDocumentEmail(healthFundId, documentId) {
  return "/healthfunds/" + healthFundId + "/documents/" + documentId + "/emails";
};
var transactionEmailPackages = function transactionEmailPackages(transactionId) {
  return "/transactions/" + transactionId + "/emailpackages";
};
var transactionEmailPackage = function transactionEmailPackage(transactionId, emailPackageId) {
  return "/transactions/" + transactionId + "/emailpackages/" + emailPackageId;
};
var getHealthFundEmailSections = function getHealthFundEmailSections(healthFundId, emailTemplateId, query, opts) {
  if (query === void 0) {
    query = {};
  }

  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    healthFundId: healthFundId,
    emailTemplateId: emailTemplateId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$h({}, opts, {
    path: healthFundEmailSections(healthFundId, emailTemplateId)
  }), {
    method: 'get',
    params: query
  });
};
var getHealthFundEmailTemplates = function getHealthFundEmailTemplates(healthFundId, query, opts) {
  if (query === void 0) {
    query = {};
  }

  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    healthFundId: healthFundId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$h({}, opts, {
    path: healthFundEmailTemplates(healthFundId)
  }), {
    method: 'get',
    params: query
  });
};
var generateEmailTemplate = function generateEmailTemplate(healthFundId, transactionId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    healthFundId: healthFundId,
    transactionId: transactionId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$h({}, opts, {
    path: healthFundTransactionEmail(healthFundId, transactionId)
  }), {
    method: 'post',
    data: body
  });
};
var generateDocumentEmailTemplate = function generateDocumentEmailTemplate(healthFundId, documentId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    healthFundId: healthFundId,
    documentId: documentId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$h({}, opts, {
    path: healthFundDocumentEmail(healthFundId, documentId)
  }), {
    method: 'post',
    data: body
  });
};
var createEmailPackage = function createEmailPackage(transactionId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    transactionId: transactionId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$h({}, opts, {
    path: transactionEmailPackages(transactionId)
  }), {
    method: 'post',
    data: body
  });
};
var updateEmailPackage = function updateEmailPackage(transactionId, emailPackageId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    transactionId: transactionId,
    emailPackageId: emailPackageId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$h({}, opts, {
    path: transactionEmailPackage(transactionId, emailPackageId)
  }), {
    method: 'put',
    data: body
  });
};
var sendEmailPackage = function sendEmailPackage(transactionId, emailPackageId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    transactionId: transactionId,
    emailPackageId: emailPackageId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$h({}, opts, {
    path: transactionEmailPackage(transactionId, emailPackageId) + "/send"
  }), {
    method: 'post',
    data: body
  });
};

var emails = /*#__PURE__*/Object.freeze({
  __proto__: null,
  healthFundEmailSections: healthFundEmailSections,
  healthFundEmailTemplates: healthFundEmailTemplates,
  healthFundTransactionEmail: healthFundTransactionEmail,
  healthFundDocumentEmail: healthFundDocumentEmail,
  transactionEmailPackages: transactionEmailPackages,
  transactionEmailPackage: transactionEmailPackage,
  getHealthFundEmailSections: getHealthFundEmailSections,
  getHealthFundEmailTemplates: getHealthFundEmailTemplates,
  generateEmailTemplate: generateEmailTemplate,
  generateDocumentEmailTemplate: generateDocumentEmailTemplate,
  createEmailPackage: createEmailPackage,
  updateEmailPackage: updateEmailPackage,
  sendEmailPackage: sendEmailPackage
});

function ownKeys$i(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$i(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$i(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$i(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var pathFilterOptions = function pathFilterOptions(businessId) {
  return "/businesses/" + businessId + "/filteroptions";
};
var getBusinessFilterOptions = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(businessId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId
            }, opts.hyperMediaEndpoint);
            return _context.abrupt("return", request(_objectSpread$i({}, opts, {
              path: pathFilterOptions(businessId)
            }), {
              method: 'get',
              params: query
            }));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function getBusinessFilterOptions(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();

var filterOptions = /*#__PURE__*/Object.freeze({
  __proto__: null,
  pathFilterOptions: pathFilterOptions,
  getBusinessFilterOptions: getBusinessFilterOptions
});

function ownKeys$j(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$j(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$j(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$j(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var pathBusinessFormApplicationTemplate = function pathBusinessFormApplicationTemplate(businessId, formId, formApplicationTemplateId) {
  return "/businesses/" + businessId + "/forms/" + formId + "/formapplicationtemplates/" + formApplicationTemplateId;
};
var pathHealthFundFormApplicationTemplate = function pathHealthFundFormApplicationTemplate(healthFundId, formApplicationTemplateId) {
  return "/healthfunds/" + healthFundId + "/formapplicationtemplates/" + formApplicationTemplateId;
};
/**
 * Get business form application template
 * @param {String} businessId - Business ID
 * @param {String} formId - Form ID
 * @param {String} formApplicationTemplateId - Form ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getBusinessFormApplicationTemplate = function getBusinessFormApplicationTemplate(businessId, formId, formApplicationTemplateId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId,
    formId: formId,
    formApplicationTemplateId: formApplicationTemplateId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$j({}, opts, {
    path: pathBusinessFormApplicationTemplate(businessId, formId, formApplicationTemplateId)
  }), {
    method: 'get'
  });
};
/**
 * Get health fund form application template
 * @param {String} healthFundId - Health fund ID
 * @param {String} formApplicationTemplateId - Form ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getHealthFundFormApplicationTemplate = function getHealthFundFormApplicationTemplate(healthFundId, formApplicationTemplateId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    healthFundId: healthFundId,
    formApplicationTemplateId: formApplicationTemplateId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$j({}, opts, {
    path: pathHealthFundFormApplicationTemplate(healthFundId, formApplicationTemplateId)
  }), {
    method: 'get'
  });
};

var formApplicationTemplates = /*#__PURE__*/Object.freeze({
  __proto__: null,
  pathBusinessFormApplicationTemplate: pathBusinessFormApplicationTemplate,
  pathHealthFundFormApplicationTemplate: pathHealthFundFormApplicationTemplate,
  getBusinessFormApplicationTemplate: getBusinessFormApplicationTemplate,
  getHealthFundFormApplicationTemplate: getHealthFundFormApplicationTemplate
});

function ownKeys$k(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$k(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$k(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$k(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var pathBusinessFormApplication = function pathBusinessFormApplication(businessId, formApplicationId) {
  return "/businesses/" + businessId + "/formapplications/" + formApplicationId;
};
var pathHealthFundFormApplication = function pathHealthFundFormApplication(healthFundId, formApplicationId) {
  return "/healthfunds/" + healthFundId + "/formapplications/" + formApplicationId;
};
var pathUpdatePracticeRepresentative = function pathUpdatePracticeRepresentative(healthFundId, formApplicationId) {
  return "/healthfunds/" + healthFundId + "/formapplications/" + formApplicationId + "/practicerepresentative";
};
/**
 * Get business form application
 * @param {String} businessId - Business ID
 * @param {String} formApplicationId - Form ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getBusinessFormApplication = function getBusinessFormApplication(businessId, formApplicationId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId,
    formApplicationId: formApplicationId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$k({}, opts, {
    path: pathBusinessFormApplication(businessId, formApplicationId)
  }), {
    method: 'get'
  });
};
/**
 * Get health fund form application
 * @param {String} healthFundId - Business ID
 * @param {String} formApplicationId - Form ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getHealthFundFormApplication = function getHealthFundFormApplication(healthFundId, formApplicationId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    healthFundId: healthFundId,
    formApplicationId: formApplicationId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$k({}, opts, {
    path: pathHealthFundFormApplication(healthFundId, formApplicationId)
  }), {
    method: 'get'
  });
};
/**
 * Update form practice representative details
 * @param {Object} healthFundId - Health fund ID
 * @param {Object} body - Health fund details
 * @param {Object} opts - Additional options
 */

var updatePracticeRepresentative = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(healthFundId, formApplicationId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              healthFundId: healthFundId,
              formApplicationId: formApplicationId
            }, opts.hyperMediaEndpoint);
            return _context.abrupt("return", request(_objectSpread$k({}, opts, {
              path: pathUpdatePracticeRepresentative(healthFundId, formApplicationId)
            }), {
              method: 'put',
              data: body
            }));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function updatePracticeRepresentative(_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();

var formApplications = /*#__PURE__*/Object.freeze({
  __proto__: null,
  pathBusinessFormApplication: pathBusinessFormApplication,
  pathHealthFundFormApplication: pathHealthFundFormApplication,
  pathUpdatePracticeRepresentative: pathUpdatePracticeRepresentative,
  getBusinessFormApplication: getBusinessFormApplication,
  getHealthFundFormApplication: getHealthFundFormApplication,
  updatePracticeRepresentative: updatePracticeRepresentative
});

function ownKeys$l(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$l(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$l(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$l(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var pathBusinessForm = function pathBusinessForm(businessId, formId) {
  return "/businesses/" + businessId + "/forms/" + formId;
};
var pathBusinessFormApplications = function pathBusinessFormApplications(businessId, formId) {
  return "/businesses/" + businessId + "/forms/" + formId + "/formapplications";
};
var pathHealthFundForm = function pathHealthFundForm(healthFundId, formId) {
  return "/healthfunds/" + healthFundId + "/forms/" + formId;
};
var pathHealthFundFormPublish = function pathHealthFundFormPublish(healthFundId, formId) {
  return "/healthfunds/" + healthFundId + "/forms/" + formId + "/publish";
};
var pathHealthFundFormUnpublish = function pathHealthFundFormUnpublish(healthFundId, formId) {
  return "/healthfunds/" + healthFundId + "/forms/" + formId + "/unpublish";
};
var pathHealthFundForms = function pathHealthFundForms(healthFundId) {
  return "/healthfunds/" + healthFundId + "/forms";
};
var pathHealthFundFormUploadUrl = function pathHealthFundFormUploadUrl(healthFundId) {
  return "/healthfunds/" + healthFundId + "/forms/uploadurlv2";
};
var pathGetLatestApprovedDocument = function pathGetLatestApprovedDocument(businessId, practiceId, formId) {
  return "/businesses/" + businessId + "/practices/" + practiceId + "/forms/" + formId + "/latestapproved";
};
var pathGetManualFormUploadUrl = function pathGetManualFormUploadUrl(businessId, practiceId, formId) {
  return "/businesses/" + businessId + "/practices/" + practiceId + "/forms/" + formId + "/uploadurlv2";
};
/**
 * Apply for a business form
 * @param {String} healthFundId - Health fund ID
 * @param {String} formId - Form ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var applyForBusinessForm = function applyForBusinessForm(businessId, formId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId,
    formId: formId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$l({}, opts, {
    path: pathBusinessFormApplications(businessId, formId)
  }), {
    method: 'post',
    data: body
  });
};
/**
 * Create health fund form
 * @param {String} healthFundId - Health fund ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var createHealthFundForm = function createHealthFundForm(healthFundId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    healthFundId: healthFundId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$l({}, opts, {
    path: pathHealthFundForms(healthFundId)
  }), {
    method: 'post',
    data: body
  });
};
/**
 * Delete health fund form
 * @param {String} healthFundId - Health fund ID
 * @param {String} formId - Form ID
 * @param {Object} opts - Additional options
 */

var deleteHealthFundForm = function deleteHealthFundForm(healthFundId, formId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    healthFundId: healthFundId,
    formId: formId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$l({}, opts, {
    path: pathHealthFundForm(healthFundId, formId)
  }), {
    method: 'delete'
  });
};
/**
 * Get business form
 * @param {String} businessId - Business ID
 * @param {String} formId - Form ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getBusinessForm = function getBusinessForm(businessId, formId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId,
    formId: formId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$l({}, opts, {
    path: pathBusinessForm(businessId, formId)
  }), {
    method: 'get'
  });
};
/**
 * Get health fund forms
 * @param {String} healthFundId - Health fund ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getHealthFundForms = function getHealthFundForms(healthFundId, query, opts) {
  if (query === void 0) {
    query = {};
  }

  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    healthFundId: healthFundId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$l({}, opts, {
    path: pathHealthFundForms(healthFundId)
  }), {
    method: 'get',
    params: query
  });
};
/**
 * Get health fund form
 * @param {String} healthFundId - Health fund ID
 * @param {String} formId - Form ID
 * @param {Object} opts - Additional options
 */

var getHealthFundForm = function getHealthFundForm(healthFundId, formId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    healthFundId: healthFundId,
    formId: formId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$l({}, opts, {
    path: pathHealthFundForm(healthFundId, formId)
  }), {
    method: 'get'
  });
};
/**
 * Get health fund form
 * @param {String} healthFundId - Health fund ID
 * @param {String} formId - Form ID
 * @param {Object} opts - Additional options
 */

var getHealthFundFormUploadUrl = function getHealthFundFormUploadUrl(healthFundId, query, opts) {
  if (opts === void 0) {
    opts = {};
  }

  var contentType = query.contentType,
      fileName = query.fileName;
  doesParamExist.default({
    healthFundId: healthFundId,
    contentType: contentType,
    fileName: fileName
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$l({}, opts, {
    path: pathHealthFundFormUploadUrl(healthFundId)
  }), {
    method: 'get',
    params: query
  });
};
/**
 * Publish a health fund form
 * @param {String} healthFundId - Health fund ID
 * @param {String} formId - Form ID
 * @param {Object} opts - Additional options
 */

var publishHealthFundForm = function publishHealthFundForm(healthFundId, formId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    healthFundId: healthFundId,
    formId: formId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$l({}, opts, {
    path: pathHealthFundFormPublish(healthFundId, formId)
  }), {
    method: 'post'
  });
};
/**
 * Update health fund form
 * @param {String} healthFundId - Health fund ID
 * @param {String} formId - Form ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var updateHealthFundForm = function updateHealthFundForm(healthFundId, formId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    healthFundId: healthFundId,
    formId: formId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$l({}, opts, {
    path: pathHealthFundForm(healthFundId, formId)
  }), {
    method: 'put',
    data: body
  });
};
/**
 * Unpublish a health fund form
 * @param {String} healthFundId - Health fund ID
 * @param {String} formId - Form ID
 * @param {Object} opts - Additional options
 */

var unpublishHealthFundForm = function unpublishHealthFundForm(healthFundId, formId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    healthFundId: healthFundId,
    formId: formId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$l({}, opts, {
    path: pathHealthFundFormUnpublish(healthFundId, formId)
  }), {
    method: 'post'
  });
};
/**
 * Get latest approved document
 * @param {String} businessId - business ID
 * @param {String} practiceId - practice ID
 * @param {String} formId - Form ID
 * @param {Object} opts - Additional options
 */

var getLatestApprovedDocument = function getLatestApprovedDocument(businessId, practiceId, formId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId,
    practiceId: practiceId,
    formId: formId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$l({}, opts, {
    path: pathGetLatestApprovedDocument(businessId, practiceId, formId)
  }), {
    method: 'get'
  });
};
/**
 * Get url to upload a file associated to a manual form
 * @param {String} businessId - business ID
 * @param {String} practiceId - practice ID
 * @param {String} formId - Form ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var getManualFormUploadUrl = function getManualFormUploadUrl(businessId, practiceId, formId, query, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId,
    practiceId: practiceId,
    formId: formId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$l({}, opts, {
    path: pathGetManualFormUploadUrl(businessId, practiceId, formId)
  }), {
    method: 'get',
    params: query
  });
};

var forms = /*#__PURE__*/Object.freeze({
  __proto__: null,
  pathBusinessForm: pathBusinessForm,
  pathBusinessFormApplications: pathBusinessFormApplications,
  pathHealthFundForm: pathHealthFundForm,
  pathHealthFundFormPublish: pathHealthFundFormPublish,
  pathHealthFundFormUnpublish: pathHealthFundFormUnpublish,
  pathHealthFundForms: pathHealthFundForms,
  pathHealthFundFormUploadUrl: pathHealthFundFormUploadUrl,
  pathGetLatestApprovedDocument: pathGetLatestApprovedDocument,
  pathGetManualFormUploadUrl: pathGetManualFormUploadUrl,
  applyForBusinessForm: applyForBusinessForm,
  createHealthFundForm: createHealthFundForm,
  deleteHealthFundForm: deleteHealthFundForm,
  getBusinessForm: getBusinessForm,
  getHealthFundForms: getHealthFundForms,
  getHealthFundForm: getHealthFundForm,
  getHealthFundFormUploadUrl: getHealthFundFormUploadUrl,
  publishHealthFundForm: publishHealthFundForm,
  updateHealthFundForm: updateHealthFundForm,
  unpublishHealthFundForm: unpublishHealthFundForm,
  getLatestApprovedDocument: getLatestApprovedDocument,
  getManualFormUploadUrl: getManualFormUploadUrl
});

function ownKeys$m(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$m(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$m(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$m(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var PATH__FUNDERS = '/funders';
var pathFunder = function pathFunder(funderId) {
  return "/funders/" + funderId;
};
var getFunders = function getFunders(opts) {
  if (opts === void 0) {
    opts = {};
  }

  return request(_objectSpread$m({}, opts, {
    path: PATH__FUNDERS
  }), {
    method: 'get'
  });
};
var getFunder = function getFunder(funderId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  return request(_objectSpread$m({}, opts, {
    path: pathFunder(funderId)
  }), {
    method: 'get'
  });
};

var funders = /*#__PURE__*/Object.freeze({
  __proto__: null,
  PATH__FUNDERS: PATH__FUNDERS,
  pathFunder: pathFunder,
  getFunders: getFunders,
  getFunder: getFunder
});

function ownKeys$n(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$n(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$n(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$n(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var pathVerifyEclipse = function pathVerifyEclipse() {
  return "/eclipse/opvw";
};
/**
 * Verifies Eclipse patient
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var verifyEclipse = function verifyEclipse(body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    body: body
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$n({}, opts, {
    path: pathVerifyEclipse()
  }), {
    method: 'post',
    data: body
  });
};

var funderServices = /*#__PURE__*/Object.freeze({
  __proto__: null,
  pathVerifyEclipse: pathVerifyEclipse,
  verifyEclipse: verifyEclipse
});

function ownKeys$o(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$o(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$o(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$o(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var pathFunderSettings = function pathFunderSettings(businessId) {
  return "/businesses/" + businessId + "/fundersettings";
};
var pathFunderSettingsById = function pathFunderSettingsById(businessId, funderSettingsId) {
  return "/businesses/" + businessId + "/fundersettings/" + funderSettingsId;
};
var getBusinessFunderSettings = function getBusinessFunderSettings(businessId, query, opts) {
  if (query === void 0) {
    query = {};
  }

  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$o({}, opts, {
    path: pathFunderSettings(businessId)
  }), {
    method: 'get',
    params: query
  });
};
var getBusinesFunderSettingsById = function getBusinesFunderSettingsById(businessId, funderSettingsId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId,
    funderSettingsId: funderSettingsId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$o({}, opts, {
    path: pathFunderSettingsById(businessId, funderSettingsId)
  }), {
    method: 'get'
  });
};
var updateBusinesFunderSettings = function updateBusinesFunderSettings(businessId, funderSettingsId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId,
    funderSettingsId: funderSettingsId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$o({}, opts, {
    path: pathFunderSettingsById(businessId, funderSettingsId)
  }), {
    method: 'put',
    data: body
  });
};
var createBusinesFunderSettings = function createBusinesFunderSettings(businessId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$o({}, opts, {
    path: pathFunderSettings(businessId)
  }), {
    method: 'post',
    data: body
  });
};
var deleteBusinesFunderSettings = function deleteBusinesFunderSettings(businessId, funderSettingsId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId,
    funderSettingsId: funderSettingsId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$o({}, opts, {
    path: pathFunderSettingsById(businessId, funderSettingsId)
  }), {
    method: 'delete'
  });
};

var funderSettings = /*#__PURE__*/Object.freeze({
  __proto__: null,
  pathFunderSettings: pathFunderSettings,
  pathFunderSettingsById: pathFunderSettingsById,
  getBusinessFunderSettings: getBusinessFunderSettings,
  getBusinesFunderSettingsById: getBusinesFunderSettingsById,
  updateBusinesFunderSettings: updateBusinesFunderSettings,
  createBusinesFunderSettings: createBusinesFunderSettings,
  deleteBusinesFunderSettings: deleteBusinesFunderSettings
});

function ownKeys$p(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$p(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$p(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$p(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var pathFunderValues = function pathFunderValues(businessId) {
  return "/businesses/" + businessId + "/fundervalues";
};
var pathFunderValuesById = function pathFunderValuesById(businessId, funderValueId) {
  return "/businesses/" + businessId + "/fundervalues/" + funderValueId;
};
var getBusinessFunderValues = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(businessId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId
            }, opts.hyperMediaEndpoint);
            return _context.abrupt("return", request(_objectSpread$p({}, opts, {
              path: pathFunderValues(businessId)
            }), {
              method: 'get',
              params: query
            }));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function getBusinessFunderValues(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();
var getBusinessFunderValueById = function getBusinessFunderValueById(businessId, funderValueId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId,
    funderValueId: funderValueId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$p({}, opts, {
    path: pathFunderValuesById(businessId, funderValueId)
  }), {
    method: 'get'
  });
};
var createBusinessFunderValue = function createBusinessFunderValue(businessId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$p({}, opts, {
    path: pathFunderValues(businessId)
  }), {
    method: 'post',
    data: body
  });
};
var updateBusinessFunderValue = function updateBusinessFunderValue(businessId, funderValueId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId,
    funderValueId: funderValueId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$p({}, opts, {
    path: pathFunderValuesById(businessId, funderValueId)
  }), {
    method: 'put',
    data: body
  });
};
var deleteBusinessFunderValue = function deleteBusinessFunderValue(businessId, funderValueId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId,
    funderValueId: funderValueId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$p({}, opts, {
    path: pathFunderValuesById(businessId, funderValueId)
  }), {
    method: 'delete'
  });
};

var funderValues = /*#__PURE__*/Object.freeze({
  __proto__: null,
  pathFunderValues: pathFunderValues,
  pathFunderValuesById: pathFunderValuesById,
  getBusinessFunderValues: getBusinessFunderValues,
  getBusinessFunderValueById: getBusinessFunderValueById,
  createBusinessFunderValue: createBusinessFunderValue,
  updateBusinessFunderValue: updateBusinessFunderValue,
  deleteBusinessFunderValue: deleteBusinessFunderValue
});

function ownKeys$q(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$q(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$q(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$q(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var pathBusinessFutures = function pathBusinessFutures(businessId) {
  return "/businesses/" + businessId + "/futures";
};
var pathBusinessFuture = function pathBusinessFuture(businessId, futureId) {
  return "/businesses/" + businessId + "/futures/" + futureId;
};
var pathBusinessHolds = function pathBusinessHolds(businessId) {
  return "/businesses/" + businessId + "/futures/holds";
};
var pathBusinessInstalmentPlans = function pathBusinessInstalmentPlans(businessId) {
  return "/businesses/" + businessId + "/futures/instalmentplans";
};
var pathFuture = function pathFuture(futureId) {
  return "/futures/" + futureId;
};
var pathProcessingRequests = function pathProcessingRequests(futureId) {
  return "/futures/" + futureId + "/processingrequests";
};
var pathPaymentLink = function pathPaymentLink(futureId) {
  return "/futures/" + futureId + "/paymentlink";
};
var pathCancels = function pathCancels(futureId) {
  return "/futures/" + futureId + "/cancels";
};
var pathSubmits = function pathSubmits(futureId) {
  return "/futures/" + futureId + "/submits";
};
var pathSendReceipt = function pathSendReceipt(futureId) {
  return "/futures/" + futureId + "/sendreceipts";
};
/**
 * Create business hold
 * @param {String} businessId - Business ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var createBusinessHold = function createBusinessHold(businessId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$q({}, opts, {
    path: pathBusinessHolds(businessId)
  }), {
    method: 'post',
    data: body
  });
};
/**
 * Create business instalment plan
 * @param {String} businessId - Business ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var createBusinessInstalmentPlan = function createBusinessInstalmentPlan(businessId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$q({}, opts, {
    path: pathBusinessInstalmentPlans(businessId)
  }), {
    method: 'post',
    data: body
  });
};
/**
 * Cancel a future
 * @param {String} futureId - Future ID
 * @param {Object} opts - Additional options
 */

var cancel = function cancel(futureId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    futureId: futureId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$q({}, opts, {
    path: pathCancels(futureId)
  }), {
    method: 'post'
  });
};
/**
 * Get business futures
 * @param {String} businessId - Business ID
 * @param {Object} query - Request query
 * @param {Object} opts - Additional options
 */

var getBusinessFutures = function getBusinessFutures(businessId, query, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$q({}, opts, {
    path: pathBusinessFutures(businessId)
  }), {
    method: 'get',
    params: query
  });
};
/**
 * Get business future
 * @param {String} businessId - Business ID
 * @param {String} futureId - Future ID
 * @param {Object} opts - Additional options
 */

var getBusinessFuture = function getBusinessFuture(businessId, futureId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId,
    futureId: futureId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$q({}, opts, {
    path: pathBusinessFuture(businessId, futureId)
  }), {
    method: 'get'
  });
};
/**
 * Get a future
 * @param {String} futureId - Future ID
 * @param {Object} opts - Additional options
 */

var getFuture = function getFuture(futureId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    futureId: futureId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$q({}, opts, {
    path: pathFuture(futureId)
  }), {
    method: 'get'
  });
};
/**
 * Get payment link
 * @param {String} futureId - Future ID
 * @param {Object} opts - Additional options
 */

var getPaymentLink = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(futureId, opts) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              futureId: futureId
            }, opts.hyperMediaEndpoint);
            return _context.abrupt("return", request(_objectSpread$q({}, opts, {
              path: pathPaymentLink(futureId)
            }), {
              method: 'get'
            }));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function getPaymentLink(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * Send processing request
 * @param {String} futureId - Future ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var sendProcessingRequest = function sendProcessingRequest(futureId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    futureId: futureId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$q({}, opts, {
    path: pathProcessingRequests(futureId)
  }), {
    method: 'post',
    data: body
  });
};
/**
 * Submit a future
 * @param {String} futureId - Future ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var submit = function submit(futureId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    futureId: futureId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$q({}, opts, {
    path: pathSubmits(futureId)
  }), {
    method: 'post',
    data: body
  });
};
/**
 * Update a future
 * @param {String} futureId - Future ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var update = function update(futureId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    futureId: futureId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$q({}, opts, {
    path: pathFuture(futureId)
  }), {
    method: 'put',
    data: body
  });
};
/**
 * Send a payment receipt for a future
 * @param {String} futureId - Future ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var sendReceipt = function sendReceipt(futureId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    futureId: futureId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$q({}, opts, {
    path: pathSendReceipt(futureId)
  }), {
    method: 'post',
    data: body
  });
};

var futures = /*#__PURE__*/Object.freeze({
  __proto__: null,
  pathBusinessFutures: pathBusinessFutures,
  pathBusinessFuture: pathBusinessFuture,
  pathBusinessHolds: pathBusinessHolds,
  pathBusinessInstalmentPlans: pathBusinessInstalmentPlans,
  pathFuture: pathFuture,
  pathProcessingRequests: pathProcessingRequests,
  pathPaymentLink: pathPaymentLink,
  pathCancels: pathCancels,
  pathSubmits: pathSubmits,
  pathSendReceipt: pathSendReceipt,
  createBusinessHold: createBusinessHold,
  createBusinessInstalmentPlan: createBusinessInstalmentPlan,
  cancel: cancel,
  getBusinessFutures: getBusinessFutures,
  getBusinessFuture: getBusinessFuture,
  getFuture: getFuture,
  getPaymentLink: getPaymentLink,
  sendProcessingRequest: sendProcessingRequest,
  submit: submit,
  update: update,
  sendReceipt: sendReceipt
});

function ownKeys$r(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$r(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$r(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$r(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var pathBusinessPatientHealthFundAccounts = function pathBusinessPatientHealthFundAccounts(businessId, patientId) {
  return "/businesses/" + businessId + "/patients/" + patientId + "/healthfundaccounts";
};

var pathBusinessPatientHealthFundAccount = function pathBusinessPatientHealthFundAccount(businessId, patientId, healthFundAccountId) {
  return "/businesses/" + businessId + "/patients/" + patientId + "/healthfundaccounts/" + healthFundAccountId;
};

var pathMemberHealthFundAccounts = function pathMemberHealthFundAccounts(memberId) {
  return "/members/" + memberId + "/healthfundaccounts";
};

var pathMemberHealthFundAccount = function pathMemberHealthFundAccount(memberId, healthFundAccountId) {
  return "/members/" + memberId + "/healthfundaccounts/" + healthFundAccountId;
};
/**
 * Create a member's health fund account
 * @param {String} memberId - Member ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */


var createMembersHealthFundAccount = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(memberId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              memberId: memberId
            }, opts.hyperMediaEndpoint);
            return _context.abrupt("return", request(_objectSpread$r({}, opts, {
              path: "" + pathMemberHealthFundAccounts(memberId)
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function createMembersHealthFundAccount(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * Create a business patient health fund account
 * @param {String} businessId - Business ID
 * @param {String} patientId - Patient ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var createBusinessPatientHealthFundAccount = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(businessId, patientId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              patientId: patientId
            }, opts.hyperMediaEndpoint);
            return _context2.abrupt("return", request(_objectSpread$r({}, opts, {
              path: "" + pathBusinessPatientHealthFundAccounts(businessId, patientId)
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function createBusinessPatientHealthFundAccount(_x4, _x5, _x6, _x7) {
    return _ref2.apply(this, arguments);
  };
}();
/**
 * Delete a member's health fund account
 * @param {String} memberId - Member ID
 * @param {String} healthFundAccountId - healthFundAccountId
 * @param {Object} opts - Additional options
 */

var deleteMembersHealthFundAccount = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(memberId, healthFundAccountId, opts) {
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              memberId: memberId,
              healthFundAccountId: healthFundAccountId
            }, opts.hyperMediaEndpoint);
            return _context3.abrupt("return", request(_objectSpread$r({}, opts, {
              path: pathMemberHealthFundAccounts(memberId) + "/" + healthFundAccountId
            }), {
              method: 'delete'
            }));

          case 3:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function deleteMembersHealthFundAccount(_x8, _x9, _x10) {
    return _ref3.apply(this, arguments);
  };
}();
/**
 * Delete a business patient's health fund account
 * @param {String} businessId - Business ID
 * @param {String} patientId - Patient ID
 * @param {String} healthFundAccountId - healthFundAccountId
 * @param {Object} opts - Additional options
 */

var deleteBusinessPatientHealthFundAccount = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(businessId, patientId, healthFundAccountId, opts) {
    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              patientId: patientId,
              healthFundAccountId: healthFundAccountId
            }, opts.hyperMediaEndpoint);
            return _context4.abrupt("return", request(_objectSpread$r({}, opts, {
              path: "" + pathBusinessPatientHealthFundAccount(businessId, patientId, healthFundAccountId)
            }), {
              method: 'delete'
            }));

          case 3:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));

  return function deleteBusinessPatientHealthFundAccount(_x11, _x12, _x13, _x14) {
    return _ref4.apply(this, arguments);
  };
}();
/**
 * Get a member's health fund accounts
 * @param {String} memberId - Member ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getMembersHealthFundAccounts = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(memberId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              memberId: memberId
            }, opts.hyperMediaEndpoint);
            return _context5.abrupt("return", request(_objectSpread$r({}, opts, {
              path: pathMemberHealthFundAccounts(memberId)
            }), {
              method: 'get',
              params: query
            }));

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));

  return function getMembersHealthFundAccounts(_x15, _x16, _x17) {
    return _ref5.apply(this, arguments);
  };
}();
/**
 * Get a business patient's health fund accounts
 * @param {String} businessId - Business ID
 * @param {String} patientId - Patient ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getBusinessPatientHealthFundAccounts = /*#__PURE__*/function () {
  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(businessId, patientId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              patientId: patientId
            }, opts.hyperMediaEndpoint);
            return _context6.abrupt("return", request(_objectSpread$r({}, opts, {
              path: pathBusinessPatientHealthFundAccounts(businessId, patientId)
            }), {
              method: 'get',
              params: query
            }));

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));

  return function getBusinessPatientHealthFundAccounts(_x18, _x19, _x20, _x21) {
    return _ref6.apply(this, arguments);
  };
}();
/**
 * Get a member's health fund account
 * @param {String} memberId - Member ID
 * @param {String} healthFundAccount - Health fund account ID
 * @param {Object} opts - Additional options
 */

var getMembersHealthFundAccount = /*#__PURE__*/function () {
  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(memberId, healthFundAccountId, opts) {
    return _regeneratorRuntime.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              memberId: memberId,
              healthFundAccountId: healthFundAccountId
            }, opts.hyperMediaEndpoint);
            return _context7.abrupt("return", request(_objectSpread$r({}, opts, {
              path: pathMemberHealthFundAccount(memberId, healthFundAccountId)
            }), {
              method: 'get'
            }));

          case 3:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));

  return function getMembersHealthFundAccount(_x22, _x23, _x24) {
    return _ref7.apply(this, arguments);
  };
}();
/**
 * Get a business patient's health fund account
 * @param {String} businessId - Business ID
 * @param {String} patientId - Patient ID
 * @param {String} healthFundAccount - Health fund account ID
 * @param {Object} opts - Additional options
 */

var getBusinessPatientHealthFundAccount = /*#__PURE__*/function () {
  var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(businessId, patientId, healthFundAccountId, opts) {
    return _regeneratorRuntime.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              patientId: patientId,
              healthFundAccountId: healthFundAccountId
            }, opts.hyperMediaEndpoint);
            return _context8.abrupt("return", request(_objectSpread$r({}, opts, {
              path: pathBusinessPatientHealthFundAccount(businessId, patientId, healthFundAccountId)
            }), {
              method: 'get'
            }));

          case 3:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  }));

  return function getBusinessPatientHealthFundAccount(_x25, _x26, _x27, _x28) {
    return _ref8.apply(this, arguments);
  };
}();
/**
 * Update a member's health fund account
 * @param {String} memberId - Member ID
 * @param {String} healthFundAccountId - healthFundAccountId
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var updateMembersHealthFundAccounts = /*#__PURE__*/function () {
  var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(memberId, healthFundAccountId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              memberId: memberId,
              healthFundAccountId: healthFundAccountId
            }, opts.hyperMediaEndpoint);
            return _context9.abrupt("return", request(_objectSpread$r({}, opts, {
              path: pathMemberHealthFundAccounts(memberId) + "/" + healthFundAccountId
            }), {
              method: 'put',
              data: body
            }));

          case 3:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));

  return function updateMembersHealthFundAccounts(_x29, _x30, _x31, _x32) {
    return _ref9.apply(this, arguments);
  };
}();
/**
 * Update a business patients's health fund account
 * @param {String} businessId - Business ID
 * @param {String} patientId - Patient ID
 * @param {String} healthFundAccountId - healthFundAccountId
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var updateBusinessPatientHealthFundAccount = /*#__PURE__*/function () {
  var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(businessId, patientId, healthFundAccountId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              patientId: patientId,
              healthFundAccountId: healthFundAccountId
            }, opts.hyperMediaEndpoint);
            return _context10.abrupt("return", request(_objectSpread$r({}, opts, {
              path: "" + pathBusinessPatientHealthFundAccount(businessId, patientId, healthFundAccountId)
            }), {
              method: 'put',
              data: body
            }));

          case 3:
          case "end":
            return _context10.stop();
        }
      }
    }, _callee10);
  }));

  return function updateBusinessPatientHealthFundAccount(_x33, _x34, _x35, _x36, _x37) {
    return _ref10.apply(this, arguments);
  };
}();

var healthFundAccounts = /*#__PURE__*/Object.freeze({
  __proto__: null,
  createMembersHealthFundAccount: createMembersHealthFundAccount,
  createBusinessPatientHealthFundAccount: createBusinessPatientHealthFundAccount,
  deleteMembersHealthFundAccount: deleteMembersHealthFundAccount,
  deleteBusinessPatientHealthFundAccount: deleteBusinessPatientHealthFundAccount,
  getMembersHealthFundAccounts: getMembersHealthFundAccounts,
  getBusinessPatientHealthFundAccounts: getBusinessPatientHealthFundAccounts,
  getMembersHealthFundAccount: getMembersHealthFundAccount,
  getBusinessPatientHealthFundAccount: getBusinessPatientHealthFundAccount,
  updateMembersHealthFundAccounts: updateMembersHealthFundAccounts,
  updateBusinessPatientHealthFundAccount: updateBusinessPatientHealthFundAccount
});

function ownKeys$s(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$s(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$s(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$s(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var pathBusinessPracticeStaffMemberHealthFundSettings = function pathBusinessPracticeStaffMemberHealthFundSettings(businessId, practiceId, staffId) {
  return "/businesses/" + businessId + "/practices/" + practiceId + "/staff/" + staffId + "/healthfundsettings";
};

var pathHealthFundSettings = function pathHealthFundSettings(healthFundId) {
  return "/healthfunds/" + healthFundId + "/healthfundsettings";
};

var pathHealthFundSetting = function pathHealthFundSetting(healthFundId, healthFundSettingId) {
  return "/healthfunds/" + healthFundId + "/healthfundsettings/" + healthFundSettingId;
};
/**
 * Create a health fund setting
 * @param {String} healthFundId - Health fund ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */


var createHealthFundSetting = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(healthFundId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (opts === void 0) {
              opts = {
                // @ts-expect-error TS(2322): Type '{ trustedProviders: boolean; }' is not assig... Remove this comment to see the full error message
                trustedProviders: true
              };
            }

            doesParamExist.default({
              healthFundId: healthFundId
            }, opts.hyperMediaEndpoint);
            return _context.abrupt("return", request(_objectSpread$s({}, opts, {
              path: "" + pathHealthFundSettings(healthFundId)
            }), {
              method: 'post',
              data: _objectSpread$s({
                enabled: true
              }, body)
            }));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function createHealthFundSetting(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * Delete a health fund setting
 * @param {String} healthFundId - Health fund ID
 * @param {String} healthFundSettingId - Health fund setting ID
 * @param {Object} opts - Additional options
 */

var deleteHealthFundSetting = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(healthFundId, healthFundSettingId, opts) {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              healthFundId: healthFundId
            }, opts.hyperMediaEndpoint);
            return _context2.abrupt("return", request(_objectSpread$s({}, opts, {
              path: pathHealthFundSetting(healthFundId, healthFundSettingId)
            }), {
              method: 'delete'
            }));

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function deleteHealthFundSetting(_x4, _x5, _x6) {
    return _ref2.apply(this, arguments);
  };
}();
/**
 * Get health fund settings
 * @param {String} healthFundId - Health fund ID
 * @param {Object} query - Query params
 * @param {Object} opts - Additional options
 */

var getHealthFundSettings = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(healthFundId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {
                // @ts-expect-error TS(2322): Type '{ trustedProviders: boolean; }' is not assig... Remove this comment to see the full error message
                trustedProviders: true
              };
            }

            doesParamExist.default({
              healthFundId: healthFundId
            }, opts.hyperMediaEndpoint);
            return _context3.abrupt("return", request(_objectSpread$s({}, opts, {
              path: pathHealthFundSettings(healthFundId)
            }), {
              method: 'get',
              params: query
            }));

          case 4:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function getHealthFundSettings(_x7, _x8, _x9) {
    return _ref3.apply(this, arguments);
  };
}();
/**
 * Get business practice staff member health fund settings
 * @param {String} businessId - Business ID
 * @param {String} practiceId - Practice ID
 * @param {String} staffId - Staff ID
 * @param {Object} query - Query params
 * @param {Object} opts - Additional options
 */

var getBusinessPracticeStaffMemberHealthFundSettings = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(businessId, practiceId, staffId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {
                // @ts-expect-error TS(2322): Type '{ trustedProviders: boolean; }' is not assig... Remove this comment to see the full error message
                trustedProviders: true
              };
            }

            doesParamExist.default({
              businessId: businessId,
              practiceId: practiceId,
              staffId: staffId
            }, opts.hyperMediaEndpoint);
            return _context4.abrupt("return", request(_objectSpread$s({}, opts, {
              path: pathBusinessPracticeStaffMemberHealthFundSettings(businessId, practiceId, staffId)
            }), {
              method: 'get',
              params: query
            }));

          case 4:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));

  return function getBusinessPracticeStaffMemberHealthFundSettings(_x10, _x11, _x12, _x13, _x14) {
    return _ref4.apply(this, arguments);
  };
}();
/**
 * Update a health fund setting
 * @param {String} memberId - Member ID
 * @param {String} healthFundAccountId - healthFundAccountId
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var updateHealthFundSetting = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(healthFundId, healthFundSettingId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              healthFundId: healthFundId,
              healthFundSettingId: healthFundSettingId
            }, opts.hyperMediaEndpoint);
            return _context5.abrupt("return", request(_objectSpread$s({}, opts, {
              path: pathHealthFundSetting(healthFundId, healthFundSettingId)
            }), {
              method: 'put',
              data: body
            }));

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));

  return function updateHealthFundSetting(_x15, _x16, _x17, _x18) {
    return _ref5.apply(this, arguments);
  };
}();

var healthFundSettings = /*#__PURE__*/Object.freeze({
  __proto__: null,
  createHealthFundSetting: createHealthFundSetting,
  deleteHealthFundSetting: deleteHealthFundSetting,
  getHealthFundSettings: getHealthFundSettings,
  getBusinessPracticeStaffMemberHealthFundSettings: getBusinessPracticeStaffMemberHealthFundSettings,
  updateHealthFundSetting: updateHealthFundSetting
});

function ownKeys$t(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$t(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$t(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$t(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var PATH__HEALTH_FUNDS = '/healthfunds';

var pathHealthFund = function pathHealthFund(healthFundId) {
  return "/healthfunds/" + healthFundId;
};

var pathHealthFundVerifyMember = function pathHealthFundVerifyMember(healthFundId) {
  return "/healthfunds/" + healthFundId + "/verifymember";
};

var pathOrganisationHealthFunds = function pathOrganisationHealthFunds(organisationId) {
  return "/organisations/" + organisationId + "/healthfunds";
};

var pathHealthFundsByAccountId = function pathHealthFundsByAccountId(accountId) {
  return "/accounts/" + accountId + "/healthfunds";
};

var pathBusinessHealthFunds = function pathBusinessHealthFunds(businessId) {
  return "/businesses/" + businessId + "/healthfunds";
};
/**
 * Get health funds for account
 * @param {Object} opts - Additional options
 */


var getHealthFundsForAccount = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(opts) {
    var accountId;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            accountId = sdkClient.accountId || '';
            doesParamExist.default({
              accountId: accountId
            }, opts.hyperMediaEndpoint);
            return _context.abrupt("return", request(_objectSpread$t({}, opts, {
              path: pathHealthFundsByAccountId(accountId)
            }), {
              method: 'get'
            }));

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function getHealthFundsForAccount(_x) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * Get health funds for business
 * @param {String} businessId - Business ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getBusinessHealthFunds = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(businessId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId
            }, opts.hyperMediaEndpoint);
            return _context2.abrupt("return", request(_objectSpread$t({}, opts, {
              path: pathBusinessHealthFunds(businessId)
            }), {
              method: 'get',
              params: query
            }));

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function getBusinessHealthFunds(_x2, _x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();
/**
 * Get health funds
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getHealthFunds = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(query, opts) {
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            return _context3.abrupt("return", request(_objectSpread$t({}, opts, {
              path: PATH__HEALTH_FUNDS
            }), {
              method: 'get',
              params: query,
              tokenType: opts.tokenType
            }));

          case 2:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function getHealthFunds(_x5, _x6) {
    return _ref3.apply(this, arguments);
  };
}();
/**
 * Get health funds by organisation
 * @param {String} organisationId - Organisation ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getOrganisationHealthFunds = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(organisationId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              organisationId: organisationId
            }, opts.hyperMediaEndpoint);
            return _context4.abrupt("return", request(_objectSpread$t({}, opts, {
              path: pathOrganisationHealthFunds(organisationId)
            }), {
              method: 'get',
              params: query
            }));

          case 4:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));

  return function getOrganisationHealthFunds(_x7, _x8, _x9) {
    return _ref4.apply(this, arguments);
  };
}();
/**
 * Create health fund
 *
 * @param {Object} body - Health fund details
 * @param {Object} opts - Additional options
 */

var createHealthFund = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(body, opts) {
    return _regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            return _context5.abrupt("return", request(_objectSpread$t({}, opts, {
              path: PATH__HEALTH_FUNDS
            }), {
              method: 'post',
              data: body
            }));

          case 2:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));

  return function createHealthFund(_x10, _x11) {
    return _ref5.apply(this, arguments);
  };
}();
/**
 * Get health fund
 * @param {String} healthFundId - Health fund ID
 * @param {Object} opts - Additional options
 */

var getHealthFund = /*#__PURE__*/function () {
  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(healthFundId, opts) {
    return _regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              healthFundId: healthFundId
            }, opts.hyperMediaEndpoint);
            return _context6.abrupt("return", request(_objectSpread$t({}, opts, {
              path: pathHealthFund(healthFundId)
            }), {
              method: 'get'
            }));

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));

  return function getHealthFund(_x12, _x13) {
    return _ref6.apply(this, arguments);
  };
}();
/**
 * Update health fund
 * @param {Object} healthFundId - Health fund ID
 * @param {Object} body - Health fund details
 * @param {Object} opts - Additional options
 */

var updateHealthFund = /*#__PURE__*/function () {
  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(healthFundId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              healthFundId: healthFundId
            }, opts.hyperMediaEndpoint);
            return _context7.abrupt("return", request(_objectSpread$t({}, opts, {
              path: pathHealthFund(healthFundId)
            }), {
              method: 'put',
              data: body
            }));

          case 3:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));

  return function updateHealthFund(_x14, _x15, _x16) {
    return _ref7.apply(this, arguments);
  };
}();
/**
 * Delete health fund
 * @param {Object} healthFundId - Health fund ID
 * @param {Object} opts - Additional options
 */

var deleteHealthFund = /*#__PURE__*/function () {
  var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(healthFundId, opts) {
    return _regeneratorRuntime.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              healthFundId: healthFundId
            }, opts.hyperMediaEndpoint);
            return _context8.abrupt("return", request(_objectSpread$t({}, opts, {
              path: pathHealthFund(healthFundId)
            }), {
              method: 'delete'
            }));

          case 3:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  }));

  return function deleteHealthFund(_x17, _x18) {
    return _ref8.apply(this, arguments);
  };
}();
/**
 * Get Medicare health fund
 * @param {Object} opts - Additional options
 */

var getMedicareHealthFund = /*#__PURE__*/function () {
  var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(opts) {
    var funders, medicareFunder, healthFunds;
    return _regeneratorRuntime.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            _context9.next = 3;
            return sdkClient.funders.getFunders(opts);

          case 3:
            funders = _context9.sent;
            medicareFunder = funders.find(function (funder) {
              return funder.code === constants.FUNDERS.MEDICARE;
            });

            if (medicareFunder) {
              _context9.next = 7;
              break;
            }

            return _context9.abrupt("return", null);

          case 7:
            _context9.next = 9;
            return getHealthFunds({
              funderId: medicareFunder._id
            }, opts);

          case 9:
            healthFunds = _context9.sent;
            return _context9.abrupt("return", healthFunds[0]);

          case 11:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));

  return function getMedicareHealthFund(_x19) {
    return _ref9.apply(this, arguments);
  };
}();
/**
 * Verify member by health fund
 * @param {String} healthFundId - Health fund ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var verifyMember = /*#__PURE__*/function () {
  var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(healthFundId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              healthFundId: healthFundId,
              body: body
            }, opts.hyperMediaEndpoint);
            return _context10.abrupt("return", request(_objectSpread$t({}, opts, {
              path: "" + pathHealthFundVerifyMember(healthFundId)
            }), {
              method: 'post',
              data: body,
              tokenType: opts.tokenType
            }));

          case 3:
          case "end":
            return _context10.stop();
        }
      }
    }, _callee10);
  }));

  return function verifyMember(_x20, _x21, _x22) {
    return _ref10.apply(this, arguments);
  };
}();

var healthfunds = /*#__PURE__*/Object.freeze({
  __proto__: null,
  getHealthFundsForAccount: getHealthFundsForAccount,
  getBusinessHealthFunds: getBusinessHealthFunds,
  getHealthFunds: getHealthFunds,
  getOrganisationHealthFunds: getOrganisationHealthFunds,
  createHealthFund: createHealthFund,
  getHealthFund: getHealthFund,
  updateHealthFund: updateHealthFund,
  deleteHealthFund: deleteHealthFund,
  getMedicareHealthFund: getMedicareHealthFund,
  verifyMember: verifyMember
});

function ownKeys$u(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$u(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$u(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$u(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var pathICDItems = '/icditems';

var pathModalityICDItems = function pathModalityICDItems(modalityId) {
  return "/modalities/" + modalityId + "/icditems";
};
/**
 * Get ICD items
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */


var getICDItems = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(query, opts) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {
                ver: sdkClient.defaultVersion
              };
            }

            return _context.abrupt("return", request(_objectSpread$u({}, opts, {
              path: pathICDItems
            }), {
              method: 'get',
              params: query
            }));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function getICDItems(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * Get modality ICD items
 * @param {Object} modalityId - Modality ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getModalityICDItems = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(modalityId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {
                ver: sdkClient.defaultVersion
              };
            }

            doesParamExist.default({
              modalityId: modalityId
            }, opts.hyperMediaEndpoint);
            return _context2.abrupt("return", request(_objectSpread$u({}, opts, {
              path: pathModalityICDItems(modalityId)
            }), {
              method: 'get',
              params: query
            }));

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function getModalityICDItems(_x3, _x4, _x5) {
    return _ref2.apply(this, arguments);
  };
}();

var icdItems = /*#__PURE__*/Object.freeze({
  __proto__: null,
  getICDItems: getICDItems,
  getModalityICDItems: getModalityICDItems
});

function ownKeys$v(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$v(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$v(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$v(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var pathInvoiceScansByBusinessId = function pathInvoiceScansByBusinessId(businessId) {
  return "/businesses/" + businessId + "/invoicescans";
};
var pathUploadUrlByBusinessId = function pathUploadUrlByBusinessId(businessId) {
  return "/businesses/" + businessId + "/invoicescans/uploadurl";
};
var pathInvoiceScanByInvoiceScanId = function pathInvoiceScanByInvoiceScanId(businessId, invoiceScanId) {
  return "/businesses/" + businessId + "/invoicescans/" + invoiceScanId;
};
/**
 * Create an invoice scan
 * @param {String} businessId - Business ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var createInvoiceScan = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(businessId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId
            }, opts.hyperMediaEndpoint);
            return _context.abrupt("return", request(_objectSpread$v({}, opts, {
              path: pathInvoiceScansByBusinessId(businessId)
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function createInvoiceScan(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * Get invoice scan by invoice scan id
 * @param {String} businessId - Business ID
 * @param {String} invoiceScanId - Invoice Scan ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var getInvoiceScan = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(businessId, invoiceScanId, opts) {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              invoiceScanId: invoiceScanId
            }, opts.hyperMediaEndpoint);
            return _context2.abrupt("return", request(_objectSpread$v({}, opts, {
              path: pathInvoiceScanByInvoiceScanId(businessId, invoiceScanId)
            }), {
              method: 'get'
            }));

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function getInvoiceScan(_x4, _x5, _x6) {
    return _ref2.apply(this, arguments);
  };
}();
/**
 * Get url to upload a file associated to a invoice scan
 * @param {String} businessId - Business ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var getInvoiceScanUploadUrl = function getInvoiceScanUploadUrl(businessId, query, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$v({}, opts, {
    path: pathUploadUrlByBusinessId(businessId)
  }), {
    method: 'get',
    params: query
  });
};

var invoiceScans = /*#__PURE__*/Object.freeze({
  __proto__: null,
  pathInvoiceScansByBusinessId: pathInvoiceScansByBusinessId,
  pathUploadUrlByBusinessId: pathUploadUrlByBusinessId,
  pathInvoiceScanByInvoiceScanId: pathInvoiceScanByInvoiceScanId,
  createInvoiceScan: createInvoiceScan,
  getInvoiceScan: getInvoiceScan,
  getInvoiceScanUploadUrl: getInvoiceScanUploadUrl
});

function ownKeys$w(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$w(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$w(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$w(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var PATH__JHCS = "/jointhealthcentres";
var pathJHC = function pathJHC(jhcId) {
  return "/jointhealthcentres/" + jhcId;
};
var getJHC = function getJHC(jhcId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    jhcId: jhcId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$w({}, opts, {
    path: pathJHC(jhcId)
  }), {
    method: 'get'
  });
};
var getJHCs = function getJHCs(query, opts) {
  if (opts === void 0) {
    opts = {};
  }

  return request(_objectSpread$w({}, opts, {
    path: PATH__JHCS
  }), {
    method: 'get',
    params: query
  });
};

var jhcs = /*#__PURE__*/Object.freeze({
  __proto__: null,
  PATH__JHCS: PATH__JHCS,
  pathJHC: pathJHC,
  getJHC: getJHC,
  getJHCs: getJHCs
});

function ownKeys$x(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$x(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$x(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$x(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var pathBusinessKyc = function pathBusinessKyc(businessId) {
  return "/businesses/" + businessId + "/kyc";
};
var pathPracticeKyc = function pathPracticeKyc(businessId, practiceId) {
  return "/businesses/" + businessId + "/practices/" + practiceId + "/kyc";
};
var pathBusinessCbo = function pathBusinessCbo(businessId) {
  return "/businesses/" + businessId + "/cbo";
};
var pathBusinessKycVerify = function pathBusinessKycVerify(businessId) {
  return "/businesses/" + businessId + "/kycverify";
};
var pathBusinessKycUnverify = function pathBusinessKycUnverify(businessId) {
  return "/businesses/" + businessId + "/kycunverify";
};
var pathPracticeKycVerify = function pathPracticeKycVerify(businessId, practiceId) {
  return "/businesses/" + businessId + "/practices/" + practiceId + "/kycverify";
};
var pathPracticeKycUnverify = function pathPracticeKycUnverify(businessId, practiceId) {
  return "/businesses/" + businessId + "/practices/" + practiceId + "/kycunverify";
};
var pathBusinessVerifyBeneficialOwner = function pathBusinessVerifyBeneficialOwner(businessId) {
  return "/businesses/" + businessId + "/verifybeneficialowner";
};
var pathRequestVerificationSupport = function pathRequestVerificationSupport(businessId) {
  return "/businesses/" + businessId + "/kycrequestverificationsupport";
};
var pathBusinessAddBeneficialOwner = function pathBusinessAddBeneficialOwner(businessId) {
  return "/businesses/" + businessId + "/beneficialowners";
};
var pathBusinessRemoveBeneficialOwner = function pathBusinessRemoveBeneficialOwner(businessId, beneficialOwnerId) {
  return "/businesses/" + businessId + "/beneficialowners/" + beneficialOwnerId;
};
var pathResumeComplexVerification = function pathResumeComplexVerification(businessId) {
  return "/businesses/" + businessId + "/resumecomplexverification";
};
var pathGetTrustDocumentUploadUrl = function pathGetTrustDocumentUploadUrl(businessId) {
  return "/businesses/" + businessId + "/uploadurl";
};
/**
 * Get business kyc
 * @param {String} businessId - Business ID
 * @param {Object} opts - Additional options
 */

var getBusinessKyc = function getBusinessKyc(businessId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$x({}, opts, {
    path: pathBusinessKyc(businessId)
  }), {
    method: 'get'
  });
};
/**
 * Get practice kyc
 * @param {String} businessId - Business ID
 * @param {String} practiceId - Practice ID
 * @param {Object} opts - Additional options
 */

var getPracticeKyc = function getPracticeKyc(businessId, practiceId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId,
    practiceId: practiceId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$x({}, opts, {
    path: pathPracticeKyc(businessId, practiceId)
  }), {
    method: 'get'
  });
};
/**
 * Update business kyc
 * @param {String} businessId - Business ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var updateBusinessKyc = function updateBusinessKyc(businessId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$x({}, opts, {
    path: pathBusinessKyc(businessId)
  }), {
    method: 'put',
    data: body
  });
};
/**
 * Get business cbo
 * @param {String} businessId - Business ID
 * @param {Object} query - query parameters
 * @param {Object} opts - Additional options
 */

var getBusinessCbo = function getBusinessCbo(businessId, query, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$x({}, opts, {
    path: pathBusinessCbo(businessId)
  }), {
    method: 'get',
    params: query
  });
};
/**
 * Verify business kyc
 * @param {String} businessId - Business ID
 * @param {Object} opts - Additional options
 */

var verifyBusinessKyc = function verifyBusinessKyc(businessId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$x({}, opts, {
    path: pathBusinessKycVerify(businessId)
  }), {
    method: 'post'
  });
};
/**
 * Verify practice kyc
 * @param {String} businessId - Business ID
 * @param {String} practiceId - Practice ID
 * @param {Object} opts - Additional options
 */

var verifyPracticeKyc = function verifyPracticeKyc(businessId, practiceId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId,
    practiceId: practiceId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$x({}, opts, {
    path: pathPracticeKycVerify(businessId, practiceId)
  }), {
    method: 'post',
    data: body
  });
};
/**
 * Unverify business kyc
 * @param {String} businessId - Business ID
 * @param {Object} opts - Additional options
 */

var unverifyBusinessKyc = function unverifyBusinessKyc(businessId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$x({}, opts, {
    path: pathBusinessKycUnverify(businessId)
  }), {
    method: 'post'
  });
};
/**
 * Unverify practice kyc
 * @param {String} businessId - Business ID
 * @param {String} practiceId - Practice ID
 * @param {Object} opts - Additional options
 */

var unverifyPracticeKyc = function unverifyPracticeKyc(businessId, practiceId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId,
    practiceId: practiceId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$x({}, opts, {
    path: pathPracticeKycUnverify(businessId, practiceId)
  }), {
    method: 'post'
  });
};
/**
 * Verify business beneficial owner
 * @param {String} businessId - Business ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var verifyBusinessBeneficialOwner = function verifyBusinessBeneficialOwner(businessId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$x({}, opts, {
    path: pathBusinessVerifyBeneficialOwner(businessId)
  }), {
    method: 'post',
    data: body
  });
};
/**
 * Send support email for help on Medipass's KYC process
 * @param {String} businessId - Business ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var requestVerificationSupport = function requestVerificationSupport(businessId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$x({}, opts, {
    path: pathRequestVerificationSupport(businessId)
  }), {
    method: 'post',
    data: body
  });
};
/**
 * Add beneficial owner to a business
 * @param {String} businessId - Business ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var addBeneficialOwner = function addBeneficialOwner(businessId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$x({}, opts, {
    path: pathBusinessAddBeneficialOwner(businessId)
  }), {
    method: 'post',
    data: body
  });
};
/**
 * Remove beneficial owner to a business
 * @param {String} businessId - Business ID
 * @param {String} beneficialOwnerId - Beneficial Owner ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var removeBeneficialOwner = function removeBeneficialOwner(businessId, beneficialOwnerId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$x({}, opts, {
    path: pathBusinessRemoveBeneficialOwner(businessId, beneficialOwnerId)
  }), {
    method: 'delete'
  });
};
/**
 * Enable Connect user to resume a complex KYC process
 * @param {String} businessId - Business ID
 * @param {Object} opts - Additional options
 */

var resumeComplexVerification = function resumeComplexVerification(businessId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$x({}, opts, {
    path: pathResumeComplexVerification(businessId)
  }), {
    method: 'post'
  });
};
/**
 * Get url to upload a trust document associated to a kyc
 * @param {String} businessId - business ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var getTrustDocumentUploadUrl = function getTrustDocumentUploadUrl(businessId, query, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$x({}, opts, {
    path: pathGetTrustDocumentUploadUrl(businessId)
  }), {
    method: 'get',
    params: query
  });
};

var kyc = /*#__PURE__*/Object.freeze({
  __proto__: null,
  pathBusinessKyc: pathBusinessKyc,
  pathPracticeKyc: pathPracticeKyc,
  pathBusinessCbo: pathBusinessCbo,
  pathBusinessKycVerify: pathBusinessKycVerify,
  pathBusinessKycUnverify: pathBusinessKycUnverify,
  pathPracticeKycVerify: pathPracticeKycVerify,
  pathPracticeKycUnverify: pathPracticeKycUnverify,
  pathBusinessVerifyBeneficialOwner: pathBusinessVerifyBeneficialOwner,
  pathRequestVerificationSupport: pathRequestVerificationSupport,
  pathBusinessAddBeneficialOwner: pathBusinessAddBeneficialOwner,
  pathBusinessRemoveBeneficialOwner: pathBusinessRemoveBeneficialOwner,
  pathResumeComplexVerification: pathResumeComplexVerification,
  pathGetTrustDocumentUploadUrl: pathGetTrustDocumentUploadUrl,
  getBusinessKyc: getBusinessKyc,
  getPracticeKyc: getPracticeKyc,
  updateBusinessKyc: updateBusinessKyc,
  getBusinessCbo: getBusinessCbo,
  verifyBusinessKyc: verifyBusinessKyc,
  verifyPracticeKyc: verifyPracticeKyc,
  unverifyBusinessKyc: unverifyBusinessKyc,
  unverifyPracticeKyc: unverifyPracticeKyc,
  verifyBusinessBeneficialOwner: verifyBusinessBeneficialOwner,
  requestVerificationSupport: requestVerificationSupport,
  addBeneficialOwner: addBeneficialOwner,
  removeBeneficialOwner: removeBeneficialOwner,
  resumeComplexVerification: resumeComplexVerification,
  getTrustDocumentUploadUrl: getTrustDocumentUploadUrl
});

function ownKeys$y(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$y(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$y(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$y(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var pathLog = function pathLog() {
  return "/logs";
};
var pathBusinessLog = function pathBusinessLog(businessId) {
  return "/businesses/" + businessId + "/logs";
};
/**
 * Create a log
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var createLog = function createLog(body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  return request(_objectSpread$y({}, opts, {
    path: pathLog()
  }), {
    method: 'post',
    data: body
  });
};
/**
 * Create a business log
 * @param {string} businessId - Business ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var createBusinessLog = function createBusinessLog(businessId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  });
  return request(_objectSpread$y({}, opts, {
    path: pathBusinessLog(businessId)
  }), {
    method: 'post',
    data: body
  });
};

var logs = /*#__PURE__*/Object.freeze({
  __proto__: null,
  pathLog: pathLog,
  pathBusinessLog: pathBusinessLog,
  createLog: createLog,
  createBusinessLog: createBusinessLog
});

function ownKeys$z(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$z(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$z(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$z(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var pathBusinessMessageMappings = function pathBusinessMessageMappings(businessId) {
  return "/businesses/" + businessId + "/messagemappings";
};
/**
 * Get business message mappings
 * @param {String} businessId - Health fund ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getBusinessMessageMappings = function getBusinessMessageMappings(businessId, query, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$z({}, opts, {
    path: pathBusinessMessageMappings(businessId)
  }), {
    method: 'get',
    params: query
  });
};

var messageMappings = /*#__PURE__*/Object.freeze({
  __proto__: null,
  pathBusinessMessageMappings: pathBusinessMessageMappings,
  getBusinessMessageMappings: getBusinessMessageMappings
});

function ownKeys$A(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$A(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$A(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$A(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var pathMinionsForHealthFund = function pathMinionsForHealthFund(healthFundId) {
  return "/healthfunds/" + healthFundId + "/minions";
};

var pathMinionForHealthFund = function pathMinionForHealthFund(healthFundId, minionId) {
  return pathMinionsForHealthFund(healthFundId) + "/" + minionId;
};
/**
 * Create minion for health fund
 * @param {String} healthFundId - Health fund ID
 * @param {String} name - Minion name
 * @param {String} triggerId - Minion trigger ID
 * @param {String} actionId - Minion action ID
 * @param {Object} body - Additional body
 * @param {Object} opts - Additional options
 */


var createMinionForHealthFund = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(healthFundId, name, triggerId, actionId, body, opts) {
    var data;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              healthFundId: healthFundId,
              name: name,
              triggerId: triggerId,
              actionId: actionId
            }, opts.hyperMediaEndpoint);
            data = _objectSpread$A({
              name: name,
              triggerId: triggerId,
              actionId: actionId
            }, body);
            return _context.abrupt("return", request(_objectSpread$A({}, opts, {
              path: pathMinionsForHealthFund(healthFundId)
            }), {
              method: 'post',
              data: data
            }));

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function createMinionForHealthFund(_x, _x2, _x3, _x4, _x5, _x6) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * Get minions for health fund
 * @param {String} healthFundId - Health fund ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getMinionsForHealthFund = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(healthFundId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            return _context2.abrupt("return", request(_objectSpread$A({}, opts, {
              path: pathMinionsForHealthFund(healthFundId)
            }), {
              method: 'get',
              params: query
            }));

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function getMinionsForHealthFund(_x7, _x8, _x9) {
    return _ref2.apply(this, arguments);
  };
}();
/**
 * Get minion for health fund
 * @param {String} healthFundId - Health fund ID
 * @param {String} minionId - Minion ID
 * @param {Object} opts - Additional options
 */

var getMinionForHealthFund = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(healthFundId, minionId, opts) {
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              healthFundId: healthFundId,
              minionId: minionId
            }, opts.hyperMediaEndpoint);
            return _context3.abrupt("return", request(_objectSpread$A({}, opts, {
              path: pathMinionForHealthFund(healthFundId, minionId)
            }), {
              method: 'get'
            }));

          case 3:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function getMinionForHealthFund(_x10, _x11, _x12) {
    return _ref3.apply(this, arguments);
  };
}();
/**
 * Update minion for health fund
 * @param {String} healthFundId - Health fund ID
 * @param {String} minionId - Minion ID
 * @param {String} body
 * @param {Object} opts - Additional options
 */

var updateMinionForHealthFund = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(healthFundId, minionId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              healthFundId: healthFundId,
              minionId: minionId
            }, opts.hyperMediaEndpoint);
            return _context4.abrupt("return", request(_objectSpread$A({}, opts, {
              path: pathMinionForHealthFund(healthFundId, minionId)
            }), {
              method: 'put',
              data: body
            }));

          case 3:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));

  return function updateMinionForHealthFund(_x13, _x14, _x15, _x16) {
    return _ref4.apply(this, arguments);
  };
}();
/**
 * Delete a health fund's minionId
 * @param {String} healthFundId - Health fund ID
 * @param {String} minionId - Minion ID
 * @param {Object} opts - Additional options
 */

var deleteMinionForHealthFund = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(healthFundId, minionId, opts) {
    return _regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              healthFundId: healthFundId,
              minionId: minionId
            }, opts.hyperMediaEndpoint);
            return _context5.abrupt("return", request(_objectSpread$A({}, opts, {
              path: pathMinionForHealthFund(healthFundId, minionId)
            }), {
              method: 'delete'
            }));

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));

  return function deleteMinionForHealthFund(_x17, _x18, _x19) {
    return _ref5.apply(this, arguments);
  };
}();

var minions = /*#__PURE__*/Object.freeze({
  __proto__: null,
  createMinionForHealthFund: createMinionForHealthFund,
  getMinionsForHealthFund: getMinionsForHealthFund,
  getMinionForHealthFund: getMinionForHealthFund,
  updateMinionForHealthFund: updateMinionForHealthFund,
  deleteMinionForHealthFund: deleteMinionForHealthFund
});

function ownKeys$B(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$B(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$B(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$B(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var PATH__MODALITIES = '/modalities';

var pathModality = function pathModality(modalityId) {
  return "/modalities/" + modalityId;
};

var pathBusinessModalities = function pathBusinessModalities(businessId) {
  return "/businesses/" + businessId + "/modalities";
};
/**
 * Get business's available modalities
 * @param {Object} businessId - Business ID
 * @param {Object} opts - Additional options
 */


var getBusinessModalities = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(businessId, opts) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (opts === void 0) {
              opts = {
                ver: sdkClient.defaultVersion
              };
            }

            doesParamExist.default({
              businessId: businessId
            }, opts.hyperMediaEndpoint);
            return _context.abrupt("return", request(_objectSpread$B({}, opts, {
              path: pathBusinessModalities(businessId)
            }), {
              method: 'get'
            }));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function getBusinessModalities(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * Get modalities
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getModalities = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(query, opts) {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {
                ver: sdkClient.defaultVersion
              };
            }

            return _context2.abrupt("return", request(_objectSpread$B({}, opts, {
              path: PATH__MODALITIES
            }), {
              method: 'get',
              params: query
            }));

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function getModalities(_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();
/**
 * Get modality
 * @param {String} modalityId - Modality ID
 * @param {Object} opts - Additional options
 */

var getModality = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(modalityId, opts) {
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (opts === void 0) {
              opts = {
                ver: sdkClient.defaultVersion
              };
            }

            return _context3.abrupt("return", request(_objectSpread$B({}, opts, {
              path: pathModality(modalityId)
            }), {
              method: 'get'
            }));

          case 2:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function getModality(_x5, _x6) {
    return _ref3.apply(this, arguments);
  };
}();

var modalities = /*#__PURE__*/Object.freeze({
  __proto__: null,
  getBusinessModalities: getBusinessModalities,
  getModalities: getModalities,
  getModality: getModality
});

function ownKeys$C(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$C(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$C(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$C(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var pathHealthFundDocumentNotes = function pathHealthFundDocumentNotes(healthFundId, documentId) {
  return "/healthfunds/" + healthFundId + "/documents/" + documentId + "/notes";
};
var pathHealthFundTransactionNote = function pathHealthFundTransactionNote(healthFundId, transactionId) {
  return "/healthfunds/" + healthFundId + "/transactions/" + transactionId + "/notes";
};
var pathHealthFundNote = function pathHealthFundNote(healthFundId, noteId) {
  return "/healthfunds/" + healthFundId + "/notes/" + noteId;
};
var pathTransactionNotes = function pathTransactionNotes(transactionId) {
  return "/transactions/" + transactionId + "/notes";
};
var pathTransactionNote = function pathTransactionNote(transactionId, transactionNoteId) {
  return "/transactions/" + transactionId + "/notes/" + transactionNoteId;
};
var pathGetTransactionNote = function pathGetTransactionNote(businessId, transactionId) {
  return "/businesses/" + businessId + "/transactions/" + transactionId + "/notes";
};
var createHealthFundDocumentNote = function createHealthFundDocumentNote(healthFundId, documentId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    healthFundId: healthFundId,
    documentId: documentId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$C({}, opts, {
    path: pathHealthFundDocumentNotes(healthFundId, documentId)
  }), {
    method: 'post',
    data: body
  });
};
var getHealthFundDocumentNotes = function getHealthFundDocumentNotes(healthFundId, documentId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    healthFundId: healthFundId,
    documentId: documentId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$C({}, opts, {
    path: pathHealthFundDocumentNotes(healthFundId, documentId)
  }), {
    method: 'get'
  });
};
var getHealthFundTransactionNote = function getHealthFundTransactionNote(healthFundId, transactionId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    healthFundId: healthFundId,
    transactionId: transactionId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$C({}, opts, {
    path: pathHealthFundTransactionNote(healthFundId, transactionId)
  }), {
    method: 'get'
  });
};
var getHealthFundNote = function getHealthFundNote(healthFundId, noteId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    healthFundId: healthFundId,
    noteId: noteId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$C({}, opts, {
    path: pathHealthFundNote(healthFundId, noteId)
  }), {
    method: 'get'
  });
};
var getTransactionNotes = function getTransactionNotes(transactionId, query, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    transactionId: transactionId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$C({}, opts, {
    path: pathTransactionNotes(transactionId)
  }), {
    method: 'get',
    params: query
  });
};
var getTransactionNote = function getTransactionNote(businessId, transactionId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId,
    transactionId: transactionId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$C({}, opts, {
    path: pathGetTransactionNote(businessId, transactionId)
  }), {
    method: 'get'
  });
};
var addTransactionNote = function addTransactionNote(transactionId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    transactionId: transactionId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$C({}, opts, {
    path: pathTransactionNotes(transactionId)
  }), {
    method: 'post',
    data: body
  });
};
var deleteTransactionNote = function deleteTransactionNote(transactionId, transactionNoteId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    transactionId: transactionId,
    transactionNoteId: transactionNoteId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$C({}, opts, {
    path: pathTransactionNote(transactionId, transactionNoteId)
  }), {
    method: 'delete'
  });
};
var updateHealthFundNote = function updateHealthFundNote(healthFundId, noteId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    healthFundId: healthFundId,
    noteId: noteId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$C({}, opts, {
    path: pathHealthFundNote(healthFundId, noteId)
  }), {
    method: 'put',
    data: body
  });
};
var deleteHealthFundNote = function deleteHealthFundNote(healthFundId, noteId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    healthFundId: healthFundId,
    noteId: noteId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$C({}, opts, {
    path: pathHealthFundNote(healthFundId, noteId)
  }), {
    method: 'delete'
  });
};

var notes = /*#__PURE__*/Object.freeze({
  __proto__: null,
  pathHealthFundDocumentNotes: pathHealthFundDocumentNotes,
  pathHealthFundTransactionNote: pathHealthFundTransactionNote,
  pathHealthFundNote: pathHealthFundNote,
  pathTransactionNotes: pathTransactionNotes,
  pathTransactionNote: pathTransactionNote,
  pathGetTransactionNote: pathGetTransactionNote,
  createHealthFundDocumentNote: createHealthFundDocumentNote,
  getHealthFundDocumentNotes: getHealthFundDocumentNotes,
  getHealthFundTransactionNote: getHealthFundTransactionNote,
  getHealthFundNote: getHealthFundNote,
  getTransactionNotes: getTransactionNotes,
  getTransactionNote: getTransactionNote,
  addTransactionNote: addTransactionNote,
  deleteTransactionNote: deleteTransactionNote,
  updateHealthFundNote: updateHealthFundNote,
  deleteHealthFundNote: deleteHealthFundNote
});

function ownKeys$D(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$D(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$D(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$D(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var pathPracticeOnboardingApplications = function pathPracticeOnboardingApplications(practiceId) {
  return "/practices/" + practiceId + "/onboardingapplications";
};
var pathBusinessPracticeOnboardingApplications = function pathBusinessPracticeOnboardingApplications(businessId, practiceId) {
  return "/businesses/" + businessId + "/practices/" + practiceId + "/onboardingapplications";
};
var pathBusinessOnboardingApplications = function pathBusinessOnboardingApplications(businessId) {
  return "/businesses/" + businessId + "/onboardingapplications";
};
var pathProviderSetItemOnboardingApplications = function pathProviderSetItemOnboardingApplications(businessId, staffId, providerSetItemId) {
  return "/businesses/" + businessId + "/staff/" + staffId + "/providersetitems/" + providerSetItemId + "/onboardingapplications";
};
var pathProviderSetItemOnboardingApplication = function pathProviderSetItemOnboardingApplication(businessId, staffId, providerSetItemId) {
  return "/businesses/" + businessId + "/staff/" + staffId + "/providersetitems/" + providerSetItemId + "/onboardingapplication";
};
/**
 * Get submitPracticeOnboardingApplication
 * @param {string} practiceId - Practice ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var submitPracticeOnboardingApplication = function submitPracticeOnboardingApplication(practiceId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    practiceId: practiceId
  });
  return request(_objectSpread$D({}, opts, {
    path: pathPracticeOnboardingApplications(practiceId)
  }), {
    method: 'post',
    data: body
  });
};
/**
 * Get a list of practice's onboarding applications
 * @param {String} businessId - Business ID
 * @param {string} practiceId - Practice ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getBusinessPracticeOnboardingApplications = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(businessId, practiceId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              practiceId: practiceId
            }, opts.hyperMediaEndpoint);
            return _context.abrupt("return", request(_objectSpread$D({}, opts, {
              path: pathBusinessPracticeOnboardingApplications(businessId, practiceId)
            }), {
              method: 'get',
              params: query
            }));

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function getBusinessPracticeOnboardingApplications(_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * Get onboarding applications for business
 * @param {string} businessId - Business ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getBusinessOnboardingApplications = function getBusinessOnboardingApplications(businessId, query, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  });
  return request(_objectSpread$D({}, opts, {
    path: pathBusinessOnboardingApplications(businessId)
  }), {
    method: 'get',
    params: query
  });
};
/**
 * Create onboarding application for business
 * @param {String} businessId - Business ID
 */

var createBusinessOnboardingApplication = function createBusinessOnboardingApplication(businessId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  });
  return request(_objectSpread$D({}, opts, {
    path: pathBusinessOnboardingApplications(businessId)
  }), {
    method: 'post',
    data: body
  });
};
/**
 * Update onboarding application for business
 * @param {String} businessId - Business ID
 */

var updateBusinessOnboardingApplication = function updateBusinessOnboardingApplication(businessId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  });
  return request(_objectSpread$D({}, opts, {
    path: pathBusinessOnboardingApplications(businessId)
  }), {
    method: 'put',
    data: body
  });
};
/**
 * Create onboarding application for provider set item
 * @param {String} businessId - Business ID
 * @param {String} staffID - Staff ID
 * @param {String} providerSetItemId - Provider set item ID
 */

var createProviderSetItemOnboardingApplication = function createProviderSetItemOnboardingApplication(businessId, staffId, providerSetItemId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId,
    staffId: staffId,
    providerSetItemId: providerSetItemId
  });
  return request(_objectSpread$D({}, opts, {
    path: pathProviderSetItemOnboardingApplications(businessId, staffId, providerSetItemId)
  }), {
    method: 'post',
    data: body
  });
};
/**
 * Get onboarding applications for provider set item
 * @param {string} businessId - Business ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getProviderSetItemOnboardingApplication = function getProviderSetItemOnboardingApplication(businessId, staffId, providerSetItemId, query, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  });
  return request(_objectSpread$D({}, opts, {
    path: pathProviderSetItemOnboardingApplication(businessId, staffId, providerSetItemId)
  }), {
    method: 'get',
    params: query
  });
};

var onboardingApplications = /*#__PURE__*/Object.freeze({
  __proto__: null,
  pathPracticeOnboardingApplications: pathPracticeOnboardingApplications,
  pathBusinessPracticeOnboardingApplications: pathBusinessPracticeOnboardingApplications,
  pathBusinessOnboardingApplications: pathBusinessOnboardingApplications,
  pathProviderSetItemOnboardingApplications: pathProviderSetItemOnboardingApplications,
  pathProviderSetItemOnboardingApplication: pathProviderSetItemOnboardingApplication,
  submitPracticeOnboardingApplication: submitPracticeOnboardingApplication,
  getBusinessPracticeOnboardingApplications: getBusinessPracticeOnboardingApplications,
  getBusinessOnboardingApplications: getBusinessOnboardingApplications,
  createBusinessOnboardingApplication: createBusinessOnboardingApplication,
  updateBusinessOnboardingApplication: updateBusinessOnboardingApplication,
  createProviderSetItemOnboardingApplication: createProviderSetItemOnboardingApplication,
  getProviderSetItemOnboardingApplication: getProviderSetItemOnboardingApplication
});

function ownKeys$E(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$E(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$E(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$E(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var pathOnboardingRequest = function pathOnboardingRequest(onboardingRequestId) {
  return "/onboardingrequests/" + onboardingRequestId;
};
var pathBusinessOnboardingRequests = function pathBusinessOnboardingRequests(businessId) {
  return "/businesses/" + businessId + "/onboardingrequests";
};
var pathOnboardingRequestSubmit = function pathOnboardingRequestSubmit(onboardingRequestId) {
  return "/onboardingrequests/" + onboardingRequestId + "/submits";
};
var pathOnboardingRequestOnboardingStep = function pathOnboardingRequestOnboardingStep(onboardingRequestId, onboardingStepId) {
  return "/onboardingrequests/" + onboardingRequestId + "/onboardingsteps/" + onboardingStepId;
};
/**
 * Get a onboarding request by Id
 * @param {String} onboardingRequestId - Onboarding Request Id
 * @param {Object} opts - Additional options
 */

var getOnboardingRequest = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(onboardingRequestId, opts) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              onboardingRequestId: onboardingRequestId
            }, opts.hyperMediaEndpoint);
            return _context.abrupt("return", request(_objectSpread$E({}, opts, {
              path: pathOnboardingRequest(onboardingRequestId)
            }), {
              method: 'get'
            }));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function getOnboardingRequest(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * Get a list of business' onboarding requests
 * @param {String} businessId - Business ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getBusinessOnboardingRequests = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(businessId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId
            }, opts.hyperMediaEndpoint);
            return _context2.abrupt("return", request(_objectSpread$E({}, opts, {
              path: pathBusinessOnboardingRequests(businessId)
            }), {
              method: 'get',
              params: query
            }));

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function getBusinessOnboardingRequests(_x3, _x4, _x5) {
    return _ref2.apply(this, arguments);
  };
}();
/**
 * Create onboarding request
 * @param {String} businessId - Business ID
 */

var createBusinessOnboardingRequest = function createBusinessOnboardingRequest(businessId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  });
  return request(_objectSpread$E({}, opts, {
    path: pathBusinessOnboardingRequests(businessId)
  }), {
    method: 'post',
    data: body
  });
};
/**
 * Submit onboarding request
 * @param {String} onboardingRequestId - Onboarding Request Id
 */

var submitOnboardingRequest = function submitOnboardingRequest(onboardingRequestId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    onboardingRequestId: onboardingRequestId
  });
  return request(_objectSpread$E({}, opts, {
    path: pathOnboardingRequestSubmit(onboardingRequestId)
  }), {
    method: 'post',
    data: body
  });
};
/**
 * Update onboarding request step
 * @param {String} onboardingRequestId - Onboarding Request Id
 * @param {String} onboardingStepId - Onboarding Step Id
 */

var updateOnboardingRequestStep = function updateOnboardingRequestStep(onboardingRequestId, onboardingStepId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    onboardingRequestId: onboardingRequestId
  });
  return request(_objectSpread$E({}, opts, {
    path: pathOnboardingRequestOnboardingStep(onboardingRequestId, onboardingStepId)
  }), {
    method: 'put',
    data: body
  });
};
/**
 * Delete onboarding request
 * @param {String} onboardingRequestId - Onboarding Request Id
 */

var deleteOnboardingRequest = function deleteOnboardingRequest(onboardingRequestId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    onboardingRequestId: onboardingRequestId
  });
  return request(_objectSpread$E({}, opts, {
    path: pathOnboardingRequest(onboardingRequestId)
  }), {
    method: 'delete',
    data: body
  });
};

var onboardingRequests = /*#__PURE__*/Object.freeze({
  __proto__: null,
  pathOnboardingRequest: pathOnboardingRequest,
  pathBusinessOnboardingRequests: pathBusinessOnboardingRequests,
  pathOnboardingRequestSubmit: pathOnboardingRequestSubmit,
  pathOnboardingRequestOnboardingStep: pathOnboardingRequestOnboardingStep,
  getOnboardingRequest: getOnboardingRequest,
  getBusinessOnboardingRequests: getBusinessOnboardingRequests,
  createBusinessOnboardingRequest: createBusinessOnboardingRequest,
  submitOnboardingRequest: submitOnboardingRequest,
  updateOnboardingRequestStep: updateOnboardingRequestStep,
  deleteOnboardingRequest: deleteOnboardingRequest
});

function ownKeys$F(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$F(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$F(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$F(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var PATH__OPS_DEPLOYMENTS = '/ops/deployments';
var PATH__OPS_SERVICES = '/ops/services';
var PATH__OPS_DECRTPT = '/ops/decrypt';

var pathOpsDeployment = function pathOpsDeployment(deploymentId) {
  return "/ops/deployments/" + deploymentId;
};

var pathOpsService = function pathOpsService(serviceId) {
  return "/ops/services/" + serviceId;
};
/**
 * Create ops service
 * @param {String} fullName - Service full name
 * @param {String} displayName - Service display name
 * @param {String} type - Service type
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */


var createService = function createService(fullName, displayName, type, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    fullName: fullName,
    displayName: displayName,
    type: type
  }, opts.hyperMediaEndpoint);

  var data = _objectSpread$F({
    fullName: fullName,
    displayName: displayName,
    type: type
  }, body);

  return request(_objectSpread$F({}, opts, {
    path: PATH__OPS_SERVICES
  }), {
    method: 'post',
    data: data
  });
};
/**
 * Delete an ops services
 * @param {String} serviceId - Service ID
 * @param {Object} opts - Additional options
 */

var deleteService = function deleteService(serviceId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    serviceId: serviceId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$F({}, opts, {
    path: pathOpsService(serviceId)
  }), {
    method: 'delete'
  });
};
/**
 * Deploy an ops service
 * @param {String} serviceId - Service ID
 * @param {Object} opts - Additional options
 */

var deployService = function deployService(serviceId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    serviceId: serviceId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$F({}, opts, {
    path: PATH__OPS_DEPLOYMENTS
  }), {
    method: 'post',
    data: {
      opsServiceId: serviceId
    }
  });
};
/**
 * Get ops deployments
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getDeployments = function getDeployments(query, opts) {
  if (query === void 0) {
    query = {};
  }

  if (opts === void 0) {
    opts = {};
  }

  return request(_objectSpread$F({}, opts, {
    path: PATH__OPS_DEPLOYMENTS
  }), {
    method: 'get',
    params: query
  });
};
/**
 * Get ops deployments
 * @param {String} deploymentId - Deployment ID
 * @param {Object} opts - Additional options
 */

var getDeployment = function getDeployment(deploymentId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    deploymentId: deploymentId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$F({}, opts, {
    path: pathOpsDeployment(deploymentId)
  }), {
    method: 'get'
  });
};
/**
 * Get ops services
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getServices = function getServices(query, opts) {
  if (query === void 0) {
    query = {};
  }

  if (opts === void 0) {
    opts = {};
  }

  return request(_objectSpread$F({}, opts, {
    path: PATH__OPS_SERVICES
  }), {
    method: 'get',
    params: query
  });
};
/**
 * Get an ops service
 * @param {String} serviceId - Service ID
 * @param {Object} opts - Additional options
 */

var getService = function getService(serviceId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    serviceId: serviceId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$F({}, opts, {
    path: pathOpsService(serviceId)
  }), {
    method: 'get'
  });
};
/**
 * Update an ops service
 * @param {String} serviceId - Service ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var updateService = function updateService(serviceId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    serviceId: serviceId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$F({}, opts, {
    path: pathOpsService(serviceId)
  }), {
    method: 'put',
    data: body
  });
};
/**
 * Decrypt Service
 * @param {String} serviceId - Service ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var decrypt = function decrypt(serviceId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    serviceId: serviceId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$F({}, opts, {
    path: PATH__OPS_DECRTPT
  }), {
    method: 'post',
    data: body
  });
};

var ops = /*#__PURE__*/Object.freeze({
  __proto__: null,
  createService: createService,
  deleteService: deleteService,
  deployService: deployService,
  getDeployments: getDeployments,
  getDeployment: getDeployment,
  getServices: getServices,
  getService: getService,
  updateService: updateService,
  decrypt: decrypt
});

function ownKeys$G(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$G(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$G(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$G(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var PATH__ORGANISATIONS = '/organisations';
/**
 * Get organisations
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getOrganisations = function getOrganisations(query, opts) {
  if (query === void 0) {
    query = {};
  }

  if (opts === void 0) {
    opts = {};
  }

  return request(_objectSpread$G({}, opts, {
    path: PATH__ORGANISATIONS
  }), {
    method: 'get',
    params: query
  });
};

var organisations = /*#__PURE__*/Object.freeze({
  __proto__: null,
  getOrganisations: getOrganisations
});

function ownKeys$H(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$H(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$H(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$H(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var PATH__PARTNERS = '/partners';

var pathPartner = function pathPartner(partnerId) {
  return "/partners/" + partnerId;
};

var pathPartnerAccount = function pathPartnerAccount(accountId) {
  return "/partners/accounts/" + accountId;
};

var pathPartnerPractices = function pathPartnerPractices(partnerId) {
  return "/partners/" + partnerId + "/practices";
};

var pathPartnerPracticeProviderData = function pathPartnerPracticeProviderData(partnerId, practiceId) {
  return "/partners/" + partnerId + "/practices/" + practiceId + "/providerdata";
};
/**
 * Get partners
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */


var getPartners = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(query, opts) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            return _context.abrupt("return", request(_objectSpread$H({}, opts, {
              path: PATH__PARTNERS
            }), {
              method: 'get',
              params: query
            }));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function getPartners(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * Get partner
 * @param {String} partnerId - Partner ID
 * @param {Object} opts - Additional options
 */

var getPartner = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(partnerId, opts) {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              partnerId: partnerId
            }, opts.hyperMediaEndpoint);
            return _context2.abrupt("return", request(_objectSpread$H({}, opts, {
              path: pathPartner(partnerId)
            }), {
              method: 'get'
            }));

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function getPartner(_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();
/**
 * Update partner
 * @param {String} partnerId - Partner ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var updatePartner = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(partnerId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              partnerId: partnerId
            }, opts.hyperMediaEndpoint);
            return _context3.abrupt("return", request(_objectSpread$H({}, opts, {
              path: pathPartner(partnerId)
            }), {
              method: 'put',
              data: body
            }));

          case 3:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function updatePartner(_x5, _x6, _x7) {
    return _ref3.apply(this, arguments);
  };
}();
/**
 * Update partner practice
 * @param {String} partnerId - Partner ID
 * @param {String} fullNameId - Practice full name
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var updatePartnerPractice = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(partnerId, fullNameId, body, opts) {
    var data;
    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              partnerId: partnerId
            }, opts.hyperMediaEndpoint);
            data = _objectSpread$H({
              fullNameId: fullNameId
            }, body);
            return _context4.abrupt("return", request(_objectSpread$H({}, opts, {
              path: pathPartnerPractices(partnerId)
            }), {
              method: 'put',
              data: data
            }));

          case 4:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));

  return function updatePartnerPractice(_x8, _x9, _x10, _x11) {
    return _ref4.apply(this, arguments);
  };
}();
/**
 * Update partner practice provider data
 * @param {String} partnerId - Partner ID
 * @param {String} practiceId - Practice ID
 * @param {String} providerNumberId - Provider number
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var updatePartnerPracticeProviderData = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(partnerId, practiceId, providerNumberId, body, opts) {
    var data;
    return _regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              partnerId: partnerId,
              practiceId: practiceId,
              providerNumberId: providerNumberId
            }, opts.hyperMediaEndpoint);
            data = _objectSpread$H({
              providerNumberId: providerNumberId
            }, body);
            return _context5.abrupt("return", request(_objectSpread$H({}, opts, {
              path: pathPartnerPracticeProviderData(partnerId, practiceId)
            }), {
              method: 'put',
              data: data
            }));

          case 4:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));

  return function updatePartnerPracticeProviderData(_x12, _x13, _x14, _x15, _x16) {
    return _ref5.apply(this, arguments);
  };
}();
/**
 * Verify partner account
 * @param {String} accountId - AccountId ID
 * @param {Boolean} forceVerification - Force verification
 * @param {Object} opts - Additional options
 */

var verifyPartnerAccount = /*#__PURE__*/function () {
  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(accountId, forceVerification, opts) {
    return _regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            if (forceVerification === void 0) {
              forceVerification = false;
            }

            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              accountId: accountId
            }, opts.hyperMediaEndpoint);
            return _context6.abrupt("return", request(_objectSpread$H({}, opts, {
              path: pathPartnerAccount(accountId) + "/verify"
            }), {
              method: 'post',
              data: {
                forceVerification: forceVerification
              }
            }));

          case 4:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));

  return function verifyPartnerAccount(_x17, _x18, _x19) {
    return _ref6.apply(this, arguments);
  };
}();
/**
 * Notify partner account
 * @param {String} accountId - AccountId ID
 * @param {Object} opts - Additional options
 */

var notifyPartnerAccount = /*#__PURE__*/function () {
  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(accountId, opts) {
    return _regeneratorRuntime.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              accountId: accountId
            }, opts.hyperMediaEndpoint);
            return _context7.abrupt("return", request(_objectSpread$H({}, opts, {
              path: pathPartnerAccount(accountId) + "/notify"
            }), {
              method: 'post'
            }));

          case 3:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));

  return function notifyPartnerAccount(_x20, _x21) {
    return _ref7.apply(this, arguments);
  };
}();

var partners = /*#__PURE__*/Object.freeze({
  __proto__: null,
  getPartners: getPartners,
  getPartner: getPartner,
  updatePartner: updatePartner,
  updatePartnerPractice: updatePartnerPractice,
  updatePartnerPracticeProviderData: updatePartnerPracticeProviderData,
  verifyPartnerAccount: verifyPartnerAccount,
  notifyPartnerAccount: notifyPartnerAccount
});

function ownKeys$I(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$I(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$I(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$I(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var pathBusinessPatients = function pathBusinessPatients(businessId) {
  return "/businesses/" + businessId + "/patients";
};

var pathBusinessPatient = function pathBusinessPatient(businessId, patientId) {
  return "/businesses/" + businessId + "/patients/" + patientId;
};

var pathBusinessPatientByRefId = function pathBusinessPatientByRefId(businessId, refId) {
  return "/businesses/" + businessId + "/patients/ref/" + refId;
};

var pathRequestUpdatePatientPaymentMethod = function pathRequestUpdatePatientPaymentMethod(businessId, patientId) {
  return "/businesses/" + businessId + "/patients/" + patientId + "/paymentmethods/updaterequests";
};
/**
 * Update patient payment information by SMS or Link
 * @param {String} businessId - Business ID
 * @param {String} patientId - Patient ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */


var requestUpdatePatientPaymentMethod = function requestUpdatePatientPaymentMethod(businessId, patientId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId,
    patientId: patientId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$I({}, opts, {
    path: pathRequestUpdatePatientPaymentMethod(businessId, patientId)
  }), {
    method: 'post',
    data: body
  });
};
/**
 * Create a business patient
 * @param {String} businessId - Business ID
 * @param {Object} body - Query parameters
 * @param {Object} opts - Additional options
 */

var createBusinessPatient = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(businessId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId
            }, opts.hyperMediaEndpoint);
            return _context.abrupt("return", request(_objectSpread$I({}, opts, {
              path: pathBusinessPatients(businessId)
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function createBusinessPatient(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * Get business patients
 * @param {String} businessId - Business ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getBusinessPatients = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(businessId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId
            }, opts.hyperMediaEndpoint);
            return _context2.abrupt("return", request(_objectSpread$I({}, opts, {
              path: pathBusinessPatients(businessId)
            }), {
              method: 'get',
              params: query
            }));

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function getBusinessPatients(_x4, _x5, _x6) {
    return _ref2.apply(this, arguments);
  };
}();
/**
 * Get a business patient
 * @param {String} businessId - Business ID
 * @param {String} patientId - Patient ID
 * @param {Object} opts - Additional options
 */

var getBusinessPatient = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(businessId, patientId, opts) {
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId
            }, opts.hyperMediaEndpoint);
            return _context3.abrupt("return", request(_objectSpread$I({}, opts, {
              path: pathBusinessPatient(businessId, patientId)
            }), {
              method: 'get'
            }));

          case 3:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function getBusinessPatient(_x7, _x8, _x9) {
    return _ref3.apply(this, arguments);
  };
}();
/**
 * Get a business patient by ref id
 * @param {String} businessId - Business ID
 * @param {String} refId - Ref ID
 * @param {Object} opts - Additional options
 */

var getBusinessPatientByRefId = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(businessId, refId, opts) {
    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              refId: refId
            }, opts.hyperMediaEndpoint);
            return _context4.abrupt("return", request(_objectSpread$I({}, opts, {
              path: pathBusinessPatientByRefId(businessId, refId)
            }), {
              method: 'get'
            }));

          case 3:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));

  return function getBusinessPatientByRefId(_x10, _x11, _x12) {
    return _ref4.apply(this, arguments);
  };
}();
/**
 * Update a business patient
 * @param {String} businessId - Business ID
 * @param {String} patientId - Patient ID
 * @param {Object} body - Query parameters
 * @param {Object} opts - Additional options
 */

var updateBusinessPatient = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(businessId, patientId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId
            }, opts.hyperMediaEndpoint);
            return _context5.abrupt("return", request(_objectSpread$I({}, opts, {
              path: pathBusinessPatient(businessId, patientId)
            }), {
              method: 'put',
              data: body
            }));

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));

  return function updateBusinessPatient(_x13, _x14, _x15, _x16) {
    return _ref5.apply(this, arguments);
  };
}();
/**
 * Delete a business patient
 * @param {String} businessId - Business ID
 * @param {String} patientId - Patient ID
 * @param {Object} opts - Additional options
 */

var deleteBusinessPatient = /*#__PURE__*/function () {
  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(businessId, patientId, opts) {
    return _regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId
            }, opts.hyperMediaEndpoint);
            return _context6.abrupt("return", request(_objectSpread$I({}, opts, {
              path: pathBusinessPatient(businessId, patientId)
            }), {
              method: 'delete'
            }));

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));

  return function deleteBusinessPatient(_x17, _x18, _x19) {
    return _ref6.apply(this, arguments);
  };
}();

var patients = /*#__PURE__*/Object.freeze({
  __proto__: null,
  requestUpdatePatientPaymentMethod: requestUpdatePatientPaymentMethod,
  createBusinessPatient: createBusinessPatient,
  getBusinessPatients: getBusinessPatients,
  getBusinessPatient: getBusinessPatient,
  getBusinessPatientByRefId: getBusinessPatientByRefId,
  updateBusinessPatient: updateBusinessPatient,
  deleteBusinessPatient: deleteBusinessPatient
});

function ownKeys$J(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$J(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$J(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$J(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var PATH__PAYMENTS = '/payments';

var pathAccountPaymentMethods = function pathAccountPaymentMethods(accountId) {
  return "/accounts/" + accountId + "/paymentmethods";
};

var pathAccountPaymentMethod = function pathAccountPaymentMethod(accountId, paymentMethodId) {
  return "/accounts/" + accountId + "/paymentmethods/" + paymentMethodId;
};

var pathBusinessPaymentsClientTokens = function pathBusinessPaymentsClientTokens(businessId) {
  return "/businesses/" + businessId + "/payments/clienttoken";
};

var pathBusinessPaymentMethods = function pathBusinessPaymentMethods(businessId) {
  return "/businesses/" + businessId + "/paymentmethods";
};

var pathBusinessPaymentMethod = function pathBusinessPaymentMethod(businessId, paymentMethodId) {
  return "/businesses/" + businessId + "/paymentmethods/" + paymentMethodId;
};

var pathBusinessPatientPaymentMethods = function pathBusinessPatientPaymentMethods(businessId, patientId) {
  return "/businesses/" + businessId + "/patients/" + patientId + "/paymentmethods";
};

var pathBusinessPatientPaymentMethodsByRefId = function pathBusinessPatientPaymentMethodsByRefId(businessId, refId) {
  return "/businesses/" + businessId + "/patients/refid/" + refId + "/paymentmethods";
};

var pathBusinessPatientPaymentMethod = function pathBusinessPatientPaymentMethod(businessId, patientId, paymentMethodId) {
  return "/businesses/" + businessId + "/patients/" + patientId + "/paymentmethods/" + paymentMethodId;
};

var pathBusinessSalesClientToken = function pathBusinessSalesClientToken(businessId) {
  return "/businesses/" + businessId + "/sales/clienttoken";
};

var pathBusinessPaymentClientToken = function pathBusinessPaymentClientToken(businessId, patientId) {
  return "/businesses/" + businessId + "/patients/" + patientId + "/sales/clienttoken";
};
/**
 * Create an account's payment method
 * @param {String} accountId - Account ID
 * @param {Object} opts - Additional options
 * @returns {Object} The device data
 */


var createAccountPaymentMethod = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(accountId, nonce, source, opts) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              accountId: accountId,
              nonce: nonce,
              source: source
            }, opts.hyperMediaEndpoint);
            return _context.abrupt("return", request(_objectSpread$J({}, opts, {
              path: pathAccountPaymentMethods(accountId)
            }), {
              method: 'post',
              data: {
                nonce: nonce,
                source: source
              }
            }));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function createAccountPaymentMethod(_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * Get a business' payment methods
 * @param {String} businessId - Business ID
 * @param {Object} opts - Additional options
 * @returns {Object} The device data
 */

var createBusinessPaymentMethod = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(businessId, nonce, source, opts) {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              nonce: nonce,
              source: source
            }, opts.hyperMediaEndpoint);
            return _context2.abrupt("return", request(_objectSpread$J({}, opts, {
              path: pathBusinessPaymentMethods(businessId)
            }), {
              method: 'post',
              data: {
                nonce: nonce,
                source: source
              }
            }));

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function createBusinessPaymentMethod(_x5, _x6, _x7, _x8) {
    return _ref2.apply(this, arguments);
  };
}();
/**
 * Create a business patient payment method
 * @param {String} accountId - Account ID
 * @param {String} patientId - Patient ID
 * @param {Object} opts - Additional options
 * @returns {Object} The device data
 */

var createBusinessPatientPaymentMethod = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(businessId, patientId, nonce, source, opts) {
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              patientId: patientId,
              nonce: nonce,
              source: source
            }, opts.hyperMediaEndpoint);
            return _context3.abrupt("return", request(_objectSpread$J({}, opts, {
              path: pathBusinessPatientPaymentMethods(businessId, patientId)
            }), {
              method: 'post',
              data: {
                nonce: nonce,
                source: source
              }
            }));

          case 3:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function createBusinessPatientPaymentMethod(_x9, _x10, _x11, _x12, _x13) {
    return _ref3.apply(this, arguments);
  };
}();
/**
 * Delete an account's payment method
 * @param {String} accountId - Account ID
 * @param {String} paymentMethodId - Account ID
 * @param {Object} opts - Additional options
 * @returns {Object} The device data
 */

var deleteAccountPaymentMethod = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(accountId, paymentMethodId, opts) {
    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              accountId: accountId,
              paymentMethodId: paymentMethodId
            }, opts.hyperMediaEndpoint);
            return _context4.abrupt("return", request(_objectSpread$J({}, opts, {
              path: pathAccountPaymentMethod(accountId, paymentMethodId)
            }), {
              method: 'delete'
            }));

          case 3:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));

  return function deleteAccountPaymentMethod(_x14, _x15, _x16) {
    return _ref4.apply(this, arguments);
  };
}();
/**
 * Delete a business' payment method
 * @param {String} businessId - Business ID
 * @param {String} paymentMethodId - Payment Method ID
 * @param {Object} opts - Additional options
 * @returns {Object} The device data
 */

var deleteBusinessPaymentMethod = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(businessId, paymentMethodId, opts) {
    return _regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              paymentMethodId: paymentMethodId
            }, opts.hyperMediaEndpoint);
            return _context5.abrupt("return", request(_objectSpread$J({}, opts, {
              path: pathBusinessPaymentMethod(businessId, paymentMethodId)
            }), {
              method: 'delete'
            }));

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));

  return function deleteBusinessPaymentMethod(_x17, _x18, _x19) {
    return _ref5.apply(this, arguments);
  };
}();
/**
 * Delete a business patient payment method
 * @param {String} businessId - Business ID
 * @param {String} patientId - Patient ID
 * @param {String} paymentMethodId - Payment Method ID
 * @param {Object} opts - Additional options
 * @returns {Object} The device data
 */

var deleteBusinessPatientPaymentMethod = /*#__PURE__*/function () {
  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(businessId, patientId, paymentMethodId, opts) {
    return _regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              patientId: patientId,
              paymentMethodId: paymentMethodId
            }, opts.hyperMediaEndpoint);
            return _context6.abrupt("return", request(_objectSpread$J({}, opts, {
              path: pathBusinessPatientPaymentMethod(businessId, patientId, paymentMethodId)
            }), {
              method: 'delete'
            }));

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));

  return function deleteBusinessPatientPaymentMethod(_x20, _x21, _x22, _x23) {
    return _ref6.apply(this, arguments);
  };
}();
/**
 * Get an account's payment methods
 * @param {String} accountId - Account ID
 * @param {Object} opts - Additional options
 * @returns {Object} The device data
 */

var getAccountPaymentMethods = /*#__PURE__*/function () {
  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(accountId, opts) {
    return _regeneratorRuntime.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              accountId: accountId
            }, opts.hyperMediaEndpoint);
            return _context7.abrupt("return", request(_objectSpread$J({}, opts, {
              path: pathAccountPaymentMethods(accountId)
            }), {
              method: 'get'
            }));

          case 3:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));

  return function getAccountPaymentMethods(_x24, _x25) {
    return _ref7.apply(this, arguments);
  };
}();
/**
 * Get a business' payment methods
 * @param {String} businessId - Business ID
 * @param {Object} opts - Additional options
 * @returns {Object} The device data
 */

var getBusinessPaymentMethods = /*#__PURE__*/function () {
  var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(businessId, opts) {
    return _regeneratorRuntime.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId
            }, opts.hyperMediaEndpoint);
            return _context8.abrupt("return", request(_objectSpread$J({}, opts, {
              path: pathBusinessPaymentMethods(businessId)
            }), {
              method: 'get'
            }));

          case 3:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  }));

  return function getBusinessPaymentMethods(_x26, _x27) {
    return _ref8.apply(this, arguments);
  };
}();
/**
 * Get a business patient payment methods
 * @param {String} businessId - Business ID
 * @param {Object} opts - Additional options
 * @returns {Object} The payment methods data
 */

var getBusinessPatientPaymentMethods = /*#__PURE__*/function () {
  var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(businessId, patientId, opts) {
    return _regeneratorRuntime.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              patientId: patientId
            }, opts.hyperMediaEndpoint);
            return _context9.abrupt("return", request(_objectSpread$J({}, opts, {
              path: pathBusinessPatientPaymentMethods(businessId, patientId)
            }), {
              method: 'get'
            }));

          case 3:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));

  return function getBusinessPatientPaymentMethods(_x28, _x29, _x30) {
    return _ref9.apply(this, arguments);
  };
}();
/**
 * Get a business patient payment methods by ref id
 * @param {String} businessId - Business ID
 * @param {String} refId - Patient ref ID
 * @param {Object} opts - Additional options
 * @returns {Object} The payment methods data
 */

var getBusinessPatientPaymentMethodsByRefId = /*#__PURE__*/function () {
  var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(businessId, refId, opts) {
    return _regeneratorRuntime.wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              refId: refId
            }, opts.hyperMediaEndpoint);
            return _context10.abrupt("return", request(_objectSpread$J({}, opts, {
              path: pathBusinessPatientPaymentMethodsByRefId(businessId, refId)
            }), {
              method: 'get'
            }));

          case 3:
          case "end":
            return _context10.stop();
        }
      }
    }, _callee10);
  }));

  return function getBusinessPatientPaymentMethodsByRefId(_x31, _x32, _x33) {
    return _ref10.apply(this, arguments);
  };
}();
/**
 * Get an account's payment method
 * @param {String} accountId - Account ID
 * @param {String} paymentMethodId - Account ID
 * @param {Object} opts - Additional options
 * @returns {Object} The device data
 */

var getAccountPaymentMethod = /*#__PURE__*/function () {
  var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(accountId, paymentMethodId, opts) {
    return _regeneratorRuntime.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              accountId: accountId,
              paymentMethodId: paymentMethodId
            }, opts.hyperMediaEndpoint);
            return _context11.abrupt("return", request(_objectSpread$J({}, opts, {
              path: pathAccountPaymentMethod(accountId, paymentMethodId)
            }), {
              method: 'get'
            }));

          case 3:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));

  return function getAccountPaymentMethod(_x34, _x35, _x36) {
    return _ref11.apply(this, arguments);
  };
}();
/**
 * Get a business payment method
 * @param {String} businessId - Business ID
 * @param {String} paymentMethodId - Payment Method ID
 * @param {Object} opts - Additional options
 * @returns {Object} The device data
 */

var getBusinessPaymentMethod = /*#__PURE__*/function () {
  var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(businessId, paymentMethodId, opts) {
    return _regeneratorRuntime.wrap(function _callee12$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              paymentMethodId: paymentMethodId
            }, opts.hyperMediaEndpoint);
            return _context12.abrupt("return", request(_objectSpread$J({}, opts, {
              path: pathBusinessPaymentMethod(businessId, paymentMethodId)
            }), {
              method: 'get'
            }));

          case 3:
          case "end":
            return _context12.stop();
        }
      }
    }, _callee12);
  }));

  return function getBusinessPaymentMethod(_x37, _x38, _x39) {
    return _ref12.apply(this, arguments);
  };
}();
/**
 * Get a business patient payment method
 * @param {String} businessId - Business ID
 * @param {String} patientID - Patient ID
 * @param {String} paymentMethodId - Payment Method ID
 * @param {Object} opts - Additional options
 * @returns {Object} The device data
 */

var getBusinessPatientPaymentMethod = /*#__PURE__*/function () {
  var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(businessId, patientId, paymentMethodId, opts) {
    return _regeneratorRuntime.wrap(function _callee13$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              patientId: patientId,
              paymentMethodId: paymentMethodId
            }, opts.hyperMediaEndpoint);
            return _context13.abrupt("return", request(_objectSpread$J({}, opts, {
              path: pathBusinessPatientPaymentMethod(businessId, patientId, paymentMethodId)
            }), {
              method: 'get'
            }));

          case 3:
          case "end":
            return _context13.stop();
        }
      }
    }, _callee13);
  }));

  return function getBusinessPatientPaymentMethod(_x40, _x41, _x42, _x43) {
    return _ref13.apply(this, arguments);
  };
}();
/**
 * Get business client token
 * @param {String} businessId - Business ID
 * @param {String} source - Source of payment
 * @param {Object} opts - Additional options
 * @returns {Object} The device data
 */

var getBusinessClientToken = /*#__PURE__*/function () {
  var _ref14 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(businessId, source, opts) {
    return _regeneratorRuntime.wrap(function _callee14$(_context14) {
      while (1) {
        switch (_context14.prev = _context14.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              source: source
            }, opts.hyperMediaEndpoint);
            return _context14.abrupt("return", request(_objectSpread$J({}, opts, {
              path: pathBusinessPaymentsClientTokens(businessId)
            }), {
              method: 'get',
              params: {
                source: source
              }
            }));

          case 3:
          case "end":
            return _context14.stop();
        }
      }
    }, _callee14);
  }));

  return function getBusinessClientToken(_x44, _x45, _x46) {
    return _ref14.apply(this, arguments);
  };
}();
/**
 * Get business payment client token
 * @param {String} businessId - Business ID
 * @param {String} patientId - Patient ID
 * @param {Object} opts - Additional options
 * @returns {Object} The device data
 */

var getBusinessPaymentClientToken = /*#__PURE__*/function () {
  var _ref15 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(businessId, patientId, opts) {
    return _regeneratorRuntime.wrap(function _callee15$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              patientId: patientId
            }, opts.hyperMediaEndpoint);
            return _context15.abrupt("return", request(_objectSpread$J({}, opts, {
              path: pathBusinessPaymentClientToken(businessId, patientId)
            }), {
              method: 'get'
            }));

          case 3:
          case "end":
            return _context15.stop();
        }
      }
    }, _callee15);
  }));

  return function getBusinessPaymentClientToken(_x47, _x48, _x49) {
    return _ref15.apply(this, arguments);
  };
}();
/**
 * Get business sales client token
 * @param {String} businessId - Business ID
 * @param {Object} opts - Additional options
 * @returns {Object} The device data
 */

var getBusinessSalesClientToken = /*#__PURE__*/function () {
  var _ref16 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(businessId, opts) {
    return _regeneratorRuntime.wrap(function _callee16$(_context16) {
      while (1) {
        switch (_context16.prev = _context16.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId
            }, opts.hyperMediaEndpoint);
            return _context16.abrupt("return", request(_objectSpread$J({}, opts, {
              path: pathBusinessSalesClientToken(businessId)
            }), {
              method: 'get'
            }));

          case 3:
          case "end":
            return _context16.stop();
        }
      }
    }, _callee16);
  }));

  return function getBusinessSalesClientToken(_x50, _x51) {
    return _ref16.apply(this, arguments);
  };
}();
/**
 * Get client token
 * @param {String} source - Source of payment
 * @param {Object} opts - Additional options
 * @returns {Object} The device data
 */

var getClientToken = /*#__PURE__*/function () {
  var _ref17 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(source, opts) {
    return _regeneratorRuntime.wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            if (opts === void 0) {
              opts = {
                tokenType: 'account'
              };
            }

            doesParamExist.default({
              source: source
            }, opts.hyperMediaEndpoint);
            return _context17.abrupt("return", request(_objectSpread$J({}, opts, {
              path: PATH__PAYMENTS + "/clienttoken"
            }), {
              method: 'get',
              params: {
                source: source
              },
              tokenType: opts.tokenType
            }));

          case 3:
          case "end":
            return _context17.stop();
        }
      }
    }, _callee17);
  }));

  return function getClientToken(_x52, _x53) {
    return _ref17.apply(this, arguments);
  };
}();
/**
 * Update an account's payment method
 * @param {String} accountId - Account ID
 * @param {String} paymentMethodId - Account ID
 * @param {Object} opts - Additional options
 * @returns {Object} The device data
 */

var updateAccountPaymentMethod = /*#__PURE__*/function () {
  var _ref18 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(accountId, paymentMethodId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee18$(_context18) {
      while (1) {
        switch (_context18.prev = _context18.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              accountId: accountId,
              paymentMethodId: paymentMethodId
            }, opts.hyperMediaEndpoint);
            return _context18.abrupt("return", request(_objectSpread$J({}, opts, {
              path: pathAccountPaymentMethod(accountId, paymentMethodId)
            }), {
              data: body,
              method: 'put'
            }));

          case 3:
          case "end":
            return _context18.stop();
        }
      }
    }, _callee18);
  }));

  return function updateAccountPaymentMethod(_x54, _x55, _x56, _x57) {
    return _ref18.apply(this, arguments);
  };
}();
/**
 * Update a business' payment method
 * @param {String} businessId - Business ID
 * @param {String} paymentMethodId - Account ID
 * @param {Object} opts - Additional options
 * @returns {Object} The device data
 */

var updateBusinessPaymentMethod = /*#__PURE__*/function () {
  var _ref19 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(businessId, paymentMethodId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee19$(_context19) {
      while (1) {
        switch (_context19.prev = _context19.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              paymentMethodId: paymentMethodId
            }, opts.hyperMediaEndpoint);
            return _context19.abrupt("return", request(_objectSpread$J({}, opts, {
              path: pathBusinessPaymentMethod(businessId, paymentMethodId)
            }), {
              data: body,
              method: 'put'
            }));

          case 3:
          case "end":
            return _context19.stop();
        }
      }
    }, _callee19);
  }));

  return function updateBusinessPaymentMethod(_x58, _x59, _x60, _x61) {
    return _ref19.apply(this, arguments);
  };
}();
/**
 * Update a business patient payment method
 * @param {String} businessId - Business ID
 * @param {String} paymentMethodId - Account ID
 * @param {Object} opts - Additional options
 * @returns {Object} The device data
 */

var updateBusinessPatientPaymentMethod = /*#__PURE__*/function () {
  var _ref20 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20(businessId, patientId, paymentMethodId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              patientId: patientId,
              paymentMethodId: paymentMethodId
            }, opts.hyperMediaEndpoint);
            return _context20.abrupt("return", request(_objectSpread$J({}, opts, {
              path: pathBusinessPatientPaymentMethod(businessId, patientId, paymentMethodId)
            }), {
              data: body,
              method: 'put'
            }));

          case 3:
          case "end":
            return _context20.stop();
        }
      }
    }, _callee20);
  }));

  return function updateBusinessPatientPaymentMethod(_x62, _x63, _x64, _x65, _x66) {
    return _ref20.apply(this, arguments);
  };
}(); //////////////////////////////////////////////////////////////

var getPaymentGatewayError = function getPaymentGatewayError(sessionResponse) {
  if (sessionResponse && sessionResponse.status === 'fields_in_error') {
    return constants.ERROR_MESSAGES.PAYMENT_GATEWAY_FIELDS;
  } else if (sessionResponse && sessionResponse.status === 'system_error') {
    sentry.logError(sessionResponse);
    return constants.ERROR_MESSAGES.PAYMENT_GATEWAY_ERROR;
  }

  return null;
};
/**
 * Get a business nonce
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var getNonce = /*#__PURE__*/function () {
  var _ref22 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(_ref21, opts) {
    var amount, businessId, patientId, _cardNumber, expiry, cvc, _ref21$paymentProvide, paymentProvider, _ref21$isSales, isSales, isSelfCheckoutSession, _ref21$source, source, cardNumber, cardExpiryMonth, cardExpiryYear, cardSecurityCode, clientToken, paymentSession, updateSessionResponse, clientInstance, sourceResponse, paymentsClient, googlePaymentInstance, response, paymentDataRequest, cardPaymentMethod, paymentData, applePayInstance, paymentRequest, canMakeApplePayment;

    return _regeneratorRuntime.wrap(function _callee21$(_context21) {
      while (1) {
        switch (_context21.prev = _context21.next) {
          case 0:
            amount = _ref21.amount, businessId = _ref21.businessId, patientId = _ref21.patientId, _cardNumber = _ref21.cardNumber, expiry = _ref21.expiry, cvc = _ref21.cvc, _ref21$paymentProvide = _ref21.paymentProvider, paymentProvider = _ref21$paymentProvide === void 0 ? constants.PAYMENT_PROVIDERS.PAYMENT_CARD : _ref21$paymentProvide, _ref21$isSales = _ref21.isSales, isSales = _ref21$isSales === void 0 ? true : _ref21$isSales, isSelfCheckoutSession = _ref21.isSelfCheckoutSession, _ref21$source = _ref21.source, source = _ref21$source === void 0 ? 'mastercard' : _ref21$source;

            cardNumber = _cardNumber ? _cardNumber.replace(/\s/g, '') : '';
            cardExpiryMonth = expiry ? expiry.split('/')[0].trim() : '';
            cardExpiryYear = expiry ? expiry.split('/')[1].trim() : '';
            cardSecurityCode = cvc;

            if (!(businessId && isSales && !patientId)) {
              _context21.next = 12;
              break;
            }

            _context21.next = 9;
            return getBusinessSalesClientToken(businessId, isSelfCheckoutSession ? {
              tokenType: 'session'
            } : {});

          case 9:
            clientToken = _context21.sent;
            _context21.next = 27;
            break;

          case 12:
            if (!(businessId && !patientId)) {
              _context21.next = 18;
              break;
            }

            _context21.next = 15;
            return getBusinessClientToken(businessId, source, isSelfCheckoutSession ? {
              tokenType: 'session'
            } : {});

          case 15:
            clientToken = _context21.sent;
            _context21.next = 27;
            break;

          case 18:
            if (!(businessId && patientId)) {
              _context21.next = 24;
              break;
            }

            _context21.next = 21;
            return getBusinessPaymentClientToken(businessId, patientId, {
              requestConfig: {
                tokenType: 'session'
              }
            });

          case 21:
            clientToken = _context21.sent;
            _context21.next = 27;
            break;

          case 24:
            _context21.next = 26;
            return getClientToken(source, isSelfCheckoutSession ? {
              tokenType: 'session'
            } : {});

          case 26:
            clientToken = _context21.sent;

          case 27:
            if (!clientToken.source) clientToken.source = source;

            if (!(clientToken.source === 'mastercard')) {
              _context21.next = 39;
              break;
            }

            // @ts-expect-error TS(2304): Cannot find name 'HostedForm'.
            paymentSession = HostedForm; // eslint-disable-line no-undef

            if (paymentSession) {
              _context21.next = 32;
              break;
            }

            throw new Error(constants.ERROR_MESSAGES.PAYMENT_GATEWAY_ERROR);

          case 32:
            paymentSession.setMerchant(clientToken.merchantId);
            _context21.next = 35;
            return pify(paymentSession.updateSession, {
              errorFirst: false
            })(clientToken.clientToken, {
              cardNumber: cardNumber,
              cardExpiryMonth: cardExpiryMonth,
              cardExpiryYear: cardExpiryYear,
              cardSecurityCode: cardSecurityCode
            });

          case 35:
            updateSessionResponse = _context21.sent;

            if (!getPaymentGatewayError(updateSessionResponse)) {
              _context21.next = 38;
              break;
            }

            throw new Error(getPaymentGatewayError(updateSessionResponse));

          case 38:
            return _context21.abrupt("return", _objectSpread$J({}, clientToken, {
              nonce: clientToken.clientToken,
              sourceResponse: updateSessionResponse
            }));

          case 39:
            if (!(clientToken.source === 'braintree')) {
              _context21.next = 77;
              break;
            }

            _context21.next = 42;
            return braintreeClient.create({
              authorization: clientToken.clientToken
            });

          case 42:
            clientInstance = _context21.sent;
            sourceResponse = {};

            if (!(paymentProvider === constants.PAYMENT_PROVIDERS.PAYMENT_CARD)) {
              _context21.next = 49;
              break;
            }

            _context21.next = 47;
            return clientInstance.request({
              endpoint: 'payment_methods/credit_cards',
              method: 'post',
              data: {
                creditCard: {
                  number: cardNumber,
                  expirationDate: cardExpiryMonth + "/" + cardExpiryYear,
                  cvv: cvc,
                  options: {
                    validate: false
                  }
                }
              }
            });

          case 47:
            sourceResponse = _context21.sent;
            return _context21.abrupt("return", _objectSpread$J({}, clientToken, {
              nonce: _get(sourceResponse, 'creditCards[0].nonce'),
              sourceResponse: sourceResponse
            }));

          case 49:
            if (!(paymentProvider === constants.PAYMENT_PROVIDERS.GOOGLE_PAY && amount && _get(window, 'google.payments.api'))) {
              _context21.next = 68;
              break;
            }

            paymentsClient = new window.google.payments.api.PaymentsClient({
              environment: env.ENV_NAME === 'prod' || env.ENV_NAME === 'pre-prod' ? 'PRODUCTION' : 'TEST'
            });
            _context21.next = 53;
            return braintreeGooglePayment.create({
              client: clientInstance,
              googlePayVersion: 2,
              googleMerchantId: env.GOOGLE_MERCHANT_ID
            });

          case 53:
            googlePaymentInstance = _context21.sent;
            _context21.next = 56;
            return paymentsClient.isReadyToPay({
              apiVersion: 2,
              apiVersionMinor: 0,
              allowedPaymentMethods: googlePaymentInstance.createPaymentDataRequest().allowedPaymentMethods
            });

          case 56:
            response = _context21.sent;

            if (!response.result) {
              _context21.next = 68;
              break;
            }

            paymentDataRequest = googlePaymentInstance.createPaymentDataRequest({
              transactionInfo: {
                currencyCode: 'AUD',
                totalPriceStatus: 'FINAL',
                totalPrice: amount.replace('$', '')
              }
            });
            cardPaymentMethod = paymentDataRequest.allowedPaymentMethods[0];
            cardPaymentMethod.parameters.billingAddressRequired = false;
            _context21.next = 63;
            return paymentsClient.loadPaymentData(paymentDataRequest);

          case 63:
            paymentData = _context21.sent;
            _context21.next = 66;
            return googlePaymentInstance.parseResponse(paymentData);

          case 66:
            sourceResponse = _context21.sent;
            return _context21.abrupt("return", _objectSpread$J({}, clientToken, {
              nonce: sourceResponse.nonce,
              sourceResponse: sourceResponse
            }));

          case 68:
            if (!(paymentProvider === constants.PAYMENT_PROVIDERS.APPLE_PAY)) {
              _context21.next = 77;
              break;
            }

            _context21.next = 71;
            return braintreeApplePay.create({
              client: clientInstance
            });

          case 71:
            applePayInstance = _context21.sent;
            paymentRequest = applePayInstance.createPaymentRequest({
              total: {
                label: 'Medipass Payment',
                amount: amount.replace('$', '')
              }
            }); // @ts-expect-error TS(2339): Property 'ApplePaySession' does not exist on type ... Remove this comment to see the full error message

            _context21.next = 75;
            return window.ApplePaySession.canMakePaymentsWithActiveCard(applePayInstance.merchantIdentifier);

          case 75:
            canMakeApplePayment = _context21.sent;
            return _context21.abrupt("return", _objectSpread$J({}, clientToken, {
              applePayInstance: applePayInstance,
              canMakeApplePayment: canMakeApplePayment,
              paymentRequest: paymentRequest
            }));

          case 77:
            return _context21.abrupt("return", clientToken);

          case 78:
          case "end":
            return _context21.stop();
        }
      }
    }, _callee21);
  }));

  return function getNonce(_x67, _x68) {
    return _ref22.apply(this, arguments);
  };
}();

var payments = /*#__PURE__*/Object.freeze({
  __proto__: null,
  createAccountPaymentMethod: createAccountPaymentMethod,
  createBusinessPaymentMethod: createBusinessPaymentMethod,
  createBusinessPatientPaymentMethod: createBusinessPatientPaymentMethod,
  deleteAccountPaymentMethod: deleteAccountPaymentMethod,
  deleteBusinessPaymentMethod: deleteBusinessPaymentMethod,
  deleteBusinessPatientPaymentMethod: deleteBusinessPatientPaymentMethod,
  getAccountPaymentMethods: getAccountPaymentMethods,
  getBusinessPaymentMethods: getBusinessPaymentMethods,
  getBusinessPatientPaymentMethods: getBusinessPatientPaymentMethods,
  getBusinessPatientPaymentMethodsByRefId: getBusinessPatientPaymentMethodsByRefId,
  getAccountPaymentMethod: getAccountPaymentMethod,
  getBusinessPaymentMethod: getBusinessPaymentMethod,
  getBusinessPatientPaymentMethod: getBusinessPatientPaymentMethod,
  getBusinessClientToken: getBusinessClientToken,
  getBusinessPaymentClientToken: getBusinessPaymentClientToken,
  getBusinessSalesClientToken: getBusinessSalesClientToken,
  getClientToken: getClientToken,
  updateAccountPaymentMethod: updateAccountPaymentMethod,
  updateBusinessPaymentMethod: updateBusinessPaymentMethod,
  updateBusinessPatientPaymentMethod: updateBusinessPatientPaymentMethod,
  getPaymentGatewayError: getPaymentGatewayError,
  getNonce: getNonce
});

function ownKeys$K(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$K(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$K(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$K(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var pathBusinessPmsPractices = function pathBusinessPmsPractices(businessId) {
  return "/businesses/" + businessId + "/pmspractices";
};

var pathBusinessPmsServices = function pathBusinessPmsServices(businessId) {
  return "/businesses/" + businessId + "/pmsservices";
};

var pathBusinessPmsStaffMembers = function pathBusinessPmsStaffMembers(businessId) {
  return "/businesses/" + businessId + "/pmsstaff";
};
/**
 * Get business PMS practices
 * @param {String} businessId - Business ID
 * @param {String} query - Query parameters
 * @param {Object} opts - Additional options
 */


var getBusinessPMSPractices = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(businessId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId
            }, opts.hyperMediaEndpoint);
            return _context.abrupt("return", request(_objectSpread$K({}, opts, {
              path: pathBusinessPmsPractices(businessId)
            }), {
              method: 'get',
              params: query
            }));

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function getBusinessPMSPractices(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * Get business PMS services
 * @param {String} businessId - Business ID
 * @param {String} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getBusinessPMSServices = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(businessId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId
            }, opts.hyperMediaEndpoint);
            return _context2.abrupt("return", request(_objectSpread$K({}, opts, {
              path: pathBusinessPmsServices(businessId)
            }), {
              method: 'get',
              params: query
            }));

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function getBusinessPMSServices(_x4, _x5, _x6) {
    return _ref2.apply(this, arguments);
  };
}();
/**
 * Get business PMS staff
 * @param {String} businessId - Business ID
 * @param {String} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getBusinessPMSStaffMembers = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(businessId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId
            }, opts.hyperMediaEndpoint);
            return _context3.abrupt("return", request(_objectSpread$K({}, opts, {
              path: pathBusinessPmsStaffMembers(businessId)
            }), {
              method: 'get',
              params: query
            }));

          case 4:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function getBusinessPMSStaffMembers(_x7, _x8, _x9) {
    return _ref3.apply(this, arguments);
  };
}();
/**
 * Import business PMS practice
 * @param {String} businessId - Business ID
 * @param {String} body - Request body
 * @param {Object} opts - Additional options
 */

var importBusinessPMSPractice = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(businessId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId
            }, opts.hyperMediaEndpoint);
            return _context4.abrupt("return", request(_objectSpread$K({}, opts, {
              path: pathBusinessPmsPractices(businessId) + "/import"
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));

  return function importBusinessPMSPractice(_x10, _x11, _x12) {
    return _ref4.apply(this, arguments);
  };
}();
/**
 * Import business PMS service
 * @param {String} businessId - Business ID
 * @param {String} body - Request body
 * @param {Object} opts - Additional options
 */

var importBusinessPMSService = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(businessId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId
            }, opts.hyperMediaEndpoint);
            return _context5.abrupt("return", request(_objectSpread$K({}, opts, {
              path: pathBusinessPmsServices(businessId) + "/import"
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));

  return function importBusinessPMSService(_x13, _x14, _x15) {
    return _ref5.apply(this, arguments);
  };
}();
/**
 * Import business PMS staff member
 * @param {String} businessId - Business ID
 * @param {String} body - Request body
 * @param {Object} opts - Additional options
 */

var importBusinessPMSStaffMember = /*#__PURE__*/function () {
  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(businessId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId
            }, opts.hyperMediaEndpoint);
            return _context6.abrupt("return", request(_objectSpread$K({}, opts, {
              path: pathBusinessPmsStaffMembers(businessId) + "/import"
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));

  return function importBusinessPMSStaffMember(_x16, _x17, _x18) {
    return _ref6.apply(this, arguments);
  };
}();

var pms = /*#__PURE__*/Object.freeze({
  __proto__: null,
  getBusinessPMSPractices: getBusinessPMSPractices,
  getBusinessPMSServices: getBusinessPMSServices,
  getBusinessPMSStaffMembers: getBusinessPMSStaffMembers,
  importBusinessPMSPractice: importBusinessPMSPractice,
  importBusinessPMSService: importBusinessPMSService,
  importBusinessPMSStaffMember: importBusinessPMSStaffMember
});

function ownKeys$L(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$L(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$L(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$L(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var pathLinkPracticeProfile = function pathLinkPracticeProfile(practiceProfileId) {
  return "/practiceprofiles/" + practiceProfileId + "/link";
};
var pathOrganisationPracticeProfiles = function pathOrganisationPracticeProfiles(organisationId) {
  return "/organisations/" + organisationId + "/practiceprofiles";
};
var pathPracticeProfile = function pathPracticeProfile(practiceProfileId) {
  return "/practiceprofiles/" + practiceProfileId;
};
var pathUnlinkPracticeProfile = function pathUnlinkPracticeProfile(practiceProfileId) {
  return "/practiceprofiles/" + practiceProfileId + "/unlink";
};
var getOrganisationPracticeProfiles = function getOrganisationPracticeProfiles(organisationId, query, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    organisationId: organisationId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$L({}, opts, {
    path: pathOrganisationPracticeProfiles(organisationId)
  }), {
    method: 'get',
    params: query
  });
};
var getPracticeProfile = function getPracticeProfile(practiceProfileId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    practiceProfileId: practiceProfileId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$L({}, opts, {
    path: pathPracticeProfile(practiceProfileId)
  }), {
    method: 'get'
  });
};
var linkPracticeProfile = function linkPracticeProfile(practiceProfileId, practiceId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    practiceProfileId: practiceProfileId,
    practiceId: practiceId
  }, opts.hyperMediaEndpoint);
  var body = {
    practiceId: practiceId
  };
  return request(_objectSpread$L({}, opts, {
    path: pathLinkPracticeProfile(practiceProfileId)
  }), {
    method: 'put',
    data: body
  });
};
var unlinkPracticeProfile = function unlinkPracticeProfile(practiceProfileId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    practiceProfileId: practiceProfileId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$L({}, opts, {
    path: pathUnlinkPracticeProfile(practiceProfileId)
  }), {
    method: 'put'
  });
};

var practiceProfiles = /*#__PURE__*/Object.freeze({
  __proto__: null,
  pathLinkPracticeProfile: pathLinkPracticeProfile,
  pathOrganisationPracticeProfiles: pathOrganisationPracticeProfiles,
  pathPracticeProfile: pathPracticeProfile,
  pathUnlinkPracticeProfile: pathUnlinkPracticeProfile,
  getOrganisationPracticeProfiles: getOrganisationPracticeProfiles,
  getPracticeProfile: getPracticeProfile,
  linkPracticeProfile: linkPracticeProfile,
  unlinkPracticeProfile: unlinkPracticeProfile
});

function ownKeys$M(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$M(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$M(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$M(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var pathBusinessFormPractices = function pathBusinessFormPractices(businessId, formId) {
  return "/businesses/" + businessId + "/forms/" + formId + "/practices";
};

var pathBusinessPractices = function pathBusinessPractices(businessId) {
  return "/businesses/" + businessId + "/practices";
};

var pathBusinessPractice = function pathBusinessPractice(businessId, practiceId) {
  return "/businesses/" + businessId + "/practices/" + practiceId;
};

var pathBusinessPracticeUploadUrl = function pathBusinessPracticeUploadUrl(businessId, practiceId) {
  return "/businesses/" + businessId + "/practices/" + practiceId + "/uploadurlv2";
};

var pathOnboardingPractices = function pathOnboardingPractices() {
  return '/practices/onboarding/search';
};

var pathOrganisationPractices = function pathOrganisationPractices(organisationId) {
  return "/organisations/" + organisationId + "/practices";
};

var pathOrganisationPractice = function pathOrganisationPractice(organisationId, practiceId) {
  return "/organisations/" + organisationId + "/practices/" + practiceId;
};

var pathPractice = function pathPractice(practiceId) {
  return "/practices/" + practiceId;
};

var pathGetPracticesWithApprovedApplications = function pathGetPracticesWithApprovedApplications(businessId, formId) {
  return "/businesses/" + businessId + "/forms/" + formId + "/practices/approved";
};

var pathBusinessStaffPractices = function pathBusinessStaffPractices(businessId, staffId) {
  return "/businesses/" + businessId + "/staff/" + staffId + "/practices";
};
/**
 * Create business practice
 * @param {String} businessId - Business ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */


var createBusinessPractice = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(businessId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId
            }, opts.hyperMediaEndpoint);
            return _context.abrupt("return", request(_objectSpread$M({}, opts, {
              path: pathBusinessPractices(businessId)
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function createBusinessPractice(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * Create organisation practice
 * @param {String} organisationId - Organisation ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var createOrganisationPractice = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(organisationId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              organisationId: organisationId
            }, opts.hyperMediaEndpoint);
            return _context2.abrupt("return", request(_objectSpread$M({}, opts, {
              path: pathOrganisationPractices(organisationId)
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function createOrganisationPractice(_x4, _x5, _x6) {
    return _ref2.apply(this, arguments);
  };
}();
/**
 * Delete business practice
 * @param {String} businessId - Business ID
 * @param {String} practiceId - Practice ID
 * @param {Object} opts - Additional options
 */

var deleteBusinessPractice = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(businessId, practiceId, opts) {
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              practiceId: practiceId
            }, opts.hyperMediaEndpoint);
            return _context3.abrupt("return", request(_objectSpread$M({}, opts, {
              path: pathBusinessPractice(businessId, practiceId)
            }), {
              method: 'delete'
            }));

          case 3:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function deleteBusinessPractice(_x7, _x8, _x9) {
    return _ref3.apply(this, arguments);
  };
}();
/**
 * Delete organisation practice
 * @param {String} organisationId - Organisation ID
 * @param {String} practiceId - Practice ID
 * @param {Object} opts - Additional options
 */

var deleteOrganisationPractice = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(organisationId, practiceId, opts) {
    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              organisationId: organisationId,
              practiceId: practiceId
            }, opts.hyperMediaEndpoint);
            return _context4.abrupt("return", request(_objectSpread$M({}, opts, {
              path: pathOrganisationPractice(organisationId, practiceId)
            }), {
              method: 'delete'
            }));

          case 3:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));

  return function deleteOrganisationPractice(_x10, _x11, _x12) {
    return _ref4.apply(this, arguments);
  };
}();
/**
 * Get business practice
 * @param {String} businessId - Business ID
 * @param {String} practiceId - Practice ID
 * @param {Object} opts - Additional options
 */

var getBusinessPractice = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(businessId, practiceId, opts) {
    return _regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              practiceId: practiceId
            }, opts.hyperMediaEndpoint);
            return _context5.abrupt("return", request(_objectSpread$M({}, opts, {
              path: pathBusinessPractice(businessId, practiceId)
            }), {
              method: 'get'
            }));

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));

  return function getBusinessPractice(_x13, _x14, _x15) {
    return _ref5.apply(this, arguments);
  };
}();
/**
 * Get business practices
 * @param {String} businessId - Business ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getBusinessPractices = /*#__PURE__*/function () {
  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(businessId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId
            }, opts.hyperMediaEndpoint);
            return _context6.abrupt("return", request(_objectSpread$M({}, opts, {
              path: pathBusinessPractices(businessId)
            }), {
              method: 'get',
              params: query
            }));

          case 4:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));

  return function getBusinessPractices(_x16, _x17, _x18) {
    return _ref6.apply(this, arguments);
  };
}();
/**
 * Get business form practices
 * @param {String} businessId - Business ID
 * @param {String} formId - Form ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getBusinessFormPractices = /*#__PURE__*/function () {
  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(businessId, formId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              formId: formId
            }, opts.hyperMediaEndpoint);
            return _context7.abrupt("return", request(_objectSpread$M({}, opts, {
              path: pathBusinessFormPractices(businessId, formId)
            }), {
              method: 'get',
              params: query
            }));

          case 4:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));

  return function getBusinessFormPractices(_x19, _x20, _x21, _x22) {
    return _ref7.apply(this, arguments);
  };
}();
/**
 * Get business practice upload urls
 * @param {String} businessId - Business ID
 * @param {String} practiceId - Practice ID
 * @param {String} contentType - Mime type
 * @param {Object} opts - Additional options
 */

var getBusinessPracticeUploadUrl = /*#__PURE__*/function () {
  var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(businessId, practiceId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              practiceId: practiceId,
              query: query
            }, opts.hyperMediaEndpoint);
            return _context8.abrupt("return", request(_objectSpread$M({}, opts, {
              path: pathBusinessPracticeUploadUrl(businessId, practiceId)
            }), {
              method: 'get',
              params: query
            }));

          case 3:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  }));

  return function getBusinessPracticeUploadUrl(_x23, _x24, _x25, _x26) {
    return _ref8.apply(this, arguments);
  };
}();
/**
 * Get business staff practices
 * @param {String} businessId - Business ID
 * @param {String} staffId - Staff ID
 * @param {Object} opts - Additional options
 */

var getBusinessStaffPractices = /*#__PURE__*/function () {
  var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(businessId, staffId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              staffId: staffId
            }, opts.hyperMediaEndpoint);
            return _context9.abrupt("return", request(_objectSpread$M({}, opts, {
              path: pathBusinessStaffPractices(businessId, staffId)
            }), {
              method: 'get',
              params: query
            }));

          case 4:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));

  return function getBusinessStaffPractices(_x27, _x28, _x29, _x30) {
    return _ref9.apply(this, arguments);
  };
}();
/**
 * Get organisation practices
 * @param {String} organisationId - Organisation ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getOrganisationPractices = /*#__PURE__*/function () {
  var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(organisationId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              organisationId: organisationId
            }, opts.hyperMediaEndpoint);
            return _context10.abrupt("return", request(_objectSpread$M({}, opts, {
              path: pathOrganisationPractices(organisationId)
            }), {
              method: 'get',
              params: query
            }));

          case 4:
          case "end":
            return _context10.stop();
        }
      }
    }, _callee10);
  }));

  return function getOrganisationPractices(_x31, _x32, _x33) {
    return _ref10.apply(this, arguments);
  };
}(); // DEPRECATED: Use getBusinessPractice instead.

/**
 * Get practice
 * @param {String} practiceId - Practice ID
 * @param {Object} opts - Additional options
 */

var getPractice = /*#__PURE__*/function () {
  var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(practiceId, opts) {
    return _regeneratorRuntime.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              practiceId: practiceId
            }, opts.hyperMediaEndpoint);
            return _context11.abrupt("return", request(_objectSpread$M({}, opts, {
              path: pathPractice(practiceId)
            }), {
              method: 'get'
            }));

          case 3:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));

  return function getPractice(_x34, _x35) {
    return _ref11.apply(this, arguments);
  };
}();
/**
 * Request to claim a practice
 * @param {String} practiceId - Practice ID
 * @param {Object} opts - Additional options
 */

var requestClaimPractice = function requestClaimPractice(practiceId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  return request(_objectSpread$M({}, opts, {
    path: pathPractice(practiceId) + "/verify/request"
  }), {
    method: 'post'
  });
};
/**
 * Request to add provider to practice
 * @param {String} practiceId - Practice ID
 * @param {String} providerNumber - Provider number
 * @param {Object} opts - Additional options
 */

var requestToAddProviderToPractice = function requestToAddProviderToPractice(practiceId, providerNumber, opts) {
  if (opts === void 0) {
    opts = {};
  }

  return request(_objectSpread$M({}, opts, {
    path: pathPractice(practiceId) + "/access/request"
  }), {
    method: 'post',
    data: {
      providerNumber: providerNumber
    }
  });
};
/**
 * Search practices for onboarding
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var searchOnboardingPractices = function searchOnboardingPractices(query, opts) {
  if (query === void 0) {
    query = {};
  }

  if (opts === void 0) {
    opts = {};
  }

  return request(_objectSpread$M({}, opts, {
    path: pathOnboardingPractices()
  }), {
    method: 'get',
    params: query
  });
};
/**
 * Update business practice
 * @param {String} businessId - Business ID
 * @param {String} practiceId - Practice ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var updateBusinessPractice = /*#__PURE__*/function () {
  var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(businessId, practiceId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee12$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              practiceId: practiceId
            }, opts.hyperMediaEndpoint);
            return _context12.abrupt("return", request(_objectSpread$M({}, opts, {
              path: pathBusinessPractice(businessId, practiceId)
            }), {
              method: 'put',
              data: body
            }));

          case 3:
          case "end":
            return _context12.stop();
        }
      }
    }, _callee12);
  }));

  return function updateBusinessPractice(_x36, _x37, _x38, _x39) {
    return _ref12.apply(this, arguments);
  };
}();
/**
 * Update organisation practice
 * @param {String} organisationId - Organisation ID
 * @param {String} practiceId - Practice ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var updateOrganisationPractice = /*#__PURE__*/function () {
  var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(organisationId, practiceId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee13$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              organisationId: organisationId,
              practiceId: practiceId
            }, opts.hyperMediaEndpoint);
            return _context13.abrupt("return", request(_objectSpread$M({}, opts, {
              path: pathOrganisationPractice(organisationId, practiceId)
            }), {
              method: 'put',
              data: body
            }));

          case 3:
          case "end":
            return _context13.stop();
        }
      }
    }, _callee13);
  }));

  return function updateOrganisationPractice(_x40, _x41, _x42, _x43) {
    return _ref13.apply(this, arguments);
  };
}();
/**
 * Verify a claim to a practice
 * @param {String} practiceId - Practice ID
 * @param {String} otkCode - One time token
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var verifyClaimPractice = function verifyClaimPractice(practiceId, otkCode, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  return request(_objectSpread$M({}, opts, {
    path: pathPractice(practiceId) + "/verify"
  }), {
    method: 'post',
    data: _objectSpread$M({}, body, {
      otkCode: otkCode
    })
  });
};
/**
 * Clone practice into another business
 * @param {String} practiceId - Practice ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var clonePracticeIntoBusiness = /*#__PURE__*/function () {
  var _ref14 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(practiceId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee14$(_context14) {
      while (1) {
        switch (_context14.prev = _context14.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              practiceId: practiceId
            }, opts.hyperMediaEndpoint);
            return _context14.abrupt("return", request(_objectSpread$M({}, opts, {
              path: pathPractice(practiceId) + "/clone"
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context14.stop();
        }
      }
    }, _callee14);
  }));

  return function clonePracticeIntoBusiness(_x44, _x45, _x46) {
    return _ref14.apply(this, arguments);
  };
}();
/**
 * Get practices with approved applications
 * @param {String} businessId - business ID
 * @param {String} formId - Form ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getPracticesWithApprovedApplications = /*#__PURE__*/function () {
  var _ref15 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(businessId, formId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee15$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              formId: formId
            }, opts.hyperMediaEndpoint);
            return _context15.abrupt("return", request(_objectSpread$M({}, opts, {
              path: pathGetPracticesWithApprovedApplications(businessId, formId)
            }), {
              method: 'get',
              params: query
            }));

          case 4:
          case "end":
            return _context15.stop();
        }
      }
    }, _callee15);
  }));

  return function getPracticesWithApprovedApplications(_x47, _x48, _x49, _x50) {
    return _ref15.apply(this, arguments);
  };
}();

var practices = /*#__PURE__*/Object.freeze({
  __proto__: null,
  createBusinessPractice: createBusinessPractice,
  createOrganisationPractice: createOrganisationPractice,
  deleteBusinessPractice: deleteBusinessPractice,
  deleteOrganisationPractice: deleteOrganisationPractice,
  getBusinessPractice: getBusinessPractice,
  getBusinessPractices: getBusinessPractices,
  getBusinessFormPractices: getBusinessFormPractices,
  getBusinessPracticeUploadUrl: getBusinessPracticeUploadUrl,
  getBusinessStaffPractices: getBusinessStaffPractices,
  getOrganisationPractices: getOrganisationPractices,
  getPractice: getPractice,
  requestClaimPractice: requestClaimPractice,
  requestToAddProviderToPractice: requestToAddProviderToPractice,
  searchOnboardingPractices: searchOnboardingPractices,
  updateBusinessPractice: updateBusinessPractice,
  updateOrganisationPractice: updateOrganisationPractice,
  verifyClaimPractice: verifyClaimPractice,
  clonePracticeIntoBusiness: clonePracticeIntoBusiness,
  getPracticesWithApprovedApplications: getPracticesWithApprovedApplications
});

function ownKeys$N(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$N(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$N(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$N(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var PATH__PRACTICE_TYPES = '/practicetypes';
/**
 * Get practice types
 * @param {Object} opts - Additional options
 */

var getPracticeTypes = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(opts) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            return _context.abrupt("return", request(_objectSpread$N({}, opts, {
              path: PATH__PRACTICE_TYPES
            }), {
              method: 'get'
            }));

          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function getPracticeTypes(_x) {
    return _ref.apply(this, arguments);
  };
}();

var practiceTypes = /*#__PURE__*/Object.freeze({
  __proto__: null,
  getPracticeTypes: getPracticeTypes
});

function ownKeys$O(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$O(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$O(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$O(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var pathBusinessProducts = function pathBusinessProducts(businessId) {
  return "/businesses/" + businessId + "/products";
};
var pathBusinessProduct = function pathBusinessProduct(businessId, productId) {
  return "/businesses/" + businessId + "/products/" + productId;
};
/**
 * Get products
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getProducts = function getProducts(query, opts) {
  if (opts === void 0) {
    opts = {};
  }

  return request(_objectSpread$O({}, opts, {
    path: '/products'
  }), {
    method: 'get',
    params: query
  });
};
/**
 * Get business products
 * @param {String} businessId - Business ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getBusinessProducts = function getBusinessProducts(businessId, query, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  });
  return request(_objectSpread$O({}, opts, {
    path: pathBusinessProducts(businessId)
  }), {
    method: 'get',
    params: query
  });
};
/**
 * Get business product
 * @param {String} businessId - Business ID
 * @param {String} productId - Product ID
 * @param {Object} opts - Additional options
 */

var getBusinessProduct = function getBusinessProduct(businessId, productId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId,
    productId: productId
  });
  return request(_objectSpread$O({}, opts, {
    path: pathBusinessProduct(businessId, productId)
  }), {
    method: 'get'
  });
};

var products = /*#__PURE__*/Object.freeze({
  __proto__: null,
  pathBusinessProducts: pathBusinessProducts,
  pathBusinessProduct: pathBusinessProduct,
  getProducts: getProducts,
  getBusinessProducts: getBusinessProducts,
  getBusinessProduct: getBusinessProduct
});

function ownKeys$P(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$P(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$P(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$P(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var pathBusinessProfessionalCategories = function pathBusinessProfessionalCategories(businessId) {
  return "/businesses/" + businessId + "/professionalcategories";
};
var pathProfessionalCategories = '/professionalcategories';
var pathProfessionalCategory = function pathProfessionalCategory(professionalCategoryId) {
  return "/professionalcategories/" + professionalCategoryId;
};
/**
 * Get professional categories
 * @param {Object} opts - Query parameters
 * @param {Object} opts - Additional options
 */

var getProfessionalCategories = function getProfessionalCategories(query, opts) {
  if (opts === void 0) {
    opts = {};
  }

  return request(_objectSpread$P({}, opts, {
    path: pathProfessionalCategories
  }), {
    method: 'get',
    params: query
  });
};
/**
 * Get business professional categories
 * @param {Object} businessId - Business ID
 * @param {Object} opts - Query parameters
 * @param {Object} opts - Additional options
 */

var getBusinessProfessionalCategories = function getBusinessProfessionalCategories(businessId, query, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  });
  return request(_objectSpread$P({}, opts, {
    path: pathBusinessProfessionalCategories(businessId)
  }), {
    method: 'get',
    params: query
  });
};
/**
 * Get professional category
 * @param {Object} professionalCategoryId - Professional category ID
 * @param {Object} opts - Additional options
 */

var getProfessionalCategory = function getProfessionalCategory(professionalCategoryId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    professionalCategoryId: professionalCategoryId
  });
  return request(_objectSpread$P({}, opts, {
    path: pathProfessionalCategory(professionalCategoryId)
  }), {
    method: 'get'
  });
};

var professionalCategories = /*#__PURE__*/Object.freeze({
  __proto__: null,
  pathBusinessProfessionalCategories: pathBusinessProfessionalCategories,
  pathProfessionalCategories: pathProfessionalCategories,
  pathProfessionalCategory: pathProfessionalCategory,
  getProfessionalCategories: getProfessionalCategories,
  getBusinessProfessionalCategories: getBusinessProfessionalCategories,
  getProfessionalCategory: getProfessionalCategory
});

function ownKeys$Q(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$Q(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$Q(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$Q(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var pathBusinessProviderRequests = function pathBusinessProviderRequests(businessId) {
  return "/businesses/" + businessId + "/providerrequests";
};

var pathBusinessPracticeStaffMemberProviderRequest = function pathBusinessPracticeStaffMemberProviderRequest(businessId, practiceId, staffId) {
  return "/businesses/" + businessId + "/practices/" + practiceId + "/staff/" + staffId + "/providerrequests";
};
/**
 * Create providerRequest
 * @param {string} businessId - Business ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */


var createProviderRequest = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(businessId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId
            }, opts.hyperMediaEndpoint);
            return _context.abrupt("return", request(_objectSpread$Q({}, opts, {
              path: pathBusinessProviderRequests(businessId)
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function createProviderRequest(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * Request a staff member provider number to be enabled
 * @param {string} businessId - Business ID
 * @param {string} practiceId - Practice ID
 * @param {string} staffId - Staff ID
 * @param {string} providerNumber - ProviderNumber
 * @param {Object} opts - Additional options
 */

var requestBusinessPracticeStaffMemberProviderNumberToBeEnabled = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(businessId, practiceId, staffId, providerNumber, opts) {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId
            }, opts.hyperMediaEndpoint);
            return _context2.abrupt("return", request(_objectSpread$Q({}, opts, {
              path: pathBusinessPracticeStaffMemberProviderRequest(businessId, practiceId, staffId)
            }), {
              method: 'post',
              data: {
                providerNumber: providerNumber
              }
            }));

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function requestBusinessPracticeStaffMemberProviderNumberToBeEnabled(_x4, _x5, _x6, _x7, _x8) {
    return _ref2.apply(this, arguments);
  };
}();

var providerRequests = /*#__PURE__*/Object.freeze({
  __proto__: null,
  createProviderRequest: createProviderRequest,
  requestBusinessPracticeStaffMemberProviderNumberToBeEnabled: requestBusinessPracticeStaffMemberProviderNumberToBeEnabled
});

function ownKeys$R(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$R(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$R(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$R(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var pathGetProviderRegistrationTypes = '/providerregistrationtypes';
var pathGetProviderRegistrationType = function pathGetProviderRegistrationType(providerRegistrationTypeId) {
  return "/providerregistrationtypes/" + providerRegistrationTypeId;
};
/**
 * Get provider registration types
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getProviderRegistrationTypes = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(query, opts) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            return _context.abrupt("return", request(_objectSpread$R({}, opts, {
              path: pathGetProviderRegistrationTypes
            }), {
              method: 'get',
              params: query
            }));

          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function getProviderRegistrationTypes(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * Get a provider registration type
 * @param {String} providerRegistrationTypeId - Provider registration type ID
 * @param {Object} opts - Additional options
 */

var getProviderRegistrationType = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(providerRegistrationTypeId, opts) {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            return _context2.abrupt("return", request(_objectSpread$R({}, opts, {
              path: pathGetProviderRegistrationType(providerRegistrationTypeId)
            }), {
              method: 'get'
            }));

          case 2:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function getProviderRegistrationType(_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();

var providerRegistrationTypes = /*#__PURE__*/Object.freeze({
  __proto__: null,
  pathGetProviderRegistrationTypes: pathGetProviderRegistrationTypes,
  pathGetProviderRegistrationType: pathGetProviderRegistrationType,
  getProviderRegistrationTypes: getProviderRegistrationTypes,
  getProviderRegistrationType: getProviderRegistrationType
});

function ownKeys$S(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$S(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$S(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$S(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var pathProviderNumberTypes = function pathProviderNumberTypes() {
  return "/providernumbertypes";
};
var pathProviderNumberType = function pathProviderNumberType(providerNumberTypeId) {
  return "/providernumbertypes/" + providerNumberTypeId;
};
/**
 * Get provider number types
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getProviderNumberTypes = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(query, opts) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            return _context.abrupt("return", request(_objectSpread$S({}, opts, {
              path: pathProviderNumberTypes()
            }), {
              method: 'get',
              params: query
            }));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function getProviderNumberTypes(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * Get provider number type
 * @param {String} providerNumberTypeId - Provider number type ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getProviderNumberType = function getProviderNumberType(providerNumberTypeId, query, opts) {
  if (query === void 0) {
    query = {};
  }

  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    providerNumberTypeId: providerNumberTypeId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$S({}, opts, {
    path: pathProviderNumberType(providerNumberTypeId)
  }), {
    method: 'get',
    params: query
  });
};

var providerNumberTypes = /*#__PURE__*/Object.freeze({
  __proto__: null,
  pathProviderNumberTypes: pathProviderNumberTypes,
  pathProviderNumberType: pathProviderNumberType,
  getProviderNumberTypes: getProviderNumberTypes,
  getProviderNumberType: getProviderNumberType
});

function ownKeys$T(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$T(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$T(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$T(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var PATH__PROVIDER_TYPES = '/providertypes';
/**
 * Get provider types
 * @param {Object} opts - Additional options
 */

var getProviderTypes = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(opts) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            return _context.abrupt("return", request(_objectSpread$T({}, opts, {
              path: PATH__PROVIDER_TYPES
            }), {
              method: 'get'
            }));

          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function getProviderTypes(_x) {
    return _ref.apply(this, arguments);
  };
}();

var providerTypes = /*#__PURE__*/Object.freeze({
  __proto__: null,
  getProviderTypes: getProviderTypes
});

function ownKeys$U(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$U(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$U(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$U(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var PATH__REF_SOURCES = '/refsources';
var getRefSources = function getRefSources(query, opts) {
  if (opts === void 0) {
    opts = {};
  }

  return request(_objectSpread$U({}, opts, {
    path: PATH__REF_SOURCES
  }), {
    method: 'get',
    params: query
  });
};

var refSources = /*#__PURE__*/Object.freeze({
  __proto__: null,
  PATH__REF_SOURCES: PATH__REF_SOURCES,
  getRefSources: getRefSources
});

function ownKeys$V(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$V(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$V(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$V(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var PATH__TRANSACTIONS = '/transaction';
/**
 * Get risk score
 * @param {String} transactionId - Get a transaction risk score
 * @param {Object} opts - Additional options
 */

var getTransactionRiskScore = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(transactionId, opts) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              transactionId: transactionId
            }, opts.hyperMediaEndpoint);
            return _context.abrupt("return", request(_objectSpread$V({}, opts, {
              apiName: 'risk',
              path: PATH__TRANSACTIONS + "/risk/" + transactionId
            }), {
              method: 'get'
            }));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function getTransactionRiskScore(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * Score and save a transaction
 * @param {String} body - Request body
 * @param {Object} opts - Additional options
 */

var scoreAndSaveTransaction = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(body, opts) {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            return _context2.abrupt("return", request(_objectSpread$V({}, opts, {
              apiName: 'risk',
              path: PATH__TRANSACTIONS
            }), {
              method: 'post',
              data: body
            }));

          case 2:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function scoreAndSaveTransaction(_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();

var risk = /*#__PURE__*/Object.freeze({
  __proto__: null,
  getTransactionRiskScore: getTransactionRiskScore,
  scoreAndSaveTransaction: scoreAndSaveTransaction
});

function ownKeys$W(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$W(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$W(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$W(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var pathHealthFundRNAs = function pathHealthFundRNAs(healthFundId) {
  return "/healthfunds/" + healthFundId + "/rnas";
};
var pathHealthFundRNA = function pathHealthFundRNA(healthFundId, rnaId) {
  return "/healthfunds/" + healthFundId + "/rnas/" + rnaId;
};
var pathHealthFundRNAAppointments = function pathHealthFundRNAAppointments(healthFundId, rnaId) {
  return "/healthfunds/" + healthFundId + "/rnas/" + rnaId + "/rnaappointments";
};
var pathHealthFundRNAAppointment = function pathHealthFundRNAAppointment(healthFundId, rnaId, rnaAppointmentId) {
  return "/healthfunds/" + healthFundId + "/rnas/" + rnaId + "/rnaappointments/" + rnaAppointmentId;
};
var pathBusinessesRNAs = function pathBusinessesRNAs(businessId) {
  return "/businesses/" + businessId + "/rnas";
};
var pathBusinessRNA = function pathBusinessRNA(businessId, rnaId) {
  return "/businesses/" + businessId + "/rnas/" + rnaId;
};
/**
 * Get businesses Requests and Appointments
 * @param {String} businessId - Business ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getBusinessRNAs = function getBusinessRNAs(businessId, query, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$W({}, opts, {
    path: pathBusinessesRNAs(businessId)
  }), {
    method: 'get',
    params: query
  });
};
/**
 * Get business Requests and Appointments
 * @param {String} businessId - Business ID
 * @param {String} rnaId - RNA ID
 * @param {Object} opts - Additional options
 */

var getBusinessRNA = function getBusinessRNA(businessId, rnaId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId,
    rnaId: rnaId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$W({}, opts, {
    path: "" + pathBusinessRNA(businessId, rnaId)
  }), {
    method: 'get'
  });
};
/**
 * Check if dan and epId is valid
 * @param {String} businessId - Business ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var checkRNAExists = function checkRNAExists(businessId, query, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$W({}, opts, {
    path: pathBusinessesRNAs(businessId) + "/exists"
  }), {
    method: 'get',
    params: query
  });
};
var createHealthFundRNA = function createHealthFundRNA(healthFundId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    healthFundId: healthFundId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$W({}, opts, {
    path: pathHealthFundRNAs(healthFundId)
  }), {
    method: 'post',
    data: body
  });
};
var createAppointmentForHealthFundRNA = function createAppointmentForHealthFundRNA(healthFundId, rnaId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    healthFundId: healthFundId,
    rnaId: rnaId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$W({}, opts, {
    path: pathHealthFundRNAAppointments(healthFundId, rnaId)
  }), {
    method: 'post',
    data: body
  });
};
var getHealthFundRNA = function getHealthFundRNA(healthFundId, rnaId, query, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    healthFundId: healthFundId,
    rnaId: rnaId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$W({}, opts, {
    path: pathHealthFundRNA(healthFundId, rnaId)
  }), {
    method: 'get',
    params: query
  });
};
var getHealthFundRNAs = function getHealthFundRNAs(healthFundId, query, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    healthFundId: healthFundId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$W({}, opts, {
    path: pathHealthFundRNAs(healthFundId)
  }), {
    method: 'get',
    params: query
  });
};
var updateAppointmentForHealthFundRNA = function updateAppointmentForHealthFundRNA(healthFundId, rnaId, rnaAppointmentId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    healthFundId: healthFundId,
    rnaId: rnaId,
    rnaAppointmentId: rnaAppointmentId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$W({}, opts, {
    path: pathHealthFundRNAAppointment(healthFundId, rnaId, rnaAppointmentId)
  }), {
    method: 'put',
    data: body
  });
};

var rnas = /*#__PURE__*/Object.freeze({
  __proto__: null,
  pathHealthFundRNAs: pathHealthFundRNAs,
  pathHealthFundRNA: pathHealthFundRNA,
  pathHealthFundRNAAppointments: pathHealthFundRNAAppointments,
  pathHealthFundRNAAppointment: pathHealthFundRNAAppointment,
  pathBusinessesRNAs: pathBusinessesRNAs,
  pathBusinessRNA: pathBusinessRNA,
  getBusinessRNAs: getBusinessRNAs,
  getBusinessRNA: getBusinessRNA,
  checkRNAExists: checkRNAExists,
  createHealthFundRNA: createHealthFundRNA,
  createAppointmentForHealthFundRNA: createAppointmentForHealthFundRNA,
  getHealthFundRNA: getHealthFundRNA,
  getHealthFundRNAs: getHealthFundRNAs,
  updateAppointmentForHealthFundRNA: updateAppointmentForHealthFundRNA
});

function ownKeys$X(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$X(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$X(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$X(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var PATH__ROLES = '/roles';
/**
 * Get roles
 * @param {Object} opts - Additional options
 */

var getRoles = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(opts) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            return _context.abrupt("return", request(_objectSpread$X({}, opts, {
              path: PATH__ROLES
            }), {
              method: 'get'
            }));

          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function getRoles(_x) {
    return _ref.apply(this, arguments);
  };
}();

var roles = /*#__PURE__*/Object.freeze({
  __proto__: null,
  getRoles: getRoles
});

function ownKeys$Y(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$Y(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$Y(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$Y(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var PATH__SELF_CHECKOUT_SESSIONS = '/selfcheckoutsessions';
/**
 * Create a self checkout session
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var createSelfCheckoutSession = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(body, opts) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            return _context.abrupt("return", request(_objectSpread$Y({}, opts, {
              path: PATH__SELF_CHECKOUT_SESSIONS
            }), {
              method: 'post',
              data: body
            }));

          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function createSelfCheckoutSession(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * Approve my self checkout session
 * @param {Object} body - request body
 * @param {Object} opts - Additional options
 */

var approve = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(body, opts) {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            return _context2.abrupt("return", request(_objectSpread$Y({}, opts, {
              path: PATH__SELF_CHECKOUT_SESSIONS + "/me/approvals"
            }), {
              method: 'post',
              data: body,
              tokenType: 'session'
            }));

          case 2:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function approve(_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();
/**
 * Cancel my self checkout session
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var cancel$1 = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(body, opts) {
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            return _context3.abrupt("return", request(_objectSpread$Y({}, opts, {
              path: PATH__SELF_CHECKOUT_SESSIONS + "/me/cancellations"
            }), {
              method: 'post',
              data: body,
              tokenType: 'session'
            }));

          case 2:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function cancel(_x5, _x6) {
    return _ref3.apply(this, arguments);
  };
}();
/**
 * Cancel my self checkout session
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var cancelSession = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(body, opts) {
    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            return _context4.abrupt("return", request(_objectSpread$Y({}, opts, {
              path: PATH__SELF_CHECKOUT_SESSIONS + "/me/cancels"
            }), {
              method: 'post',
              data: body,
              tokenType: 'session'
            }));

          case 2:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));

  return function cancelSession(_x7, _x8) {
    return _ref4.apply(this, arguments);
  };
}();
/**
 * Create invoice for my self checkout session
 * @param {Object} opts - Additional options
 */

var createMyInvoice = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(opts) {
    return _regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            return _context5.abrupt("return", request(_objectSpread$Y({}, opts, {
              path: PATH__SELF_CHECKOUT_SESSIONS + "/me/invoices"
            }), {
              method: 'post',
              tokenType: 'session'
            }));

          case 2:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));

  return function createMyInvoice(_x9) {
    return _ref5.apply(this, arguments);
  };
}();
/**
 * Create payment authority for my self checkout session
 * @param {Object} opts - Additional options
 */

var createPaymentAuthority = /*#__PURE__*/function () {
  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(opts) {
    return _regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            return _context6.abrupt("return", request(_objectSpread$Y({}, opts, {
              path: PATH__SELF_CHECKOUT_SESSIONS + "/me/paymentauthorities"
            }), {
              method: 'post',
              tokenType: 'session'
            }));

          case 2:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));

  return function createPaymentAuthority(_x10) {
    return _ref6.apply(this, arguments);
  };
}();
/**
 * Create payment method for my self checkout session
 * @param {String} nonce - Nonce
 * @param {String} source - Source of payment
 * @param {Object} opts - Additional options
 */

var createPaymentMethod = /*#__PURE__*/function () {
  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(nonce, source, opts) {
    return _regeneratorRuntime.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              nonce: nonce,
              source: source
            }, opts.hyperMediaEndpoint);
            return _context7.abrupt("return", request(_objectSpread$Y({}, opts, {
              path: PATH__SELF_CHECKOUT_SESSIONS + "/me/paymentmethods"
            }), {
              method: 'post',
              data: {
                nonce: nonce,
                source: source
              },
              tokenType: 'session'
            }));

          case 3:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));

  return function createPaymentMethod(_x11, _x12, _x13) {
    return _ref7.apply(this, arguments);
  };
}();
/**
 * Get payment methods for my self checkout session
 * @param {Object} opts - Additional options
 */

var getPaymentMethods = /*#__PURE__*/function () {
  var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(opts) {
    return _regeneratorRuntime.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            return _context8.abrupt("return", request(_objectSpread$Y({}, opts, {
              path: PATH__SELF_CHECKOUT_SESSIONS + "/me/paymentmethods"
            }), {
              method: 'get',
              tokenType: 'session'
            }));

          case 2:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  }));

  return function getPaymentMethods(_x14) {
    return _ref8.apply(this, arguments);
  };
}();
/**
 * Discover member for a self checkout session
 * @param {Object} ids - Find by ids (Accepts: `memberId` and `email`)
 * @param {Object} query - Additional query parameters
 * @param {Object} opts - Additional options
 * @returns {Object} The device data
 */

var discoverMember$1 = /*#__PURE__*/function () {
  var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(_ref9, query, opts) {
    var email, memberId, params;
    return _regeneratorRuntime.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            email = _ref9.email, memberId = _ref9.memberId;

            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              email: email,
              memberId: memberId
            }, opts.hyperMediaEndpoint, {
              atLeastOneExists: true
            });
            params = Object.assign({}, query, {
              email: email,
              memberId: memberId
            });
            return _context9.abrupt("return", request(_objectSpread$Y({}, opts, {
              path: PATH__SELF_CHECKOUT_SESSIONS + "/discovery/members"
            }), {
              method: 'get',
              params: params,
              tokenType: 'session'
            }));

          case 6:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));

  return function discoverMember(_x15, _x16, _x17) {
    return _ref10.apply(this, arguments);
  };
}();
/**
 * Check for duplicate member
 * @param {Object} body - Additional request body
 * @param {Object} opts - Additional options
 * @returns {Object} The device data
 */

var checkDupe$1 = /*#__PURE__*/function () {
  var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(body, opts) {
    return _regeneratorRuntime.wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            return _context10.abrupt("return", request(_objectSpread$Y({}, opts, {
              path: PATH__SELF_CHECKOUT_SESSIONS + "/checkdupe"
            }), {
              method: 'post',
              data: body,
              tokenType: 'session'
            }));

          case 2:
          case "end":
            return _context10.stop();
        }
      }
    }, _callee10);
  }));

  return function checkDupe(_x18, _x19) {
    return _ref11.apply(this, arguments);
  };
}();
/**
 * Get my self checkout session
 * @param {Object} opts - Additional options
 */

var getMySelfCheckoutSession = /*#__PURE__*/function () {
  var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(opts) {
    return _regeneratorRuntime.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            return _context11.abrupt("return", request(_objectSpread$Y({}, opts, {
              path: PATH__SELF_CHECKOUT_SESSIONS + "/me"
            }), {
              method: 'get',
              tokenType: 'session'
            }));

          case 2:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));

  return function getMySelfCheckoutSession(_x20) {
    return _ref12.apply(this, arguments);
  };
}();
/**
 * Get transaction for self checkout session
 * @param {Object} opts - Additional options
 */

var getMySelfCheckoutSessionTransaction = /*#__PURE__*/function () {
  var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(checkoutSessionId, opts) {
    return _regeneratorRuntime.wrap(function _callee12$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            return _context12.abrupt("return", request(_objectSpread$Y({}, opts, {
              path: PATH__SELF_CHECKOUT_SESSIONS + "/" + checkoutSessionId + "/transaction"
            }), {
              method: 'get',
              tokenType: 'session'
            }));

          case 2:
          case "end":
            return _context12.stop();
        }
      }
    }, _callee12);
  }));

  return function getMySelfCheckoutSessionTransaction(_x21, _x22) {
    return _ref13.apply(this, arguments);
  };
}();
/**
 * Remember me
 * @param {Object} opts - Additional options
 */

var rememberMe = /*#__PURE__*/function () {
  var _ref14 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(opts) {
    return _regeneratorRuntime.wrap(function _callee13$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            return _context13.abrupt("return", request(_objectSpread$Y({}, opts, {
              path: PATH__SELF_CHECKOUT_SESSIONS + "/me/rememberme"
            }), {
              method: 'post',
              tokenType: 'session'
            }));

          case 2:
          case "end":
            return _context13.stop();
        }
      }
    }, _callee13);
  }));

  return function rememberMe(_x23) {
    return _ref14.apply(this, arguments);
  };
}();
/**
 * Update my self checkout session
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var updateMySelfCheckoutSession = /*#__PURE__*/function () {
  var _ref15 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(body, opts) {
    return _regeneratorRuntime.wrap(function _callee14$(_context14) {
      while (1) {
        switch (_context14.prev = _context14.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            return _context14.abrupt("return", request(_objectSpread$Y({}, opts, {
              path: PATH__SELF_CHECKOUT_SESSIONS + "/me"
            }), {
              method: 'put',
              data: body,
              tokenType: 'session'
            }));

          case 2:
          case "end":
            return _context14.stop();
        }
      }
    }, _callee14);
  }));

  return function updateMySelfCheckoutSession(_x24, _x25) {
    return _ref15.apply(this, arguments);
  };
}();
/**
 * Request OTK for a self checkout session
 * @param {String} accountId - Account ID
 * @param {Object} opts - Additional options
 */

var requestOtk$1 = /*#__PURE__*/function () {
  var _ref16 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(accountId, opts) {
    return _regeneratorRuntime.wrap(function _callee15$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              accountId: accountId
            }, opts.hyperMediaEndpoint);
            return _context15.abrupt("return", request(_objectSpread$Y({}, opts, {
              path: PATH__SELF_CHECKOUT_SESSIONS + "/otk"
            }), {
              method: 'post',
              data: {
                accountId: accountId
              },
              tokenType: 'session'
            }));

          case 3:
          case "end":
            return _context15.stop();
        }
      }
    }, _callee15);
  }));

  return function requestOtk(_x26, _x27) {
    return _ref16.apply(this, arguments);
  };
}();
/**
 * Add a payment method to a self checkout session
 * @param {Object} body - Config for the method.
 * @param {Object} opts - Additional options
 */

var addPaymentMethodToSelfCheckoutSession = /*#__PURE__*/function () {
  var _ref17 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(body, opts) {
    var _body$data, data, selfCheckoutSession, isExistingAccount, requestBody, paymentMethod, _yield$sdk$payments$g, source, nonce, paymentMethods, newSelfCheckoutSession;

    return _regeneratorRuntime.wrap(function _callee16$(_context16) {
      while (1) {
        switch (_context16.prev = _context16.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            _body$data = body.data, data = _body$data === void 0 ? {} : _body$data, selfCheckoutSession = body.selfCheckoutSession;
            isExistingAccount = Boolean(selfCheckoutSession.accountId);
            requestBody = {};

            if (!(data.cardNumber && data.expiry && data.cvc)) {
              _context16.next = 21;
              break;
            }

            _context16.next = 7;
            return sdkClient.payments.getNonce({
              cardNumber: data.cardNumber,
              expiry: data.expiry,
              cvc: data.cvc,
              isSelfCheckoutSession: true
            });

          case 7:
            _yield$sdk$payments$g = _context16.sent;
            source = _yield$sdk$payments$g.source;
            nonce = _yield$sdk$payments$g.nonce;

            if (!isExistingAccount) {
              _context16.next = 17;
              break;
            }

            _context16.next = 13;
            return sdkClient.payments.createAccountPaymentMethod(selfCheckoutSession.accountId, nonce, source, opts);

          case 13:
            paymentMethod = _context16.sent;
            requestBody = {
              paymentMethod: {
                _id: paymentMethod._id
              }
            };
            _context16.next = 19;
            break;

          case 17:
            _context16.next = 19;
            return createPaymentMethod(nonce, source, opts);

          case 19:
            _context16.next = 31;
            break;

          case 21:
            if (!data._id) {
              _context16.next = 25;
              break;
            }

            // If a payment method id is specified, attach it to the self checkout session.
            requestBody = {
              paymentMethod: {
                _id: data._id
              }
            };
            _context16.next = 31;
            break;

          case 25:
            if (!isExistingAccount) {
              _context16.next = 31;
              break;
            }

            _context16.next = 28;
            return sdkClient.payments.getAccountPaymentMethods(selfCheckoutSession.accountId, opts);

          case 28:
            paymentMethods = _context16.sent;
            paymentMethod = paymentMethods.find(function (paymentMethod) {
              return Boolean(paymentMethod.isDefault);
            });

            if (paymentMethod) {
              requestBody = {
                paymentMethod: {
                  _id: paymentMethod._id
                }
              };
            }

          case 31:
            _context16.next = 33;
            return updateMySelfCheckoutSession(requestBody, opts);

          case 33:
            newSelfCheckoutSession = _context16.sent;
            return _context16.abrupt("return", {
              paymentMethod: paymentMethod,
              selfCheckoutSession: newSelfCheckoutSession
            });

          case 35:
          case "end":
            return _context16.stop();
        }
      }
    }, _callee16);
  }));

  return function addPaymentMethodToSelfCheckoutSession(_x28, _x29) {
    return _ref17.apply(this, arguments);
  };
}();
/**
 * Add a member to a self checkout session
 * @param {Object} body - Config for the method.
 * @param {Object} opts - Additional options
 */

var addMemberToSelfCheckoutSession = /*#__PURE__*/function () {
  var _ref18 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(body, opts) {
    var _body, _body$data2, data, _body$selfCheckoutSes, selfCheckoutSession, requestBody, _get$split, day, month, year, newSelfCheckoutSession;

    return _regeneratorRuntime.wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            if (body === void 0) {
              body = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            _body = body, _body$data2 = _body.data, data = _body$data2 === void 0 ? {} : _body$data2, _body$selfCheckoutSes = _body.selfCheckoutSession, selfCheckoutSession = _body$selfCheckoutSes === void 0 ? {} : _body$selfCheckoutSes;
            requestBody = {}; // If a member exists and there isn't already one attached to the self checkout session, then attach the member.

            if (_get(sdkClient, 'member._id') && !_get(selfCheckoutSession, 'member._id')) {
              requestBody = {
                member: {
                  _id: _get(sdkClient, 'member._id')
                }
              };
            } else {
              // Otherwise, add member manually to the self checkout session.
              _get$split = _get(data, 'dob', '').split('/'), day = _get$split[0], month = _get$split[1], year = _get$split[2];
              requestBody = {
                patient: {
                  firstName: data.firstName,
                  lastName: data.lastName,
                  email: data.email,
                  mobile: data.mobile,
                  dobString: day && month && year ? year + "-" + month + "-" + day : undefined
                }
              };
            }

            _context17.next = 7;
            return updateMySelfCheckoutSession(requestBody, opts);

          case 7:
            newSelfCheckoutSession = _context17.sent;
            return _context17.abrupt("return", {
              selfCheckoutSession: newSelfCheckoutSession
            });

          case 9:
          case "end":
            return _context17.stop();
        }
      }
    }, _callee17);
  }));

  return function addMemberToSelfCheckoutSession(_x30, _x31) {
    return _ref18.apply(this, arguments);
  };
}();
/**
 * Add a health fund account to a self checkout session
 * @param {Object} body - Config for the method.
 * @param {Object} opts - Additional options
 */

var addHealthFundAccountToSelfCheckoutSession = /*#__PURE__*/function () {
  var _ref19 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(body, opts) {
    var _body$data3, data, funder, selfCheckoutSession, isExistingAccount, memberId, healthFund, healthFundAccounts, healthFundAccountId, healthFundAccount, requestBody, healthFundAccountRequestBody, newSelfCheckoutSession;

    return _regeneratorRuntime.wrap(function _callee18$(_context18) {
      while (1) {
        switch (_context18.prev = _context18.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            _body$data3 = body.data, data = _body$data3 === void 0 ? {} : _body$data3, funder = body.funder, selfCheckoutSession = body.selfCheckoutSession;
            isExistingAccount = selfCheckoutSession.accountId;
            memberId = _get(selfCheckoutSession, 'member._id') || _get(sdkClient, 'member._id');
            healthFund = data.healthFund;

            if (!funders$1.isMedicare(funder.code)) {
              _context18.next = 9;
              break;
            }

            _context18.next = 8;
            return sdkClient.healthfunds.getMedicareHealthFund(_objectSpread$Y({}, opts, {
              requestConfig: {
                tokenType: 'session'
              }
            }));

          case 8:
            healthFund = _context18.sent;

          case 9:
            if (!isExistingAccount) {
              _context18.next = 13;
              break;
            }

            _context18.next = 12;
            return sdkClient.healthFundAccounts.getMembersHealthFundAccounts(memberId, {
              funderId: _get(funder, '_id')
            }, opts);

          case 12:
            healthFundAccounts = _context18.sent;

          case 13:
            healthFundAccountId = _get(healthFundAccounts, 'items[0]._id');
            requestBody = {}; // If health fund account data exists, then add the data to the self checkout session.

            if (!(data.membershipNumber || data.cardNumber)) {
              _context18.next = 30;
              break;
            }

            healthFundAccountRequestBody = _objectSpread$Y({
              healthFundId: _get(healthFund, '_id')
            }, data || {}); // If it's an existing account, delete their current health fund account (if any), and add the new one to their account.

            if (!isExistingAccount) {
              _context18.next = 27;
              break;
            }

            if (!healthFundAccountId) {
              _context18.next = 21;
              break;
            }

            _context18.next = 21;
            return sdkClient.healthFundAccounts.deleteMembersHealthFundAccount(memberId, healthFundAccountId, opts);

          case 21:
            _context18.next = 23;
            return sdkClient.healthFundAccounts.createMembersHealthFundAccount(memberId, healthFundAccountRequestBody, opts);

          case 23:
            healthFundAccount = _context18.sent;
            requestBody = {
              healthFundAccount: {
                _id: healthFundAccount._id
              }
            };
            _context18.next = 28;
            break;

          case 27:
            // Otherwise, just add the data to the self checkout session.
            requestBody = {
              healthFundAccount: healthFundAccountRequestBody
            };

          case 28:
            _context18.next = 40;
            break;

          case 30:
            if (!data._id) {
              _context18.next = 34;
              break;
            }

            // If a health fund account id is specified, attach it to the self checkout session.
            requestBody = {
              healthFundAccount: {
                _id: data._id
              }
            };
            _context18.next = 40;
            break;

          case 34:
            if (!isExistingAccount) {
              _context18.next = 40;
              break;
            }

            if (!healthFundAccountId) {
              _context18.next = 40;
              break;
            }

            _context18.next = 38;
            return sdkClient.healthFundAccounts.getMembersHealthFundAccount(memberId, healthFundAccountId, opts);

          case 38:
            healthFundAccount = _context18.sent;
            requestBody = {
              healthFundAccount: {
                _id: healthFundAccount._id
              }
            };

          case 40:
            _context18.next = 42;
            return updateMySelfCheckoutSession(requestBody, opts);

          case 42:
            newSelfCheckoutSession = _context18.sent;
            return _context18.abrupt("return", {
              healthFundAccount: healthFundAccount,
              selfCheckoutSession: newSelfCheckoutSession
            });

          case 44:
          case "end":
            return _context18.stop();
        }
      }
    }, _callee18);
  }));

  return function addHealthFundAccountToSelfCheckoutSession(_x32, _x33) {
    return _ref19.apply(this, arguments);
  };
}();
/**
 * Delete payment method
 * @param {String} paymentMethodId - Payment method ID
 * @param {Object} opts - Additional options
 */

var deletePaymentMethod = /*#__PURE__*/function () {
  var _ref20 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(paymentMethodId, opts) {
    return _regeneratorRuntime.wrap(function _callee19$(_context19) {
      while (1) {
        switch (_context19.prev = _context19.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              paymentMethodId: paymentMethodId
            }, opts.hyperMediaEndpoint);
            return _context19.abrupt("return", request(_objectSpread$Y({}, opts, {
              path: PATH__SELF_CHECKOUT_SESSIONS + "/me/paymentmethods/" + paymentMethodId
            }), {
              method: 'delete',
              tokenType: 'session'
            }));

          case 3:
          case "end":
            return _context19.stop();
        }
      }
    }, _callee19);
  }));

  return function deletePaymentMethod(_x34, _x35) {
    return _ref20.apply(this, arguments);
  };
}();

var selfCheckoutSessions = /*#__PURE__*/Object.freeze({
  __proto__: null,
  createSelfCheckoutSession: createSelfCheckoutSession,
  approve: approve,
  cancel: cancel$1,
  cancelSession: cancelSession,
  createMyInvoice: createMyInvoice,
  createPaymentAuthority: createPaymentAuthority,
  createPaymentMethod: createPaymentMethod,
  getPaymentMethods: getPaymentMethods,
  discoverMember: discoverMember$1,
  checkDupe: checkDupe$1,
  getMySelfCheckoutSession: getMySelfCheckoutSession,
  getMySelfCheckoutSessionTransaction: getMySelfCheckoutSessionTransaction,
  rememberMe: rememberMe,
  updateMySelfCheckoutSession: updateMySelfCheckoutSession,
  requestOtk: requestOtk$1,
  addPaymentMethodToSelfCheckoutSession: addPaymentMethodToSelfCheckoutSession,
  addMemberToSelfCheckoutSession: addMemberToSelfCheckoutSession,
  addHealthFundAccountToSelfCheckoutSession: addHealthFundAccountToSelfCheckoutSession,
  deletePaymentMethod: deletePaymentMethod
});

function ownKeys$Z(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$Z(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$Z(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$Z(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var pathBusinessServices = function pathBusinessServices(businessId) {
  return "/businesses/" + businessId + "/services";
};

var pathBusinessService = function pathBusinessService(businessId, serviceId) {
  return "/businesses/" + businessId + "/services/" + serviceId;
};

var pathBusinessPracticeServices = function pathBusinessPracticeServices(businessId, practiceId) {
  return "/businesses/" + businessId + "/practices/" + practiceId + "/services";
};

var pathBusinessPracticeService = function pathBusinessPracticeService(businessId, practiceId, serviceId) {
  return "/businesses/" + businessId + "/practices/" + practiceId + "/services/" + serviceId;
};

var pathBusinessStaffMemberServices = function pathBusinessStaffMemberServices(businessId, staffId) {
  return "/businesses/" + businessId + "/staff/" + staffId + "/services";
};

var pathBusinessPracticeStaffMemberServices = function pathBusinessPracticeStaffMemberServices(businessId, practiceId, staffId) {
  return "/businesses/" + businessId + "/practices/" + practiceId + "/staff/" + staffId + "/services";
};

var pathBusinessPracticeStaffMemberService = function pathBusinessPracticeStaffMemberService(businessId, practiceId, staffId, serviceId) {
  return "/businesses/" + businessId + "/practices/" + practiceId + "/staff/" + staffId + "/services/" + serviceId;
};
/**
 * Create a business service
 * @param {String} businessId - Business ID
 * @param {String} body - Request body
 * @param {Object} opts - Additional options
 */


var createBusinessService = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(businessId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId
            }, opts.hyperMediaEndpoint);
            return _context.abrupt("return", request(_objectSpread$Z({}, opts, {
              path: "" + pathBusinessServices(businessId)
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function createBusinessService(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * Create a business practice service
 * @param {String} businessId - Business ID
 * @param {String} practiceId - Practice ID
 * @param {String} body - Request body
 * @param {Object} opts - Additional options
 */

var createBusinessPracticeService = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(businessId, practiceId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              practiceId: practiceId
            }, opts.hyperMediaEndpoint);
            return _context2.abrupt("return", request(_objectSpread$Z({}, opts, {
              path: "" + pathBusinessPracticeServices(businessId, practiceId)
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function createBusinessPracticeService(_x4, _x5, _x6, _x7) {
    return _ref2.apply(this, arguments);
  };
}();
/**
 * Delete business service
 * @param {String} businessId - Business ID
 * @param {String} serviceId - Service ID
 * @param {Object} opts - Additional options
 */

var deleteBusinessService = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(businessId, serviceId, opts) {
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              serviceId: serviceId
            }, opts.hyperMediaEndpoint);
            return _context3.abrupt("return", request(_objectSpread$Z({}, opts, {
              path: "" + pathBusinessService(businessId, serviceId)
            }), {
              method: 'delete'
            }));

          case 3:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function deleteBusinessService(_x8, _x9, _x10) {
    return _ref3.apply(this, arguments);
  };
}();
/**
 * Get business service
 * @param {String} businessId - Business ID
 * @param {String} serviceId - Service ID
 * @param {Object} opts - Additional options
 */

var getBusinessService = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(businessId, serviceId, opts) {
    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              serviceId: serviceId
            }, opts.hyperMediaEndpoint);
            return _context4.abrupt("return", request(_objectSpread$Z({}, opts, {
              path: "" + pathBusinessService(businessId, serviceId)
            }), {
              method: 'get'
            }));

          case 3:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));

  return function getBusinessService(_x11, _x12, _x13) {
    return _ref4.apply(this, arguments);
  };
}();
/**
 * Get business services
 * @param {String} businessId - Business ID
 * @param {String} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getBusinessServices = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(businessId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId
            }, opts.hyperMediaEndpoint);
            return _context5.abrupt("return", request(_objectSpread$Z({}, opts, {
              path: "" + pathBusinessServices(businessId)
            }), {
              method: 'get',
              params: query
            }));

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));

  return function getBusinessServices(_x14, _x15, _x16) {
    return _ref5.apply(this, arguments);
  };
}();
/**
 * Get business practice service
 * @param {String} businessId - Business ID
 * @param {String} practiceId - Practice ID
 * @param {String} serviceId - Service ID
 * @param {Object} opts - Additional options
 */

var getBusinessPracticeService = /*#__PURE__*/function () {
  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(businessId, practiceId, serviceId, opts) {
    return _regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              practiceId: practiceId,
              serviceId: serviceId
            }, opts.hyperMediaEndpoint);
            return _context6.abrupt("return", request(_objectSpread$Z({}, opts, {
              path: "" + pathBusinessPracticeService(businessId, practiceId, serviceId)
            }), {
              method: 'get'
            }));

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));

  return function getBusinessPracticeService(_x17, _x18, _x19, _x20) {
    return _ref6.apply(this, arguments);
  };
}();
/**
 * Get business practice services
 * @param {String} businessId - Business ID
 * @param {String} practiceId - Practice ID
 * @param {String} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getBusinessPracticeServices = /*#__PURE__*/function () {
  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(businessId, practiceId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              practiceId: practiceId
            }, opts.hyperMediaEndpoint);
            return _context7.abrupt("return", request(_objectSpread$Z({}, opts, {
              path: "" + pathBusinessPracticeServices(businessId, practiceId)
            }), {
              method: 'get',
              params: query
            }));

          case 4:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));

  return function getBusinessPracticeServices(_x21, _x22, _x23, _x24) {
    return _ref7.apply(this, arguments);
  };
}();
/**
 * Get business practice staff member services
 * @param {String} businessId - Business ID
 * @param {String} practiceId - Practice ID
 * @param {String} staffId - Staff ID
 * @param {String} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getBusinessPracticeStaffMemberServices = /*#__PURE__*/function () {
  var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(businessId, practiceId, staffId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              practiceId: practiceId,
              staffId: staffId
            }, opts.hyperMediaEndpoint);
            return _context8.abrupt("return", request(_objectSpread$Z({}, opts, {
              path: "" + pathBusinessPracticeStaffMemberServices(businessId, practiceId, staffId)
            }), {
              method: 'get',
              params: query
            }));

          case 4:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  }));

  return function getBusinessPracticeStaffMemberServices(_x25, _x26, _x27, _x28, _x29) {
    return _ref8.apply(this, arguments);
  };
}();
/**
 * Get business practice staff member service
 * @param {String} businessId - Business ID
 * @param {String} practiceId - Practice ID
 * @param {String} staffId - Staff ID
 * @param {String} serviceId - Service ID
 * @param {String} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getBusinessPracticeStaffMemberService = /*#__PURE__*/function () {
  var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(businessId, practiceId, staffId, serviceId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              practiceId: practiceId,
              staffId: staffId,
              serviceId: serviceId
            }, opts.hyperMediaEndpoint);
            return _context9.abrupt("return", request(_objectSpread$Z({}, opts, {
              path: "" + pathBusinessPracticeStaffMemberService(businessId, practiceId, staffId, serviceId)
            }), {
              method: 'get',
              params: query
            }));

          case 4:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));

  return function getBusinessPracticeStaffMemberService(_x30, _x31, _x32, _x33, _x34, _x35) {
    return _ref9.apply(this, arguments);
  };
}();
/**
 * Get business staff member services
 * @param {String} businessId - Business ID
 * @param {String} staffId - Staff ID
 * @param {String} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getBusinessStaffMemberServices = /*#__PURE__*/function () {
  var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(businessId, staffId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            return _context10.abrupt("return", request(_objectSpread$Z({}, opts, {
              path: "" + pathBusinessStaffMemberServices(businessId, staffId)
            }), {
              method: 'get',
              params: query
            }));

          case 3:
          case "end":
            return _context10.stop();
        }
      }
    }, _callee10);
  }));

  return function getBusinessStaffMemberServices(_x36, _x37, _x38, _x39) {
    return _ref10.apply(this, arguments);
  };
}();
/**
 * Update a business service
 * @param {String} businessId - Business ID
 * @param {String} serviceId - Service ID
 * @param {String} body - Request body
 * @param {Object} opts - Additional options
 */

var updateBusinessService = /*#__PURE__*/function () {
  var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(businessId, serviceId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              serviceId: serviceId
            }, opts.hyperMediaEndpoint);
            return _context11.abrupt("return", request(_objectSpread$Z({}, opts, {
              path: "" + pathBusinessService(businessId, serviceId)
            }), {
              method: 'put',
              data: body
            }));

          case 3:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));

  return function updateBusinessService(_x40, _x41, _x42, _x43) {
    return _ref11.apply(this, arguments);
  };
}();

var services = /*#__PURE__*/Object.freeze({
  __proto__: null,
  createBusinessService: createBusinessService,
  createBusinessPracticeService: createBusinessPracticeService,
  deleteBusinessService: deleteBusinessService,
  getBusinessService: getBusinessService,
  getBusinessServices: getBusinessServices,
  getBusinessPracticeService: getBusinessPracticeService,
  getBusinessPracticeServices: getBusinessPracticeServices,
  getBusinessPracticeStaffMemberServices: getBusinessPracticeStaffMemberServices,
  getBusinessPracticeStaffMemberService: getBusinessPracticeStaffMemberService,
  getBusinessStaffMemberServices: getBusinessStaffMemberServices,
  updateBusinessService: updateBusinessService
});

function ownKeys$_(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$_(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$_(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$_(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var pathBusiness$1 = function pathBusiness(businessId) {
  return "/businesses/" + businessId;
};
/**
 * Get business settlements
 * @param {String} businessId - Business ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */


var getBusinessSettlements = function getBusinessSettlements(businessId, query, opts) {
  if (query === void 0) {
    query = {};
  }

  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$_({}, opts, {
    path: pathBusiness$1(businessId) + "/settlements"
  }), {
    method: 'get',
    params: query
  });
};
/**
 * Get business settlement summaries
 * @param {String} businessId - Business ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getBusinessSettlementSummaries = function getBusinessSettlementSummaries(businessId, query, opts) {
  if (query === void 0) {
    query = {};
  }

  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$_({}, opts, {
    path: pathBusiness$1(businessId) + "/settlementsummaries"
  }), {
    method: 'get',
    params: query
  });
};
/**
 * Get business settlements summaries by period
 * @param {String} businessId - Business ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getBusinessSettlementSummariesByPeriod = function getBusinessSettlementSummariesByPeriod(businessId, query, opts) {
  if (query === void 0) {
    query = {};
  }

  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$_({}, opts, {
    path: pathBusiness$1(businessId) + "/settlementsummaries/period"
  }), {
    method: 'get',
    params: query
  });
};
/**
 * Get a business's settlement summary by Id
 * @param {String} businessId - Business ID
 * @param {String} settlementSummaryId - Settlement ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getBusinessSettlementSummaryById = function getBusinessSettlementSummaryById(businessId, settlementSummaryId, query, opts) {
  if (query === void 0) {
    query = {};
  }

  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  }, opts.hyperMediaEndpoint);
  doesParamExist.default({
    settlementSummaryId: settlementSummaryId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$_({}, opts, {
    path: pathBusiness$1(businessId) + "/settlementsummaries/" + settlementSummaryId
  }), {
    method: 'get',
    params: query
  });
};
/**
 * Get business settlement summaries search options
 * @param {String} businessId - Business ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getBusinessSettlementSummariesSearchOptions = function getBusinessSettlementSummariesSearchOptions(businessId, query, opts) {
  if (query === void 0) {
    query = {};
  }

  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$_({}, opts, {
    path: pathBusiness$1(businessId) + "/settlementsummariessearchoptions"
  }), {
    method: 'get',
    params: query
  });
};

var settlements = /*#__PURE__*/Object.freeze({
  __proto__: null,
  getBusinessSettlements: getBusinessSettlements,
  getBusinessSettlementSummaries: getBusinessSettlementSummaries,
  getBusinessSettlementSummariesByPeriod: getBusinessSettlementSummariesByPeriod,
  getBusinessSettlementSummaryById: getBusinessSettlementSummaryById,
  getBusinessSettlementSummariesSearchOptions: getBusinessSettlementSummariesSearchOptions
});

function ownKeys$$(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$$(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$$(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$$(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var pathBusinessSignUp = function pathBusinessSignUp() {
  return '/businesses/signup';
};
var pathSignUp = function pathSignUp() {
  return '/signup';
};
var createBusinessAccount = function createBusinessAccount(body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  return request(_objectSpread$$({}, opts, {
    path: pathBusinessSignUp()
  }), {
    method: 'post',
    data: body
  });
};
var createConsumerAccount = function createConsumerAccount(body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  return request(_objectSpread$$({}, opts, {
    path: pathSignUp()
  }), {
    method: 'post',
    data: body
  });
};

var signUp$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  pathBusinessSignUp: pathBusinessSignUp,
  pathSignUp: pathSignUp,
  createBusinessAccount: createBusinessAccount,
  createConsumerAccount: createConsumerAccount
});

function ownKeys$10(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$10(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$10(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$10(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var pathBusinessSpecialties = function pathBusinessSpecialties(businessId) {
  return "/businesses/" + businessId + "/specialties";
};
var pathSpecialties = '/specialties';
var pathSpecialty = function pathSpecialty(specialtyId) {
  return "/specialties/" + specialtyId;
};
/**
 * Get specialties
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getSpecialties = function getSpecialties(query, opts) {
  if (opts === void 0) {
    opts = {};
  }

  return request(_objectSpread$10({}, opts, {
    path: pathSpecialties
  }), {
    method: 'get',
    params: query
  });
};
/**
 * Get business specialties
 * @param {Object} businessId - Business ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getBusinessSpecialties = function getBusinessSpecialties(businessId, query, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  });
  return request(_objectSpread$10({}, opts, {
    path: pathBusinessSpecialties(businessId)
  }), {
    method: 'get',
    params: query
  });
};
/**
 * Get specialty
 * @param {Object} specialtyId - Specialty ID
 * @param {Object} opts - Additional options
 */

var getSpecialty = function getSpecialty(specialtyId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    specialtyId: specialtyId
  });
  return request(_objectSpread$10({}, opts, {
    path: pathSpecialty(specialtyId)
  }), {
    method: 'get'
  });
};

var specialties = /*#__PURE__*/Object.freeze({
  __proto__: null,
  pathBusinessSpecialties: pathBusinessSpecialties,
  pathSpecialties: pathSpecialties,
  pathSpecialty: pathSpecialty,
  getSpecialties: getSpecialties,
  getBusinessSpecialties: getBusinessSpecialties,
  getSpecialty: getSpecialty
});

function ownKeys$11(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$11(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$11(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$11(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var pathLinkStaffProfile = function pathLinkStaffProfile(staffProfileId) {
  return "/staffprofiles/" + staffProfileId + "/link";
};
var pathOrganisationStaffProfiles = function pathOrganisationStaffProfiles(organisationId) {
  return "/organisations/" + organisationId + "/staffprofiles";
};
var pathStaffProfile = function pathStaffProfile(staffProfileId) {
  return "/staffprofiles/" + staffProfileId;
};
var pathUnlinkStaffProfile = function pathUnlinkStaffProfile(staffProfileId) {
  return "/staffprofiles/" + staffProfileId + "/unlink";
};
var getOrganisationStaffProfiles = function getOrganisationStaffProfiles(organisationId, query, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    organisationId: organisationId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$11({}, opts, {
    path: pathOrganisationStaffProfiles(organisationId)
  }), {
    method: 'get',
    params: query
  });
};
var getStaffProfile = function getStaffProfile(staffProfileId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    staffProfileId: staffProfileId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$11({}, opts, {
    path: pathStaffProfile(staffProfileId)
  }), {
    method: 'get'
  });
};
var linkStaffProfile = function linkStaffProfile(staffProfileId, staffId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    staffProfileId: staffProfileId,
    staffId: staffId
  }, opts.hyperMediaEndpoint);
  var body = {
    staffId: staffId
  };
  return request(_objectSpread$11({}, opts, {
    path: pathLinkStaffProfile(staffProfileId)
  }), {
    method: 'put',
    data: body
  });
};
var unlinkStaffProfile = function unlinkStaffProfile(staffProfileId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    staffProfileId: staffProfileId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$11({}, opts, {
    path: pathUnlinkStaffProfile(staffProfileId)
  }), {
    method: 'put'
  });
};

var staffProfiles = /*#__PURE__*/Object.freeze({
  __proto__: null,
  pathLinkStaffProfile: pathLinkStaffProfile,
  pathOrganisationStaffProfiles: pathOrganisationStaffProfiles,
  pathStaffProfile: pathStaffProfile,
  pathUnlinkStaffProfile: pathUnlinkStaffProfile,
  getOrganisationStaffProfiles: getOrganisationStaffProfiles,
  getStaffProfile: getStaffProfile,
  linkStaffProfile: linkStaffProfile,
  unlinkStaffProfile: unlinkStaffProfile
});

function ownKeys$12(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$12(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$12(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$12(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var pathBusinessPracticeStaffMembers = function pathBusinessPracticeStaffMembers(businessId, practiceId) {
  return "/businesses/" + businessId + "/practices/" + practiceId + "/staff";
};

var pathBusinessPracticeStaffMember = function pathBusinessPracticeStaffMember(businessId, practiceId, staffId) {
  return "/businesses/" + businessId + "/practices/" + practiceId + "/staff/" + staffId;
};

var pathBusinessFormPracticeStaffMembers = function pathBusinessFormPracticeStaffMembers(businessId, formId, practiceId) {
  return "/businesses/" + businessId + "/forms/" + formId + "/practices/" + practiceId + "/staff";
};

var pathBusinessServiceStaffMembers = function pathBusinessServiceStaffMembers(businessId, serviceId) {
  return "/businesses/" + businessId + "/services/" + serviceId + "/staff";
};

var pathBusinessStaff = function pathBusinessStaff(businessId) {
  return "/businesses/" + businessId + "/staff";
};

var pathBusinessStaffMember = function pathBusinessStaffMember(businessId, staffId) {
  return "/businesses/" + businessId + "/staff/" + staffId;
};

var pathOrganisationStaff = function pathOrganisationStaff(organisationId) {
  return "/organisations/" + organisationId + "/staff";
};

var pathOrganisationStaffMember = function pathOrganisationStaffMember(organisationId, staffId) {
  return "/organisations/" + organisationId + "/staff/" + staffId;
};

var pathStaffMember = function pathStaffMember(staffId) {
  return "/staff/" + staffId;
};

var pathProviderSetItems = function pathProviderSetItems(businessId, staffId) {
  return "/businesses/" + businessId + "/staff/" + staffId + "/providersetitems";
};

var pathProviderSetItem = function pathProviderSetItem(businessId, staffId, providerSetItemId) {
  return "/businesses/" + businessId + "/staff/" + staffId + "/providersetitems/" + providerSetItemId;
};

var pathProvidersStatus = '/providers/status';
/**
 * Create business staff member
 * @param {String} businessId - Organisation ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var createBusinessStaffMember = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(businessId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId
            }, opts.hyperMediaEndpoint);
            return _context.abrupt("return", request(_objectSpread$12({}, opts, {
              path: pathBusinessStaff(businessId)
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function createBusinessStaffMember(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * Create organisation staff member
 * @param {String} organisationId - Organisation ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var createOrganisationStaffMember = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(organisationId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              organisationId: organisationId
            }, opts.hyperMediaEndpoint);
            return _context2.abrupt("return", request(_objectSpread$12({}, opts, {
              path: pathOrganisationStaff(organisationId)
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function createOrganisationStaffMember(_x4, _x5, _x6) {
    return _ref2.apply(this, arguments);
  };
}();
/**
 * Delete business staff member
 * @param {String} businessId - Business ID
 * @param {String} staffId - Staff ID
 * @param {Object} opts - Additional options
 */

var deleteBusinessStaffMember = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(businessId, staffId, opts) {
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              staffId: staffId
            }, opts.hyperMediaEndpoint);
            return _context3.abrupt("return", request(_objectSpread$12({}, opts, {
              path: pathBusinessStaffMember(businessId, staffId)
            }), {
              method: 'delete'
            }));

          case 3:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function deleteBusinessStaffMember(_x7, _x8, _x9) {
    return _ref3.apply(this, arguments);
  };
}();
/**
 * Delete business staff member email
 * @param {String} businessId - Business ID
 * @param {String} staffId - Staff ID
 * @param {Object} opts - Additional options
 */

var deleteBusinessStaffMemberEmail = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(businessId, staffId, opts) {
    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              staffId: staffId
            }, opts.hyperMediaEndpoint);
            return _context4.abrupt("return", request(_objectSpread$12({}, opts, {
              path: pathBusinessStaffMember(businessId, staffId) + "/email"
            }), {
              method: 'delete'
            }));

          case 3:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));

  return function deleteBusinessStaffMemberEmail(_x10, _x11, _x12) {
    return _ref4.apply(this, arguments);
  };
}();
/**
 * Get business staff member
 * @param {Object} businessId - Business ID
 * @param {Object} staffId - Staff ID
 * @param {Object} opts - Additional options
 */

var getBusinessStaffMember = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(businessId, staffId, opts) {
    return _regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              staffId: staffId
            }, opts.hyperMediaEndpoint);
            return _context5.abrupt("return", request(_objectSpread$12({}, opts, {
              path: pathBusinessStaffMember(businessId, staffId)
            }), {
              method: 'get'
            }));

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));

  return function getBusinessStaffMember(_x13, _x14, _x15) {
    return _ref5.apply(this, arguments);
  };
}();
/**
 * Get business staff member roles
 * @param {String} businessId - Business ID
 * @param {String} staffId - Staff ID
 * @param {String} roleFullName - Role
 * @param {Object} opts - Additional options
 */

var getBusinessStaffMemberRoles = /*#__PURE__*/function () {
  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(businessId, staffId, roleFullName, opts) {
    return _regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              staffId: staffId
            }, opts.hyperMediaEndpoint);
            return _context6.abrupt("return", request(_objectSpread$12({}, opts, {
              path: pathBusinessStaffMember(businessId, staffId) + "/roles"
            }), {
              method: 'get',
              params: {
                fullName: roleFullName
              }
            }));

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));

  return function getBusinessStaffMemberRoles(_x16, _x17, _x18, _x19) {
    return _ref6.apply(this, arguments);
  };
}();
/**
 * Get business practice staff member
 * @param {Object} businessId - Business ID
 * @param {Object} practiceId - Practice ID
 * @param {Object} staffId - Staff ID
 * @param {Object} opts - Additional options
 */

var getBusinessPracticeStaffMember = /*#__PURE__*/function () {
  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(businessId, practiceId, staffId, opts) {
    return _regeneratorRuntime.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              practiceId: practiceId,
              staffId: staffId
            }, opts.hyperMediaEndpoint);
            return _context7.abrupt("return", request(_objectSpread$12({}, opts, {
              path: pathBusinessPracticeStaffMember(businessId, practiceId, staffId)
            }), {
              method: 'get'
            }));

          case 3:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));

  return function getBusinessPracticeStaffMember(_x20, _x21, _x22, _x23) {
    return _ref7.apply(this, arguments);
  };
}();
/**
 * Get business practice staff member modalities
 * @param {Object} businessId - Business ID
 * @param {Object} practiceId - Practice ID
 * @param {Object} staffId - Staff ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getBusinessPracticeStaffMemberModalities = /*#__PURE__*/function () {
  var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(businessId, practiceId, staffId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              practiceId: practiceId,
              staffId: staffId
            }, opts.hyperMediaEndpoint);
            return _context8.abrupt("return", request(_objectSpread$12({}, opts, {
              path: pathBusinessPracticeStaffMember(businessId, practiceId, staffId) + "/modalities"
            }), {
              method: 'get',
              params: query
            }));

          case 4:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  }));

  return function getBusinessPracticeStaffMemberModalities(_x24, _x25, _x26, _x27, _x28) {
    return _ref8.apply(this, arguments);
  };
}();
/**
 * Get business practice staff members
 * @param {Object} businessId - Business ID
 * @param {Object} practiceId - Practice ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getBusinessPracticeStaffMembers = /*#__PURE__*/function () {
  var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(businessId, practiceId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              practiceId: practiceId
            }, opts.hyperMediaEndpoint);
            return _context9.abrupt("return", request(_objectSpread$12({}, opts, {
              path: pathBusinessPracticeStaffMembers(businessId, practiceId)
            }), {
              method: 'get',
              params: query
            }));

          case 3:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));

  return function getBusinessPracticeStaffMembers(_x29, _x30, _x31, _x32) {
    return _ref9.apply(this, arguments);
  };
}();
/**
 * Get business form practice staff members
 * @param {Object} businessId - Business ID
 * @param {Object} formId - Form ID
 * @param {Object} practiceId - Practice ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getBusinessFormPracticeStaffMembers = /*#__PURE__*/function () {
  var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(businessId, formId, practiceId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              formId: formId,
              practiceId: practiceId
            }, opts.hyperMediaEndpoint);
            return _context10.abrupt("return", request(_objectSpread$12({}, opts, {
              path: pathBusinessFormPracticeStaffMembers(businessId, formId, practiceId)
            }), {
              method: 'get',
              params: query
            }));

          case 3:
          case "end":
            return _context10.stop();
        }
      }
    }, _callee10);
  }));

  return function getBusinessFormPracticeStaffMembers(_x33, _x34, _x35, _x36, _x37) {
    return _ref10.apply(this, arguments);
  };
}();
/**
 * Get business service staff members
 * @param {Object} businessId - Business ID
 * @param {Object} serviceId - Service ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getBusinessServiceStaffMembers = /*#__PURE__*/function () {
  var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(businessId, serviceId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              serviceId: serviceId
            }, opts.hyperMediaEndpoint);
            return _context11.abrupt("return", request(_objectSpread$12({}, opts, {
              path: pathBusinessServiceStaffMembers(businessId, serviceId)
            }), {
              method: 'get',
              params: query
            }));

          case 4:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));

  return function getBusinessServiceStaffMembers(_x38, _x39, _x40, _x41) {
    return _ref11.apply(this, arguments);
  };
}();
/**
 * Get business staff members
 * @param {Object} opts - Additional options
 */

var getBusinessStaffMembers = /*#__PURE__*/function () {
  var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(businessId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee12$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId
            }, opts.hyperMediaEndpoint);
            return _context12.abrupt("return", request(_objectSpread$12({}, opts, {
              path: pathBusinessStaff(businessId)
            }), {
              method: 'get',
              params: query
            }));

          case 3:
          case "end":
            return _context12.stop();
        }
      }
    }, _callee12);
  }));

  return function getBusinessStaffMembers(_x42, _x43, _x44) {
    return _ref12.apply(this, arguments);
  };
}();
/**
 * Get business staff upload urls
 * @param {String} businessId - Business ID
 * @param {String} staffId - Staff ID
 * @param {String} contentType - Mime type
 * @param {Object} opts - Additional options
 */

var getBusinessStaffUploadUrl = /*#__PURE__*/function () {
  var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(businessId, staffId, contentType, opts) {
    return _regeneratorRuntime.wrap(function _callee13$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              staffId: staffId,
              contentType: contentType
            }, opts.hyperMediaEndpoint);
            return _context13.abrupt("return", request(_objectSpread$12({}, opts, {
              path: pathBusinessStaffMember(businessId, staffId) + "/uploadurlv2"
            }), {
              method: 'get',
              params: {
                contentType: contentType
              }
            }));

          case 3:
          case "end":
            return _context13.stop();
        }
      }
    }, _callee13);
  }));

  return function getBusinessStaffUploadUrl(_x45, _x46, _x47, _x48) {
    return _ref13.apply(this, arguments);
  };
}();
/**
 * Get organisation staff members
 * @param {String} organisationId - Organisation ID
 * @param {Object} opts - Additional options
 */

var getOrganisationStaffMembers = /*#__PURE__*/function () {
  var _ref14 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(organisationId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee14$(_context14) {
      while (1) {
        switch (_context14.prev = _context14.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              organisationId: organisationId
            }, opts.hyperMediaEndpoint);
            return _context14.abrupt("return", request(_objectSpread$12({}, opts, {
              path: pathOrganisationStaff(organisationId)
            }), {
              method: 'get',
              params: query
            }));

          case 4:
          case "end":
            return _context14.stop();
        }
      }
    }, _callee14);
  }));

  return function getOrganisationStaffMembers(_x49, _x50, _x51) {
    return _ref14.apply(this, arguments);
  };
}();
/**
 * Get staff member
 * @param {String} staffId - Staff ID
 * @param {Object} opts - Additional options
 */

var getStaffMember = /*#__PURE__*/function () {
  var _ref15 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(staffId, opts) {
    return _regeneratorRuntime.wrap(function _callee15$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              staffId: staffId
            }, opts.hyperMediaEndpoint);
            return _context15.abrupt("return", request(_objectSpread$12({}, opts, {
              path: pathStaffMember(staffId)
            }), {
              method: 'get'
            }));

          case 3:
          case "end":
            return _context15.stop();
        }
      }
    }, _callee15);
  }));

  return function getStaffMember(_x52, _x53) {
    return _ref15.apply(this, arguments);
  };
}();
/**
 * Grant business practice staff role
 * @param {String} businessId - Business ID
 * @param {String} practiceId - Practice ID
 * @param {String} staffId - Staff ID
 * @param {String} roleFullName - Role
 * @param {Object} opts - Additional options
 */

var grantBusinessPracticeStaffRole = /*#__PURE__*/function () {
  var _ref16 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(businessId, practiceId, staffId, roleFullName, opts) {
    return _regeneratorRuntime.wrap(function _callee16$(_context16) {
      while (1) {
        switch (_context16.prev = _context16.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              practiceId: practiceId,
              staffId: staffId
            }, opts.hyperMediaEndpoint);
            return _context16.abrupt("return", request(_objectSpread$12({}, opts, {
              path: pathBusinessPracticeStaffMember(businessId, practiceId, staffId) + "/roles"
            }), {
              method: 'post',
              data: {
                roleFullName: roleFullName
              }
            }));

          case 3:
          case "end":
            return _context16.stop();
        }
      }
    }, _callee16);
  }));

  return function grantBusinessPracticeStaffRole(_x54, _x55, _x56, _x57, _x58) {
    return _ref16.apply(this, arguments);
  };
}();
/**
 * Grant business practice staff role
 * @param {String} businessId - Business ID
 * @param {String} staffId - Staff ID
 * @param {String} roleFullName - Role
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var grantBusinessStaffRole = /*#__PURE__*/function () {
  var _ref17 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(businessId, staffId, roleFullName, body, opts) {
    return _regeneratorRuntime.wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              staffId: staffId
            }, opts.hyperMediaEndpoint);
            return _context17.abrupt("return", request(_objectSpread$12({}, opts, {
              path: pathBusinessStaffMember(businessId, staffId) + "/roles"
            }), {
              method: 'post',
              data: _objectSpread$12({
                roleFullName: roleFullName
              }, body)
            }));

          case 3:
          case "end":
            return _context17.stop();
        }
      }
    }, _callee17);
  }));

  return function grantBusinessStaffRole(_x59, _x60, _x61, _x62, _x63) {
    return _ref17.apply(this, arguments);
  };
}();
/**
 * Invite a new business staff member
 * @param {String} businessId - Business ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var inviteNewBusinessStaffMember = /*#__PURE__*/function () {
  var _ref18 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(businessId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee18$(_context18) {
      while (1) {
        switch (_context18.prev = _context18.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId
            }, opts.hyperMediaEndpoint);
            return _context18.abrupt("return", request(_objectSpread$12({}, opts, {
              path: pathBusinessStaff(businessId) + "/invites"
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context18.stop();
        }
      }
    }, _callee18);
  }));

  return function inviteNewBusinessStaffMember(_x64, _x65, _x66) {
    return _ref18.apply(this, arguments);
  };
}();
/**
 * Invite business staff
 * @param {String} businessId - Business ID
 * @param {String} staffId - Staff ID
 * @param {Object} opts - Additional options
 */

var inviteBusinessStaffMember = /*#__PURE__*/function () {
  var _ref19 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(businessId, staffId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee19$(_context19) {
      while (1) {
        switch (_context19.prev = _context19.next) {
          case 0:
            if (body === void 0) {
              body = {
                createNewAccount: false
              };
            }

            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId
            }, opts.hyperMediaEndpoint);
            return _context19.abrupt("return", request(_objectSpread$12({}, opts, {
              path: pathBusinessStaffMember(businessId, staffId) + "/invites"
            }), {
              method: 'post',
              data: body
            }));

          case 4:
          case "end":
            return _context19.stop();
        }
      }
    }, _callee19);
  }));

  return function inviteBusinessStaffMember(_x67, _x68, _x69, _x70) {
    return _ref19.apply(this, arguments);
  };
}();
/**
 * Revoke business practice staff role
 * @param {String} businessId - Business ID
 * @param {String} practiceId - Practice ID
 * @param {String} staffId - Staff ID
 * @param {String} roleFullName - Role
 * @param {Object} opts - Additional options
 */

var revokeBusinessPracticeStaffRole = /*#__PURE__*/function () {
  var _ref20 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20(businessId, practiceId, staffId, roleFullName, opts) {
    return _regeneratorRuntime.wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              practiceId: practiceId,
              staffId: staffId
            }, opts.hyperMediaEndpoint);
            return _context20.abrupt("return", request(_objectSpread$12({}, opts, {
              path: pathBusinessPracticeStaffMember(businessId, practiceId, staffId) + "/roles"
            }), {
              method: 'delete',
              data: {
                roleFullName: roleFullName
              }
            }));

          case 3:
          case "end":
            return _context20.stop();
        }
      }
    }, _callee20);
  }));

  return function revokeBusinessPracticeStaffRole(_x71, _x72, _x73, _x74, _x75) {
    return _ref20.apply(this, arguments);
  };
}();
/**
 * Revoke business practice staff role
 * @param {String} businessId - Business ID
 * @param {String} staffId - Staff ID
 * @param {String} roleFullName - Role
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var revokeBusinessStaffRole = /*#__PURE__*/function () {
  var _ref21 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(businessId, staffId, roleFullName, body, opts) {
    return _regeneratorRuntime.wrap(function _callee21$(_context21) {
      while (1) {
        switch (_context21.prev = _context21.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              staffId: staffId
            }, opts.hyperMediaEndpoint);
            return _context21.abrupt("return", request(_objectSpread$12({}, opts, {
              path: pathBusinessStaffMember(businessId, staffId) + "/roles"
            }), {
              method: 'delete',
              data: _objectSpread$12({
                roleFullName: roleFullName
              }, body)
            }));

          case 3:
          case "end":
            return _context21.stop();
        }
      }
    }, _callee21);
  }));

  return function revokeBusinessStaffRole(_x76, _x77, _x78, _x79, _x80) {
    return _ref21.apply(this, arguments);
  };
}();
/**
 * Update business staff member
 * @param {String} businessId - Business ID
 * @param {String} staffId - Staff ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var updateBusinessStaffMember = /*#__PURE__*/function () {
  var _ref22 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22(businessId, staffId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee22$(_context22) {
      while (1) {
        switch (_context22.prev = _context22.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              staffId: staffId
            }, opts.hyperMediaEndpoint);
            return _context22.abrupt("return", request(_objectSpread$12({}, opts, {
              path: pathBusinessStaffMember(businessId, staffId)
            }), {
              method: 'put',
              data: body
            }));

          case 3:
          case "end":
            return _context22.stop();
        }
      }
    }, _callee22);
  }));

  return function updateBusinessStaffMember(_x81, _x82, _x83, _x84) {
    return _ref22.apply(this, arguments);
  };
}();
/**
 * Create or resend a magic link to update current staff's email
 * @param {String} businessId - Business ID
 * @param {String} staffId - Staff ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var updateBusinessStaffMemberEmail = /*#__PURE__*/function () {
  var _ref23 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23(businessId, staffId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee23$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              staffId: staffId
            }, opts.hyperMediaEndpoint);
            return _context23.abrupt("return", request(_objectSpread$12({}, opts, {
              path: pathBusinessStaffMember(businessId, staffId) + "/changeemail"
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context23.stop();
        }
      }
    }, _callee23);
  }));

  return function updateBusinessStaffMemberEmail(_x85, _x86, _x87, _x88) {
    return _ref23.apply(this, arguments);
  };
}();
/**
 * Update organisation staff member
 * @param {String} organisationId - Organisation ID
 * @param {String} staffId - Staff ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var updateOrganisationStaffMember = /*#__PURE__*/function () {
  var _ref24 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24(organisationId, staffId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee24$(_context24) {
      while (1) {
        switch (_context24.prev = _context24.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              organisationId: organisationId,
              staffId: staffId
            }, opts.hyperMediaEndpoint);
            return _context24.abrupt("return", request(_objectSpread$12({}, opts, {
              path: pathOrganisationStaffMember(organisationId, staffId)
            }), {
              method: 'put',
              data: body
            }));

          case 3:
          case "end":
            return _context24.stop();
        }
      }
    }, _callee24);
  }));

  return function updateOrganisationStaffMember(_x89, _x90, _x91, _x92) {
    return _ref24.apply(this, arguments);
  };
}();
/**
 * Verify staff member
 * @param {String} staffId - Staff ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var verifyStaffMember = /*#__PURE__*/function () {
  var _ref25 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee25(staffId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee25$(_context25) {
      while (1) {
        switch (_context25.prev = _context25.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              staffId: staffId
            }, opts.hyperMediaEndpoint);
            return _context25.abrupt("return", request(_objectSpread$12({}, opts, {
              path: pathStaffMember(staffId) + "/verify"
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context25.stop();
        }
      }
    }, _callee25);
  }));

  return function verifyStaffMember(_x93, _x94, _x95) {
    return _ref25.apply(this, arguments);
  };
}();
/**
 * Clone staff member into another business
 * @param {String} staffId - Staff ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var cloneStaffMemberIntoBusiness = /*#__PURE__*/function () {
  var _ref26 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee26(staffId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee26$(_context26) {
      while (1) {
        switch (_context26.prev = _context26.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              staffId: staffId
            }, opts.hyperMediaEndpoint);
            return _context26.abrupt("return", request(_objectSpread$12({}, opts, {
              path: pathStaffMember(staffId) + "/clone"
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context26.stop();
        }
      }
    }, _callee26);
  }));

  return function cloneStaffMemberIntoBusiness(_x96, _x97, _x98) {
    return _ref26.apply(this, arguments);
  };
}();
/**
 * Check if email exists
 * @param {String} businessId - Business ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var checkStaffMemberEmailExists = function checkStaffMemberEmailExists(businessId, query, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$12({}, opts, {
    path: pathBusinessStaff(businessId) + "/exists"
  }), {
    method: 'get',
    params: query
  });
};
/**
 * Create business staff provider set item
 * @param {String} businessId - Business ID
 * @param {String} staffId - Staff ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var createStaffProviderSetItem = /*#__PURE__*/function () {
  var _ref27 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee27(businessId, staffId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee27$(_context27) {
      while (1) {
        switch (_context27.prev = _context27.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              staffId: staffId
            }, opts.hyperMediaEndpoint);
            return _context27.abrupt("return", request(_objectSpread$12({}, opts, {
              path: "" + pathProviderSetItems(businessId, staffId)
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context27.stop();
        }
      }
    }, _callee27);
  }));

  return function createStaffProviderSetItem(_x99, _x100, _x101, _x102) {
    return _ref27.apply(this, arguments);
  };
}();
/**
 * Update business staff provider set item
 * @param {String} businessId - Business ID
 * @param {String} staffId - Staff ID
 * @param {String} providerSetItemId - Provider set item ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var updateStaffProviderSetItem = /*#__PURE__*/function () {
  var _ref28 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee28(businessId, staffId, providerSetItemId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee28$(_context28) {
      while (1) {
        switch (_context28.prev = _context28.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              staffId: staffId,
              providerSetItemId: providerSetItemId
            }, opts.hyperMediaEndpoint);
            return _context28.abrupt("return", request(_objectSpread$12({}, opts, {
              path: pathProviderSetItem(businessId, staffId, providerSetItemId)
            }), {
              method: 'put',
              data: body
            }));

          case 3:
          case "end":
            return _context28.stop();
        }
      }
    }, _callee28);
  }));

  return function updateStaffProviderSetItem(_x103, _x104, _x105, _x106, _x107) {
    return _ref28.apply(this, arguments);
  };
}();
/**
 * Delete business staff provider set item
 * @param {String} businessId - Business ID
 * @param {String} staffId - Staff ID
 * @param {String} providerSetItemId - Provider set item ID
 * @param {Object} opts - Additional options
 */

var deleteStaffProviderSetItem = /*#__PURE__*/function () {
  var _ref29 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee29(businessId, staffId, providerSetItemId, opts) {
    return _regeneratorRuntime.wrap(function _callee29$(_context29) {
      while (1) {
        switch (_context29.prev = _context29.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              staffId: staffId,
              providerSetItemId: providerSetItemId
            }, opts.hyperMediaEndpoint);
            return _context29.abrupt("return", request(_objectSpread$12({}, opts, {
              path: pathProviderSetItem(businessId, staffId, providerSetItemId)
            }), {
              method: 'delete'
            }));

          case 3:
          case "end":
            return _context29.stop();
        }
      }
    }, _callee29);
  }));

  return function deleteStaffProviderSetItem(_x108, _x109, _x110, _x111) {
    return _ref29.apply(this, arguments);
  };
}();
/**
 * Gets a list of providers and their current status.
 * @param {String} businessId - Business ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getProvidersStatus = function getProvidersStatus(businessId, query, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$12({}, opts, {
    path: pathProvidersStatus
  }), {
    method: 'get',
    params: _objectSpread$12({}, query, {
      businessId: businessId
    })
  });
};

var staff = /*#__PURE__*/Object.freeze({
  __proto__: null,
  createBusinessStaffMember: createBusinessStaffMember,
  createOrganisationStaffMember: createOrganisationStaffMember,
  deleteBusinessStaffMember: deleteBusinessStaffMember,
  deleteBusinessStaffMemberEmail: deleteBusinessStaffMemberEmail,
  getBusinessStaffMember: getBusinessStaffMember,
  getBusinessStaffMemberRoles: getBusinessStaffMemberRoles,
  getBusinessPracticeStaffMember: getBusinessPracticeStaffMember,
  getBusinessPracticeStaffMemberModalities: getBusinessPracticeStaffMemberModalities,
  getBusinessPracticeStaffMembers: getBusinessPracticeStaffMembers,
  getBusinessFormPracticeStaffMembers: getBusinessFormPracticeStaffMembers,
  getBusinessServiceStaffMembers: getBusinessServiceStaffMembers,
  getBusinessStaffMembers: getBusinessStaffMembers,
  getBusinessStaffUploadUrl: getBusinessStaffUploadUrl,
  getOrganisationStaffMembers: getOrganisationStaffMembers,
  getStaffMember: getStaffMember,
  grantBusinessPracticeStaffRole: grantBusinessPracticeStaffRole,
  grantBusinessStaffRole: grantBusinessStaffRole,
  inviteNewBusinessStaffMember: inviteNewBusinessStaffMember,
  inviteBusinessStaffMember: inviteBusinessStaffMember,
  revokeBusinessPracticeStaffRole: revokeBusinessPracticeStaffRole,
  revokeBusinessStaffRole: revokeBusinessStaffRole,
  updateBusinessStaffMember: updateBusinessStaffMember,
  updateBusinessStaffMemberEmail: updateBusinessStaffMemberEmail,
  updateOrganisationStaffMember: updateOrganisationStaffMember,
  verifyStaffMember: verifyStaffMember,
  cloneStaffMemberIntoBusiness: cloneStaffMemberIntoBusiness,
  checkStaffMemberEmailExists: checkStaffMemberEmailExists,
  createStaffProviderSetItem: createStaffProviderSetItem,
  updateStaffProviderSetItem: updateStaffProviderSetItem,
  deleteStaffProviderSetItem: deleteStaffProviderSetItem,
  getProvidersStatus: getProvidersStatus
});

function ownKeys$13(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$13(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$13(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$13(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var pathTransactionStatsForPractice = function pathTransactionStatsForPractice(businessId, practiceId) {
  return "/businesses/" + businessId + "/practices/" + practiceId + "/transactionstats";
};

var pathTransactionStatsForBusiness = function pathTransactionStatsForBusiness(businessId) {
  return "/businesses/" + businessId + "/transactionstats";
};

var pathTransactionStatsForOrganisation = function pathTransactionStatsForOrganisation(organisationId) {
  return "/organisations/" + organisationId + "/transactionstats";
};

var pathTransactionStatsForHealthFundId = function pathTransactionStatsForHealthFundId(healthFundId) {
  return "/healthfunds/" + healthFundId + "/transactionstats";
};

var pathTransactionStatsCSVForHealthFundId = function pathTransactionStatsCSVForHealthFundId(healthFundId) {
  return "/healthfunds/" + healthFundId + "/transactionstats/csv";
};

var pathHealthFundAccountStatsForHealthFundId = function pathHealthFundAccountStatsForHealthFundId(healthFundId) {
  return "/healthfunds/" + healthFundId + "/healthfundaccountstats";
};
/**
 * Get transaction statistics for a health fund
 * @param {String} healthFundId - Health fund ID
 * @param {String} from - From date in YYYY-MM-DD format
 * @param {String} to - To date in YYYY-MM-DD format
 * @param {Object} query - Extra query parameters
 * @param {Object} opts - Additional options
 */


var getTransactionStatsForHealthFundId = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(healthFundId, from, to, query, opts) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              healthFundId: healthFundId
            }, opts.hyperMediaEndpoint);
            return _context.abrupt("return", request(_objectSpread$13({}, opts, {
              path: pathTransactionStatsForHealthFundId(healthFundId)
            }), {
              method: 'get',
              params: _objectSpread$13({
                from: from,
                to: to
              }, query)
            }));

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function getTransactionStatsForHealthFundId(_x, _x2, _x3, _x4, _x5) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * Get transaction statistics as CSV for a health fund
 * @param {String} healthFundId - Health fund ID
 * @param {String} from - From date in YYYY-MM-DD format
 * @param {String} to - To date in YYYY-MM-DD format
 * @param {Object} query - Extra query parameters
 * @param {Object} opts - Additional options
 */

var getTransactionStatsCSVForHealthFundId = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(healthFundId, from, to, query, opts) {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              healthFundId: healthFundId
            }, opts.hyperMediaEndpoint);
            return _context2.abrupt("return", request(_objectSpread$13({}, opts, {
              path: pathTransactionStatsCSVForHealthFundId(healthFundId)
            }), {
              method: 'get',
              params: _objectSpread$13({
                from: from,
                to: to
              }, query)
            }));

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function getTransactionStatsCSVForHealthFundId(_x6, _x7, _x8, _x9, _x10) {
    return _ref2.apply(this, arguments);
  };
}();
/**
 * Get health fund account stats for a health fund
 * @param {String} healthFundId - Health fund ID
 * @param {String} from - From date in YYYY-MM-DD format
 * @param {String} to - To date in YYYY-MM-DD format
 * @param {Object} query - Extra query parameters
 * @param {Object} opts - Additional options
 */

var getHealthFundAccountStatsForHealthFundId = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(healthFundId, from, to, query, opts) {
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              healthFundId: healthFundId
            }, opts.hyperMediaEndpoint);
            return _context3.abrupt("return", request(_objectSpread$13({}, opts, {
              path: pathHealthFundAccountStatsForHealthFundId(healthFundId)
            }), {
              method: 'get',
              params: _objectSpread$13({
                from: from,
                to: to
              }, query)
            }));

          case 4:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function getHealthFundAccountStatsForHealthFundId(_x11, _x12, _x13, _x14, _x15) {
    return _ref3.apply(this, arguments);
  };
}();
/**
 * Get transaction statistics for a business
 * @param {String} businessId - Business ID
 * @param {String} from - From date in YYYY-MM-DD format
 * @param {String} to - To date in YYYY-MM-DD format
 * @param {Object} query - Extra query parameters
 * @param {Object} opts - Additional options
 */

var getTransactionStatsForBusiness = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(businessId, from, to, query, opts) {
    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId
            }, opts.hyperMediaEndpoint);
            return _context4.abrupt("return", request(_objectSpread$13({}, opts, {
              path: pathTransactionStatsForBusiness(businessId)
            }), {
              method: 'get',
              params: _objectSpread$13({
                from: from,
                to: to
              }, query)
            }));

          case 4:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));

  return function getTransactionStatsForBusiness(_x16, _x17, _x18, _x19, _x20) {
    return _ref4.apply(this, arguments);
  };
}();
/**
 * Get transaction statistics for a practice
 * @param {String} businessId - Business ID
 * @param {String} practiceId - Practice ID
 * @param {String} from - From date in YYYY-MM-DD format
 * @param {String} to - To date in YYYY-MM-DD format
 * @param {Object} query - Extra query parameters
 * @param {Object} opts - Additional options
 */

var getTransactionStatsForPractice = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(businessId, practiceId, from, to, query, opts) {
    return _regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              practiceId: practiceId
            }, opts.hyperMediaEndpoint);
            return _context5.abrupt("return", request(_objectSpread$13({}, opts, {
              path: pathTransactionStatsForPractice(businessId, practiceId)
            }), {
              method: 'get',
              params: _objectSpread$13({
                from: from,
                to: to
              }, query)
            }));

          case 4:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));

  return function getTransactionStatsForPractice(_x21, _x22, _x23, _x24, _x25, _x26) {
    return _ref5.apply(this, arguments);
  };
}();
/**
 * Get transaction statistics for an organisation
 * @param {String} organisationId - Organisation ID
 * @param {String} from - From date in YYYY-MM-DD format
 * @param {String} to - To date in YYYY-MM-DD format
 * @param {Object} query - Extra query parameters
 * @param {Object} opts - Additional options
 */

var getTransactionStatsForOrganisation = /*#__PURE__*/function () {
  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(organisationId, from, to, query, opts) {
    return _regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              organisationId: organisationId
            }, opts.hyperMediaEndpoint);
            return _context6.abrupt("return", request(_objectSpread$13({}, opts, {
              path: pathTransactionStatsForOrganisation(organisationId)
            }), {
              method: 'get',
              params: _objectSpread$13({
                from: from,
                to: to
              }, query)
            }));

          case 4:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));

  return function getTransactionStatsForOrganisation(_x27, _x28, _x29, _x30, _x31) {
    return _ref6.apply(this, arguments);
  };
}();

var statistics = /*#__PURE__*/Object.freeze({
  __proto__: null,
  getTransactionStatsForHealthFundId: getTransactionStatsForHealthFundId,
  getTransactionStatsCSVForHealthFundId: getTransactionStatsCSVForHealthFundId,
  getHealthFundAccountStatsForHealthFundId: getHealthFundAccountStatsForHealthFundId,
  getTransactionStatsForBusiness: getTransactionStatsForBusiness,
  getTransactionStatsForPractice: getTransactionStatsForPractice,
  getTransactionStatsForOrganisation: getTransactionStatsForOrganisation
});

function ownKeys$14(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$14(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$14(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$14(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var pathBusinessSubscriptions = function pathBusinessSubscriptions(businessId) {
  return "/businesses/" + businessId + "/subscriptions";
};
var pathBusinessSubscription = function pathBusinessSubscription(businessId, subscriptionId) {
  return "/businesses/" + businessId + "/subscriptions/" + subscriptionId;
};
/**
 * Create business subscription
 * @param {String} businessId - Business ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var createBusinessSubscription = function createBusinessSubscription(businessId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  });
  return request(_objectSpread$14({}, opts, {
    path: pathBusinessSubscriptions(businessId)
  }), {
    method: 'post',
    data: body
  });
};
/**
 * Get business subscriptions
 * @param {String} businessId - Business ID
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getBusinessSubscriptions = function getBusinessSubscriptions(businessId, query, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId
  });
  return request(_objectSpread$14({}, opts, {
    path: pathBusinessSubscriptions(businessId)
  }), {
    method: 'get',
    params: query
  });
};
/**
 * Get business subscription
 * @param {String} businessId - Business ID
 * @param {String} subscriptionId - Subscription ID
 * @param {Object} opts - Additional options
 */

var getBusinessSubscription = function getBusinessSubscription(businessId, subscriptionId, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId,
    subscriptionId: subscriptionId
  });
  return request(_objectSpread$14({}, opts, {
    path: pathBusinessSubscription(businessId, subscriptionId)
  }), {
    method: 'get'
  });
};
/**
 * Update business subscription
 * @param {String} businessId - Business ID
 * @param {String} subscriptionId - Subscription ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var updateBusinessSubscription = function updateBusinessSubscription(businessId, subscriptionId, body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    businessId: businessId,
    subscriptionId: subscriptionId
  });
  return request(_objectSpread$14({}, opts, {
    path: pathBusinessSubscription(businessId, subscriptionId)
  }), {
    method: 'put',
    data: body
  });
};

var subscriptions = /*#__PURE__*/Object.freeze({
  __proto__: null,
  pathBusinessSubscriptions: pathBusinessSubscriptions,
  pathBusinessSubscription: pathBusinessSubscription,
  createBusinessSubscription: createBusinessSubscription,
  getBusinessSubscriptions: getBusinessSubscriptions,
  getBusinessSubscription: getBusinessSubscription,
  updateBusinessSubscription: updateBusinessSubscription
});

function ownKeys$15(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$15(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$15(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$15(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var pathTerminalsByBusinessId = function pathTerminalsByBusinessId(businessId) {
  return "/businesses/" + businessId + "/terminals";
};
var pathTerminalsByPracticeId = function pathTerminalsByPracticeId(businessId, practiceId) {
  return "/businesses/" + businessId + "/practices/" + practiceId + "/terminals";
};
var pathTerminalByTerminalId = function pathTerminalByTerminalId(businessId, practiceId, terminalId) {
  return "/businesses/" + businessId + "/practices/" + practiceId + "/terminals/" + terminalId;
};
var pathResetTerminal = function pathResetTerminal(businessId, practiceId, terminalId) {
  return "/businesses/" + businessId + "/practices/" + practiceId + "/terminals/" + terminalId + "/reset";
};
var pathClientTokenByPracticeId = function pathClientTokenByPracticeId(businessId, practiceId) {
  return "/businesses/" + businessId + "/practices/" + practiceId + "/terminals/clienttoken";
};
/**
 * Register a terminal
 * @param {String} businessId - Business ID
 * @param {String} practiceId - Practice ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var registerTerminal = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(businessId, practiceId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              practiceId: practiceId
            }, opts.hyperMediaEndpoint);
            return _context.abrupt("return", request(_objectSpread$15({}, opts, {
              path: pathTerminalsByPracticeId(businessId, practiceId)
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function registerTerminal(_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * Get terminals for a business
 * @param {String} businessId - Business ID
 * @param {Object} query - query parameters
 * @param {Object} opts - Additional options
 */

var getBusinessTerminals = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(businessId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId
            }, opts.hyperMediaEndpoint);
            return _context2.abrupt("return", request(_objectSpread$15({}, opts, {
              path: pathTerminalsByBusinessId(businessId)
            }), {
              method: 'get',
              params: query
            }));

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function getBusinessTerminals(_x5, _x6, _x7) {
    return _ref2.apply(this, arguments);
  };
}();
/**
 * Get registered terminals for a practice
 * @param {String} businessId - Business ID
 * @param {String} practiceId - Practice ID
 * @param {Object} query - query parameters
 * @param {Object} opts - Additional options
 */

var getTerminals = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(businessId, practiceId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              practiceId: practiceId
            }, opts.hyperMediaEndpoint);
            return _context3.abrupt("return", request(_objectSpread$15({}, opts, {
              path: pathTerminalsByPracticeId(businessId, practiceId)
            }), {
              method: 'get',
              params: query
            }));

          case 3:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function getTerminals(_x8, _x9, _x10, _x11) {
    return _ref3.apply(this, arguments);
  };
}();
/**
 * Get terminal by terminalId
 * @param {String} businessId - Business ID
 * @param {String} practiceId - Practice ID
 * @param {String} terminalId - Terminal ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var getTerminal = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(businessId, practiceId, terminalId, opts) {
    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              practiceId: practiceId,
              terminalId: terminalId
            }, opts.hyperMediaEndpoint);
            return _context4.abrupt("return", request(_objectSpread$15({}, opts, {
              path: pathTerminalByTerminalId(businessId, practiceId, terminalId)
            }), {
              method: 'get'
            }));

          case 3:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));

  return function getTerminal(_x12, _x13, _x14, _x15) {
    return _ref4.apply(this, arguments);
  };
}();
/**
 * Update terminal by terminalId
 * @param {String} businessId - Business ID
 * @param {String} practiceId - Practice ID
 * @param {String} terminalId - Terminal ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var updateTerminal = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(businessId, practiceId, terminalId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              practiceId: practiceId,
              terminalId: terminalId
            }, opts.hyperMediaEndpoint);
            return _context5.abrupt("return", request(_objectSpread$15({}, opts, {
              path: pathTerminalByTerminalId(businessId, practiceId, terminalId)
            }), {
              method: 'put',
              data: body
            }));

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));

  return function updateTerminal(_x16, _x17, _x18, _x19, _x20) {
    return _ref5.apply(this, arguments);
  };
}();
/**
 * Delete terminal by terminalId
 * @param {String} businessId - Business ID
 * @param {String} practiceId - Practice ID
 * @param {String} terminalId - Terminal ID
 * @param {Object} opts - Additional options
 */

var deleteTerminal = /*#__PURE__*/function () {
  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(businessId, practiceId, terminalId, opts) {
    return _regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              practiceId: practiceId,
              terminalId: terminalId
            }, opts.hyperMediaEndpoint);
            return _context6.abrupt("return", request(_objectSpread$15({}, opts, {
              path: pathTerminalByTerminalId(businessId, practiceId, terminalId)
            }), {
              method: 'delete'
            }));

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));

  return function deleteTerminal(_x21, _x22, _x23, _x24) {
    return _ref6.apply(this, arguments);
  };
}();
/**
 * Get client token
 * @param {String} businessId - Business ID
 * @param {String} practiceId - Practice ID
 * @param {Object} opts - Additional options
 */

var getClientToken$1 = /*#__PURE__*/function () {
  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(businessId, practiceId, opts) {
    return _regeneratorRuntime.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              practiceId: practiceId
            }, opts.hyperMediaEndpoint);
            return _context7.abrupt("return", request(_objectSpread$15({}, opts, {
              path: pathClientTokenByPracticeId(businessId, practiceId)
            }), {
              method: 'get'
            }));

          case 3:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));

  return function getClientToken(_x25, _x26, _x27) {
    return _ref7.apply(this, arguments);
  };
}();
/**
 * Reset terminal by terminalId - only to be used on tyro simulato terminals
 * @param {String} businessId - Business ID
 * @param {String} practiceId - Practice ID
 * @param {String} terminalId - Terminal ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var resetTerminal = /*#__PURE__*/function () {
  var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(businessId, practiceId, terminalId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              practiceId: practiceId,
              terminalId: terminalId
            }, opts.hyperMediaEndpoint);
            return _context8.abrupt("return", request(_objectSpread$15({}, opts, {
              path: pathResetTerminal(businessId, practiceId, terminalId)
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  }));

  return function resetTerminal(_x28, _x29, _x30, _x31, _x32) {
    return _ref8.apply(this, arguments);
  };
}();

var terminals = /*#__PURE__*/Object.freeze({
  __proto__: null,
  pathTerminalsByBusinessId: pathTerminalsByBusinessId,
  pathTerminalsByPracticeId: pathTerminalsByPracticeId,
  pathTerminalByTerminalId: pathTerminalByTerminalId,
  pathResetTerminal: pathResetTerminal,
  pathClientTokenByPracticeId: pathClientTokenByPracticeId,
  registerTerminal: registerTerminal,
  getBusinessTerminals: getBusinessTerminals,
  getTerminals: getTerminals,
  getTerminal: getTerminal,
  updateTerminal: updateTerminal,
  deleteTerminal: deleteTerminal,
  getClientToken: getClientToken$1,
  resetTerminal: resetTerminal
});

function ownKeys$16(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$16(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$16(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$16(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var pathCreateHealthFundTransactionExport = function pathCreateHealthFundTransactionExport(healthFundId) {
  return "/healthfunds/" + healthFundId + "/transactionexport";
};
var pathGetHealthFundTransactionExport = function pathGetHealthFundTransactionExport(healthFundId, transactionExportId) {
  return "/healthfunds/" + healthFundId + "/transactionexports/" + transactionExportId;
};
/**
 * Get a transaction export for a healthfund
 * @param {String} healthFundId -  Health fund ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var createHealthFundTransactionExport = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(healthFundId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              healthFundId: healthFundId
            }, opts.hyperMediaEndpoint);
            return _context.abrupt("return", request(_objectSpread$16({}, opts, {
              path: pathCreateHealthFundTransactionExport(healthFundId)
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function createHealthFundTransactionExport(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * Get transaction export for a healthfund
 * @param {String} healthFundId - Health Fund ID
 * @param {String} transactionExportId - Transaction Export ID
 * @param {Object} query - query parameters
 * @param {Object} opts - Additional options
 */

var getHealthFundTransactionExport = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(healthFundId, transactionExportId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              healthFundId: healthFundId,
              transactionExportId: transactionExportId
            }, opts.hyperMediaEndpoint);
            return _context2.abrupt("return", request(_objectSpread$16({}, opts, {
              path: pathGetHealthFundTransactionExport(healthFundId, transactionExportId)
            }), {
              method: 'get',
              params: query
            }));

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function getHealthFundTransactionExport(_x4, _x5, _x6, _x7) {
    return _ref2.apply(this, arguments);
  };
}();

var transactionExport = /*#__PURE__*/Object.freeze({
  __proto__: null,
  pathCreateHealthFundTransactionExport: pathCreateHealthFundTransactionExport,
  pathGetHealthFundTransactionExport: pathGetHealthFundTransactionExport,
  createHealthFundTransactionExport: createHealthFundTransactionExport,
  getHealthFundTransactionExport: getHealthFundTransactionExport
});

function ownKeys$17(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$17(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$17(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$17(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var pathBusinessTransactions = function pathBusinessTransactions(businessId) {
  return "/businesses/" + businessId + "/transactions";
};

var pathBusinessTransaction = function pathBusinessTransaction(businessId, transactionId) {
  return "/businesses/" + businessId + "/transactions/" + transactionId;
};

var pathBusinessTransactionRefund = function pathBusinessTransactionRefund(businessId, transactionId) {
  return "/businesses/" + businessId + "/transactions/" + transactionId + "/refunds";
};

var pathBusinessPracticeTransactions = function pathBusinessPracticeTransactions(businessId, practiceId) {
  return "/businesses/" + businessId + "/practices/" + practiceId + "/transactions";
};

var pathBusinessPracticeStaffInvoices = function pathBusinessPracticeStaffInvoices(businessId, practiceId, staffId) {
  return "/businesses/" + businessId + "/practices/" + practiceId + "/staff/" + staffId + "/invoices";
};

var pathBusinessPracticeInvoices = function pathBusinessPracticeInvoices(businessId, practiceId) {
  return "/businesses/" + businessId + "/practices/" + practiceId + "/invoices";
};

var pathBusinessTransactionQuotes = function pathBusinessTransactionQuotes(businessId) {
  return "/businesses/" + businessId + "/transactions/quotes";
};

var pathBusinessPracticeStaffQuotes = function pathBusinessPracticeStaffQuotes(businessId, practiceId, staffId) {
  return "/businesses/" + businessId + "/practices/" + practiceId + "/staff/" + staffId + "/quotes";
};

var pathBusinessPracticeStaffTransactions = function pathBusinessPracticeStaffTransactions(businessId, practiceId, staffId) {
  return "/businesses/" + businessId + "/practices/" + practiceId + "/staff/" + staffId + "/transactions";
};

var pathBusinessTransactionsInvoiceReference = function pathBusinessTransactionsInvoiceReference(businessId, invoiceReference) {
  return "/businesses/" + businessId + "/transactions/invoicereference/" + invoiceReference;
};

var pathHealthFundTransaction = function pathHealthFundTransaction(healthFundId, transactionId) {
  return "/healthfunds/" + healthFundId + "/transactions/" + transactionId;
};

var pathReplyQuote = function pathReplyQuote(transactionId) {
  return "/transactions/" + transactionId + "/replyquote";
};

var pathTransactionApprove = function pathTransactionApprove(transactionId) {
  return "/transactions/" + transactionId + "/approve";
};

var pathTransactionSendReceipt = function pathTransactionSendReceipt(transactionId) {
  return "/transactions/" + transactionId + "/sendreceipt";
};

var pathTransactionByTransactionId = function pathTransactionByTransactionId(transactionId) {
  return "/transactions/" + transactionId;
};

var pathTransactionsForHealthFund = function pathTransactionsForHealthFund(healthFundId) {
  return "/healthfunds/" + healthFundId + "/transactions";
};

var pathHealthFundMemberTransactions = function pathHealthFundMemberTransactions(healthFundId, memberId) {
  return "/healthfunds/" + healthFundId + "/members/" + memberId + "/transactions";
};

var pathHealthFundTransactionsAssign = function pathHealthFundTransactionsAssign(healthFundId) {
  return "/healthfunds/" + healthFundId + "/transactions/assign";
};

var pathTransactionsByMember = function pathTransactionsByMember(memberId) {
  return "/members/" + memberId + "/transactions";
};

var pathTransactionTag = function pathTransactionTag(transactionId, tagId) {
  return "/transactions/" + transactionId + "/tags/" + tagId;
};

var pathValidateTransaction = function pathValidateTransaction(transactionId) {
  return "/transactions/" + transactionId + "/validate";
};

var pathTransactionSubmitBridgeClaim = function pathTransactionSubmitBridgeClaim(transactionId) {
  return "/transactions/" + transactionId + "/submitbridgeclaim";
};

var pathTransactionSubmitBridgePayment = function pathTransactionSubmitBridgePayment(transactionId) {
  return "/transactions/" + transactionId + "/submitbridgepayment";
};

var pathTransactionTriggerBridge = function pathTransactionTriggerBridge(transactionId) {
  return "/transactions/" + transactionId + "/triggerbridge";
};

var pathCreateInvoice = function pathCreateInvoice(businessId) {
  return "/businesses/" + businessId + "/transactions/invoices";
};

var pathCreateDraft = function pathCreateDraft(businessId) {
  return "/businesses/" + businessId + "/transactions/drafts";
};

var pathConvertDraft = function pathConvertDraft(transactionId) {
  return "/transactions/" + transactionId + "/convertdrafts";
};

var pathCreateSendClaim = function pathCreateSendClaim(transactionId) {
  return "/transactions/" + transactionId + "/claims";
};

var pathCompleteTransaction = function pathCompleteTransaction(transactionId) {
  return "/transactions/" + transactionId + "/completes";
};

var pathClaim = function pathClaim(transactionId, claimId) {
  return "/transactions/" + transactionId + "/claims/" + claimId;
};

var pathApproveClaim = function pathApproveClaim(transactionId, claimId) {
  return "/transactions/" + transactionId + "/claims/" + claimId + "/approves";
};

var pathCancelClaim = function pathCancelClaim(transactionId, claimId) {
  return "/transactions/" + transactionId + "/claims/" + claimId + "/cancels";
};

var pathSaveClaim = function pathSaveClaim(transactionId, claimId) {
  return "/transactions/" + transactionId + "/claims/" + claimId + "/savedetails";
};

var pathSubmitClaim = function pathSubmitClaim(transactionId, claimId) {
  return "/transactions/" + transactionId + "/claims/" + claimId + "/submits";
};

var pathTransactionClaimPdf = function pathTransactionClaimPdf(transactionId, claimId) {
  return "/transactions/" + transactionId + "/claims/" + claimId + "/pdf";
};

var pathTransactionClaimPdfV2 = '/transactions/pdfs';

var pathTransactionPays = function pathTransactionPays(transactionId) {
  return "/transactions/" + transactionId + "/pays";
};

var pathTransactionProcessingRequests = function pathTransactionProcessingRequests(transactionId) {
  return "/transactions/" + transactionId + "/processingrequests";
};

var pathTransactionCancel = function pathTransactionCancel(transactionId) {
  return "/transactions/" + transactionId + "/cancels";
};

var pathTransactionPaymentLink = function pathTransactionPaymentLink(transactionId) {
  return "/transactions/" + transactionId + "/paymentlink";
};

var pathTransactionRefund = function pathTransactionRefund(transactionId) {
  return "/transactions/" + transactionId + "/refunds";
};

var pathTransactionArchives = function pathTransactionArchives(transactionId) {
  return "/transactions/" + transactionId + "/archives";
};

var pathTransactionUnarchives = function pathTransactionUnarchives(transactionId) {
  return "/transactions/" + transactionId + "/unarchives";
};

var pathTransactionTerminalInput = function pathTransactionTerminalInput(transactionId) {
  return "/transactions/" + transactionId + "/terminalinput";
};

var pathTransactionTerminalCancel = function pathTransactionTerminalCancel(transactionId) {
  return "/transactions/" + transactionId + "/terminalcancel";
};

var pathTransactionPaymentRefund = function pathTransactionPaymentRefund(transactionId, paymentId) {
  return "/transactions/" + transactionId + "/payments/" + paymentId + "/refunds";
};

var pathCreateEclipseInPatientInvoice = function pathCreateEclipseInPatientInvoice() {
  return "/transactions/invoices/eclipse/imcw";
};

var pathCreateEclipseOverseasInvoice = function pathCreateEclipseOverseasInvoice() {
  return "/transactions/invoices/eclipse/ovsw";
};

var pathCreateEclipseOnlineEligibilityCheckInvoice = function pathCreateEclipseOnlineEligibilityCheckInvoice() {
  return "/transactions/invoices/eclipse/oecw";
};

var pathReconcileClaim = function pathReconcileClaim(transactionId, claimId) {
  return "/transactions/" + transactionId + "/claims/" + claimId + "/reconciles";
};

var pathSaveDraftEclipseInPatientInvoice = function pathSaveDraftEclipseInPatientInvoice() {
  return "/transactions/drafts/eclipse/imcw";
};

var pathSaveDraftEclipseOverseasInvoice = function pathSaveDraftEclipseOverseasInvoice() {
  return "/transactions/drafts/eclipse/ovsw";
};
/**
 * Approve a transaction
 * @param {String} transactionId - Transaction ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */


var approveTransaction = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(transactionId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              transactionId: transactionId
            }, opts.hyperMediaEndpoint);
            return _context.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathTransactionApprove(transactionId)
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function approveTransaction(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * Assign health fund transactions
 * @param {String} healthFundId - Health fund ID
 * @param {Object} opts - Additional options
 */

var assignHealthFundTransactions = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(healthFundId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              healthFundId: healthFundId
            }, opts.hyperMediaEndpoint);
            return _context2.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathHealthFundTransactionsAssign(healthFundId)
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function assignHealthFundTransactions(_x4, _x5, _x6) {
    return _ref2.apply(this, arguments);
  };
}();
/**
 * Assign health fund transaction to self
 * @param {String} healthFundId - Health fund ID
 * @param {String} transactionId - Transaction ID
 * @param {Object} opts - Additional options
 */

var assignHealthFundTransactionToSelf = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(healthFundId, transactionId, opts) {
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              transactionId: transactionId,
              healthFundId: healthFundId
            }, opts.hyperMediaEndpoint);
            return _context3.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathHealthFundTransaction(healthFundId, transactionId) + "/assigntome"
            }), {
              method: 'put'
            }));

          case 3:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function assignHealthFundTransactionToSelf(_x7, _x8, _x9) {
    return _ref3.apply(this, arguments);
  };
}();
/**
 * Assign transaction to self
 * @param {String} transactionId - Transaction ID
 * @param {Object} opts - Additional options
 */

var assignTransactionToSelf = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(transactionId, opts) {
    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              transactionId: transactionId
            }, opts.hyperMediaEndpoint);
            return _context4.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathTransactionByTransactionId(transactionId) + "/assigntome"
            }), {
              method: 'put'
            }));

          case 3:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));

  return function assignTransactionToSelf(_x10, _x11) {
    return _ref4.apply(this, arguments);
  };
}();
/**
 * Cancel a transaction
 * @param {String} transactionId - Transaction ID
 * @param {Object} opts - Additional options
 */

var cancelTransaction = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(transactionId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              transactionId: transactionId
            }, opts.hyperMediaEndpoint);
            return _context5.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathTransactionByTransactionId(transactionId) + "/cancellations"
            }), {
              data: body,
              method: 'post'
            }));

          case 3:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));

  return function cancelTransaction(_x12, _x13, _x14) {
    return _ref5.apply(this, arguments);
  };
}();
/**
 * Cancel a business transaction
 * @param {String} businessId - Business ID
 * @param {String} transactionId - Transaction ID
 * @param {Object} opts - Additional options
 */

var cancelBusinessTransaction = /*#__PURE__*/function () {
  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(businessId, transactionId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              transactionId: transactionId,
              businessId: businessId
            }, opts.hyperMediaEndpoint);
            return _context6.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathBusinessTransaction(businessId, transactionId) + "/cancellations"
            }), {
              data: body,
              method: 'post'
            }));

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));

  return function cancelBusinessTransaction(_x15, _x16, _x17, _x18) {
    return _ref6.apply(this, arguments);
  };
}();
/**
 * Create an invoice for a business
 * @param {String} businessId - Business ID
 * @param {String} practiceId - Practice ID
 * @param {String} staffId - Staff ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var createBusinessPracticeStaffMemberInvoice = /*#__PURE__*/function () {
  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(businessId, practiceId, staffId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              practiceId: practiceId,
              staffId: staffId
            }, opts.hyperMediaEndpoint);
            return _context7.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathBusinessPracticeStaffInvoices(businessId, practiceId, staffId)
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));

  return function createBusinessPracticeStaffMemberInvoice(_x19, _x20, _x21, _x22, _x23) {
    return _ref7.apply(this, arguments);
  };
}();
/**
 * Create an invoice for a business
 * @param {String} businessId - Business ID
 * @param {String} practiceId - Practice ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var createBusinessPracticeInvoice = /*#__PURE__*/function () {
  var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(businessId, practiceId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              practiceId: practiceId
            }, opts.hyperMediaEndpoint);
            return _context8.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathBusinessPracticeInvoices(businessId, practiceId)
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  }));

  return function createBusinessPracticeInvoice(_x24, _x25, _x26, _x27) {
    return _ref8.apply(this, arguments);
  };
}();
/**
 * Create a quote for a business
 * @param {String} businessId - Business ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var createBusinessTransactionQuote = /*#__PURE__*/function () {
  var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(businessId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId
            }, opts.hyperMediaEndpoint);
            return _context9.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathBusinessTransactionQuotes(businessId)
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));

  return function createBusinessTransactionQuote(_x28, _x29, _x30) {
    return _ref9.apply(this, arguments);
  };
}();
/**
 * Create a quote for a staff
 * @param {String} businessId - Business ID
 * @param {String} practiceId - Practice ID
 * @param {String} staffId - Staff ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var createBusinessPracticeStaffMemberQuote = /*#__PURE__*/function () {
  var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(businessId, practiceId, staffId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              practiceId: practiceId,
              staffId: staffId
            }, opts.hyperMediaEndpoint);
            return _context10.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathBusinessPracticeStaffQuotes(businessId, practiceId, staffId)
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context10.stop();
        }
      }
    }, _callee10);
  }));

  return function createBusinessPracticeStaffMemberQuote(_x31, _x32, _x33, _x34, _x35) {
    return _ref10.apply(this, arguments);
  };
}();
/**
 * Create a payment for a transaction
 * @param {String} transactionId - TransactionId
 * @param {String} source - Payment source (e.g. 'mastercard')
 * @param {String} nonce - Nonce (or client token)
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var createPayment = /*#__PURE__*/function () {
  var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(transactionId, source, nonce, body, opts) {
    var newBody;
    return _regeneratorRuntime.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              transactionId: transactionId
            }, opts.hyperMediaEndpoint);
            newBody = _objectSpread$17({}, body);

            if (source && nonce) {
              newBody.payment = {
                source: source,
                nonce: nonce
              };
            }

            return _context11.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathTransactionByTransactionId(transactionId) + "/payments"
            }), {
              method: 'post',
              data: newBody
            }));

          case 5:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));

  return function createPayment(_x36, _x37, _x38, _x39, _x40) {
    return _ref11.apply(this, arguments);
  };
}();
/**
 * Create a payment request for a transaction
 * @param {String} transactionId - TransactionId
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var createPaymentRequest = /*#__PURE__*/function () {
  var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(transactionId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee12$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              transactionId: transactionId
            }, opts.hyperMediaEndpoint);
            return _context12.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathTransactionByTransactionId(transactionId) + "/paymentrequests"
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context12.stop();
        }
      }
    }, _callee12);
  }));

  return function createPaymentRequest(_x41, _x42, _x43) {
    return _ref12.apply(this, arguments);
  };
}();
/**
 * Complete a quote
 * @param {String} transactionId - Transaction ID
 * @param {Object} memberId - Member ID
 * @param {Object} opts - Additional options
 */

var completeQuote = /*#__PURE__*/function () {
  var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(transactionId, memberId, opts) {
    return _regeneratorRuntime.wrap(function _callee13$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              transactionId: transactionId,
              memberId: memberId
            }, opts.hyperMediaEndpoint);
            return _context13.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathTransactionByTransactionId(transactionId) + "/completequote"
            }), {
              method: 'post',
              data: {
                memberId: memberId
              }
            }));

          case 3:
          case "end":
            return _context13.stop();
        }
      }
    }, _callee13);
  }));

  return function completeQuote(_x44, _x45, _x46) {
    return _ref13.apply(this, arguments);
  };
}();
/**
 * Delete a transaction tag
 * @param {String} transactionId - Transaction ID
 * @param {String} tagId - Tag ID
 * @param {Object} opts - Additional options
 */

var deleteTransactionTag = /*#__PURE__*/function () {
  var _ref14 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(transactionId, tagId, opts) {
    return _regeneratorRuntime.wrap(function _callee14$(_context14) {
      while (1) {
        switch (_context14.prev = _context14.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              transactionId: transactionId,
              tagId: tagId
            }, opts.hyperMediaEndpoint);
            return _context14.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathTransactionTag(transactionId, tagId)
            }), {
              method: 'delete'
            }));

          case 3:
          case "end":
            return _context14.stop();
        }
      }
    }, _callee14);
  }));

  return function deleteTransactionTag(_x47, _x48, _x49) {
    return _ref14.apply(this, arguments);
  };
}();
/**
 * Delete a transaction
 * @param {String} transactionId - Transaction ID
 * @param {Object} opts - Additional options
 */

var deleteTransaction = /*#__PURE__*/function () {
  var _ref15 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(transactionId, opts) {
    return _regeneratorRuntime.wrap(function _callee15$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              transactionId: transactionId
            }, opts.hyperMediaEndpoint);
            return _context15.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathTransactionByTransactionId(transactionId)
            }), {
              method: 'delete'
            }));

          case 3:
          case "end":
            return _context15.stop();
        }
      }
    }, _callee15);
  }));

  return function deleteTransaction(_x50, _x51) {
    return _ref15.apply(this, arguments);
  };
}();
/**
 * Get business transactions
 * @param {String} businessId - Business ID
 * @param {Object} query - query parameters
 * @param {Object} opts - Additional options
 */

var getBusinessTransactions = /*#__PURE__*/function () {
  var _ref16 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(businessId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee16$(_context16) {
      while (1) {
        switch (_context16.prev = _context16.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId
            }, opts.hyperMediaEndpoint);
            return _context16.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathBusinessTransactions(businessId)
            }), {
              method: 'get',
              params: query
            }));

          case 4:
          case "end":
            return _context16.stop();
        }
      }
    }, _callee16);
  }));

  return function getBusinessTransactions(_x52, _x53, _x54) {
    return _ref16.apply(this, arguments);
  };
}();
/**
 * Get business transaction
 * @param {String} businessId - Business ID
 * @param {String} transactionId - Transaction ID
 * @param {Object} opts - Additional options
 */

var getBusinessTransaction = /*#__PURE__*/function () {
  var _ref17 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(businessId, transactionId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              transactionId: transactionId
            }, opts.hyperMediaEndpoint);
            return _context17.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathBusinessTransaction(businessId, transactionId)
            }), {
              method: 'get',
              params: query
            }));

          case 3:
          case "end":
            return _context17.stop();
        }
      }
    }, _callee17);
  }));

  return function getBusinessTransaction(_x55, _x56, _x57, _x58) {
    return _ref17.apply(this, arguments);
  };
}();
/**
 * Get business transaction by invoice reference
 * @param {String} businessId - Business ID
 * @param {String} invoiceReference - Invoice reference
 * @param {Object} opts - Additional options
 */

var getBusinessTransactionByInvoiceReference = /*#__PURE__*/function () {
  var _ref18 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(businessId, invoiceReference, opts) {
    return _regeneratorRuntime.wrap(function _callee18$(_context18) {
      while (1) {
        switch (_context18.prev = _context18.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              invoiceReference: invoiceReference
            }, opts.hyperMediaEndpoint);
            return _context18.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathBusinessTransactionsInvoiceReference(businessId, invoiceReference)
            }), {
              method: 'get'
            }));

          case 3:
          case "end":
            return _context18.stop();
        }
      }
    }, _callee18);
  }));

  return function getBusinessTransactionByInvoiceReference(_x59, _x60, _x61) {
    return _ref18.apply(this, arguments);
  };
}();
/**
 * Get business transaction payment report
 * @param {String} businessId - Business ID
 * @param {String} transactionId - Transaction ID
 * @param {Object} opts - Additional options
 */

var getBusinessTransactionPaymentReport = /*#__PURE__*/function () {
  var _ref19 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(businessId, transactionId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee19$(_context19) {
      while (1) {
        switch (_context19.prev = _context19.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              transactionId: transactionId
            }, opts.hyperMediaEndpoint);
            return _context19.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathBusinessTransaction(businessId, transactionId) + "/paymentreport"
            }), {
              method: 'get',
              params: query
            }));

          case 3:
          case "end":
            return _context19.stop();
        }
      }
    }, _callee19);
  }));

  return function getBusinessTransactionPaymentReport(_x62, _x63, _x64, _x65) {
    return _ref19.apply(this, arguments);
  };
}();
/**
 * Get business transaction processing report
 * @param {String} businessId - Business ID
 * @param {String} transactionId - Transaction ID
 * @param {Object} opts - Additional options
 */

var getBusinessTransactionProcessingReport = /*#__PURE__*/function () {
  var _ref20 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20(businessId, transactionId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee20$(_context20) {
      while (1) {
        switch (_context20.prev = _context20.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              transactionId: transactionId
            }, opts.hyperMediaEndpoint);
            return _context20.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathBusinessTransaction(businessId, transactionId) + "/processingreport"
            }), {
              method: 'get',
              params: query
            }));

          case 3:
          case "end":
            return _context20.stop();
        }
      }
    }, _callee20);
  }));

  return function getBusinessTransactionProcessingReport(_x66, _x67, _x68, _x69) {
    return _ref20.apply(this, arguments);
  };
}();
/**
 * Get business practice transactions
 * @param {String} businessId - Business ID
 * @param {String} practiceId - Practice ID
 * @param {Object} query - query parameters
 * @param {Object} opts - Additional options
 */

var getBusinessPracticeTransactions = /*#__PURE__*/function () {
  var _ref21 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(businessId, practiceId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee21$(_context21) {
      while (1) {
        switch (_context21.prev = _context21.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              practiceId: practiceId
            }, opts.hyperMediaEndpoint);
            return _context21.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathBusinessPracticeTransactions(businessId, practiceId)
            }), {
              method: 'get',
              params: query
            }));

          case 4:
          case "end":
            return _context21.stop();
        }
      }
    }, _callee21);
  }));

  return function getBusinessPracticeTransactions(_x70, _x71, _x72, _x73) {
    return _ref21.apply(this, arguments);
  };
}();
/**
 * Get business staff transactions
 * @param {String} businessId - Business ID
 * @param {String} practiceId - Practice ID
 * @param {String} staffId - Staff ID
 * @param {Object} query - query parameters
 * @param {Object} opts - Additional options
 */

var getBusinessPracticeStaffTransactions = /*#__PURE__*/function () {
  var _ref22 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22(businessId, practiceId, staffId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee22$(_context22) {
      while (1) {
        switch (_context22.prev = _context22.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              practiceId: practiceId,
              staffId: staffId
            }, opts.hyperMediaEndpoint);
            return _context22.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathBusinessPracticeStaffTransactions(businessId, practiceId, staffId)
            }), {
              method: 'get',
              params: query
            }));

          case 4:
          case "end":
            return _context22.stop();
        }
      }
    }, _callee22);
  }));

  return function getBusinessPracticeStaffTransactions(_x74, _x75, _x76, _x77, _x78) {
    return _ref22.apply(this, arguments);
  };
}();
/**
 * Get transactions by health fund
 * @param {String} healthFundId - Health fund ID
 * @param {Object} query - query parameters
 * @param {Object} opts - Additional options
 */

var getTransactionsForHealthFund = /*#__PURE__*/function () {
  var _ref23 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23(healthFundId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee23$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              healthFundId: healthFundId
            }, opts.hyperMediaEndpoint);
            return _context23.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathTransactionsForHealthFund(healthFundId)
            }), {
              method: 'get',
              params: query
            }));

          case 4:
          case "end":
            return _context23.stop();
        }
      }
    }, _callee23);
  }));

  return function getTransactionsForHealthFund(_x79, _x80, _x81) {
    return _ref23.apply(this, arguments);
  };
}();
/**
 * Get transaction by transaction ID and health fund ID
 * @param {String} healthFundId - Health fund ID
 * @param {String} transactionId - Transaction ID
 * @param {Object} opts - Additional options
 */

var getHealthFundTransaction = /*#__PURE__*/function () {
  var _ref24 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24(healthFundId, transactionId, opts) {
    return _regeneratorRuntime.wrap(function _callee24$(_context24) {
      while (1) {
        switch (_context24.prev = _context24.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              healthFundId: healthFundId,
              transactionId: transactionId
            }, opts.hyperMediaEndpoint);
            return _context24.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathHealthFundTransaction(healthFundId, transactionId)
            }), {
              method: 'get'
            }));

          case 3:
          case "end":
            return _context24.stop();
        }
      }
    }, _callee24);
  }));

  return function getHealthFundTransaction(_x82, _x83, _x84) {
    return _ref24.apply(this, arguments);
  };
}();
/**
 * Get transactions by member
 * @param {String} memberId - Health fund ID
 * @param {Object} query - query parameters
 * @param {Object} opts - Additional options
 */

var getTransactionsByMember = /*#__PURE__*/function () {
  var _ref25 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee25(memberId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee25$(_context25) {
      while (1) {
        switch (_context25.prev = _context25.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              memberId: memberId
            }, opts.hyperMediaEndpoint);
            return _context25.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathTransactionsByMember(memberId)
            }), {
              method: 'get',
              params: query
            }));

          case 4:
          case "end":
            return _context25.stop();
        }
      }
    }, _callee25);
  }));

  return function getTransactionsByMember(_x85, _x86, _x87) {
    return _ref25.apply(this, arguments);
  };
}();
/**
 * Get health fund member transactions
 * @param {String} healthFundId - Health fund ID
 * @param {String} memberId - Member ID
 * @param {Object} query - query parameters
 * @param {Object} opts - Additional options
 */

var getHealthFundMemberTransactions = /*#__PURE__*/function () {
  var _ref26 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee26(healthFundId, memberId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee26$(_context26) {
      while (1) {
        switch (_context26.prev = _context26.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              healthFundId: healthFundId
            }, opts.hyperMediaEndpoint);
            return _context26.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathHealthFundMemberTransactions(healthFundId, memberId)
            }), {
              method: 'get',
              params: query
            }));

          case 4:
          case "end":
            return _context26.stop();
        }
      }
    }, _callee26);
  }));

  return function getHealthFundMemberTransactions(_x88, _x89, _x90, _x91) {
    return _ref26.apply(this, arguments);
  };
}();
/**
 * Get transaction by transaction ID.
 * @param {String} transactionId - Transaction ID
 * @param {Object} opts - Additional options
 */

var getTransactionByTransactionId = /*#__PURE__*/function () {
  var _ref27 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee27(transactionId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee27$(_context27) {
      while (1) {
        switch (_context27.prev = _context27.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              transactionId: transactionId
            }, opts.hyperMediaEndpoint);
            return _context27.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathTransactionByTransactionId(transactionId)
            }), {
              method: 'get',
              params: query
            }));

          case 3:
          case "end":
            return _context27.stop();
        }
      }
    }, _callee27);
  }));

  return function getTransactionByTransactionId(_x92, _x93, _x94) {
    return _ref27.apply(this, arguments);
  };
}();
/**
 * Get transaction PDF
 * @param {String} transactionId - Transaction ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var getTransactionPDF = /*#__PURE__*/function () {
  var _ref28 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee28(transactionId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee28$(_context28) {
      while (1) {
        switch (_context28.prev = _context28.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              transactionId: transactionId
            }, opts.hyperMediaEndpoint);
            return _context28.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathTransactionByTransactionId(transactionId) + "/pdf"
            }), {
              method: 'post',
              data: body,
              responseType: 'arraybuffer'
            }));

          case 3:
          case "end":
            return _context28.stop();
        }
      }
    }, _callee28);
  }));

  return function getTransactionPDF(_x95, _x96, _x97) {
    return _ref28.apply(this, arguments);
  };
}();
/**
 * Get transaction claim PDF
 * @param {String} transactionId - Transaction ID
 * @param {String} claimId - Claim ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var getTransactionClaimPDF = /*#__PURE__*/function () {
  var _ref29 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee29(transactionId, claimId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee29$(_context29) {
      while (1) {
        switch (_context29.prev = _context29.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              claimId: claimId,
              transactionId: transactionId
            }, opts.hyperMediaEndpoint);
            return _context29.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathTransactionClaimPdf(transactionId, claimId)
            }), {
              method: 'post',
              data: body,
              responseType: 'arraybuffer'
            }));

          case 3:
          case "end":
            return _context29.stop();
        }
      }
    }, _callee29);
  }));

  return function getTransactionClaimPDF(_x98, _x99, _x100, _x101) {
    return _ref29.apply(this, arguments);
  };
}();
/**
 * TODO: Use this endpoint for all funder claims, once the funder is supported in the API,
 * replacing the legacy `getTransactionClaimPDF`.
 *
 * Get Eclipse transaction claim PDF
 * @param {Object} body - Request body including `transactionId` and `claimId`
 * @param {Object} opts - Additional options
 */

var getTransactionClaimPdfV2 = /*#__PURE__*/function () {
  var _ref30 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee30(body, opts) {
    return _regeneratorRuntime.wrap(function _callee30$(_context30) {
      while (1) {
        switch (_context30.prev = _context30.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            return _context30.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathTransactionClaimPdfV2
            }), {
              method: 'post',
              data: body,
              responseType: 'arraybuffer'
            }));

          case 2:
          case "end":
            return _context30.stop();
        }
      }
    }, _callee30);
  }));

  return function getTransactionClaimPdfV2(_x102, _x103) {
    return _ref30.apply(this, arguments);
  };
}();
/**
 * Reply to a quote
 * @param {String} transactionId - TransactionId
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var replyToQuote = /*#__PURE__*/function () {
  var _ref31 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee31(transactionId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee31$(_context31) {
      while (1) {
        switch (_context31.prev = _context31.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              transactionId: transactionId
            }, opts.hyperMediaEndpoint);
            return _context31.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathReplyQuote(transactionId)
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context31.stop();
        }
      }
    }, _callee31);
  }));

  return function replyToQuote(_x104, _x105, _x106) {
    return _ref31.apply(this, arguments);
  };
}();
/**
 * Send receipt
 * @param {String} transactionId - TransactionId
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var sendReceipt$1 = /*#__PURE__*/function () {
  var _ref32 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee32(transactionId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee32$(_context32) {
      while (1) {
        switch (_context32.prev = _context32.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              transactionId: transactionId
            }, opts.hyperMediaEndpoint);
            return _context32.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathTransactionSendReceipt(transactionId)
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context32.stop();
        }
      }
    }, _callee32);
  }));

  return function sendReceipt(_x107, _x108, _x109) {
    return _ref32.apply(this, arguments);
  };
}();
/**
 * Submit an invoice
 * @param {String} transactionId - TransactionId
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var submitInvoice = /*#__PURE__*/function () {
  var _ref33 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee33(transactionId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee33$(_context33) {
      while (1) {
        switch (_context33.prev = _context33.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              transactionId: transactionId
            }, opts.hyperMediaEndpoint);
            return _context33.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathTransactionByTransactionId(transactionId) + "/submitinvoice"
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context33.stop();
        }
      }
    }, _callee33);
  }));

  return function submitInvoice(_x110, _x111, _x112) {
    return _ref33.apply(this, arguments);
  };
}();
/**
 * Update transaction
 * @param {String} transactionId - TransactionId
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var updateTransaction = /*#__PURE__*/function () {
  var _ref34 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee34(transactionId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee34$(_context34) {
      while (1) {
        switch (_context34.prev = _context34.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              transactionId: transactionId
            }, opts.hyperMediaEndpoint);
            return _context34.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathTransactionByTransactionId(transactionId)
            }), {
              method: 'put',
              data: body
            }));

          case 3:
          case "end":
            return _context34.stop();
        }
      }
    }, _callee34);
  }));

  return function updateTransaction(_x113, _x114, _x115) {
    return _ref34.apply(this, arguments);
  };
}();
/**
 * Validate a transaction
 * @param {String} transactionId - TransactionId
 * @param {Object} opts - Additional options
 */

var validateTransaction = /*#__PURE__*/function () {
  var _ref35 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee35(transactionId, opts) {
    return _regeneratorRuntime.wrap(function _callee35$(_context35) {
      while (1) {
        switch (_context35.prev = _context35.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              transactionId: transactionId
            }, opts.hyperMediaEndpoint);
            return _context35.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathValidateTransaction(transactionId)
            }), {
              method: 'post'
            }));

          case 3:
          case "end":
            return _context35.stop();
        }
      }
    }, _callee35);
  }));

  return function validateTransaction(_x116, _x117) {
    return _ref35.apply(this, arguments);
  };
}();
/**
 * Submits a Bridge's claim response to transaction
 * @param {String} transactionId - TransactionId
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var submitTransactionBridgeClaim = /*#__PURE__*/function () {
  var _ref36 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee36(transactionId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee36$(_context36) {
      while (1) {
        switch (_context36.prev = _context36.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              transactionId: transactionId
            }, opts.hyperMediaEndpoint);
            return _context36.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathTransactionSubmitBridgeClaim(transactionId)
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context36.stop();
        }
      }
    }, _callee36);
  }));

  return function submitTransactionBridgeClaim(_x118, _x119, _x120) {
    return _ref36.apply(this, arguments);
  };
}();
/**
 * Submits a Bridge's payment response to transaction
 * @param {String} transactionId - TransactionId
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var submitTransactionBridgePayment = /*#__PURE__*/function () {
  var _ref37 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee37(transactionId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee37$(_context37) {
      while (1) {
        switch (_context37.prev = _context37.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              transactionId: transactionId
            }, opts.hyperMediaEndpoint);
            return _context37.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathTransactionSubmitBridgePayment(transactionId)
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context37.stop();
        }
      }
    }, _callee37);
  }));

  return function submitTransactionBridgePayment(_x121, _x122, _x123) {
    return _ref37.apply(this, arguments);
  };
}();
/**
 * Trigger's a bridge request for a transaction
 * @param {String} transactionId - TransactionId
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var triggerBridge = /*#__PURE__*/function () {
  var _ref38 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee38(transactionId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee38$(_context38) {
      while (1) {
        switch (_context38.prev = _context38.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              transactionId: transactionId
            }, opts.hyperMediaEndpoint);
            return _context38.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathTransactionTriggerBridge(transactionId)
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context38.stop();
        }
      }
    }, _callee38);
  }));

  return function triggerBridge(_x124, _x125, _x126) {
    return _ref38.apply(this, arguments);
  };
}();
/**
 * Create invoice
 * @param {String} businessId - BusinessId
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var createInvoice = /*#__PURE__*/function () {
  var _ref39 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee39(businessId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee39$(_context39) {
      while (1) {
        switch (_context39.prev = _context39.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId
            }, opts.hyperMediaEndpoint);
            return _context39.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathCreateInvoice(businessId)
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context39.stop();
        }
      }
    }, _callee39);
  }));

  return function createInvoice(_x127, _x128, _x129) {
    return _ref39.apply(this, arguments);
  };
}();
/**
 * Create or send a claim
 * @param {String} transactionId - TransactionId
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var createSendClaim = /*#__PURE__*/function () {
  var _ref40 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee40(transactionId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee40$(_context40) {
      while (1) {
        switch (_context40.prev = _context40.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              transactionId: transactionId
            }, opts.hyperMediaEndpoint);
            return _context40.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathCreateSendClaim(transactionId)
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context40.stop();
        }
      }
    }, _callee40);
  }));

  return function createSendClaim(_x130, _x131, _x132) {
    return _ref40.apply(this, arguments);
  };
}();
/**
 * Update a claim
 * @param {String} transactionId - TransactionId
 * @param {String} claimId - ClaimId
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var updateClaim = /*#__PURE__*/function () {
  var _ref41 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee41(transactionId, claimId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee41$(_context41) {
      while (1) {
        switch (_context41.prev = _context41.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              claimId: claimId,
              transactionId: transactionId
            }, opts.hyperMediaEndpoint);
            return _context41.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathClaim(transactionId, claimId)
            }), {
              method: 'put',
              data: body
            }));

          case 3:
          case "end":
            return _context41.stop();
        }
      }
    }, _callee41);
  }));

  return function updateClaim(_x133, _x134, _x135, _x136) {
    return _ref41.apply(this, arguments);
  };
}();
/**
 * Complete a transaction
 * @param {String} transactionId - TransactionId
 * @param {Object} opts - Additional options
 */

var completeTransaction = /*#__PURE__*/function () {
  var _ref42 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee42(transactionId, opts) {
    return _regeneratorRuntime.wrap(function _callee42$(_context42) {
      while (1) {
        switch (_context42.prev = _context42.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              transactionId: transactionId
            }, opts.hyperMediaEndpoint);
            return _context42.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathCompleteTransaction(transactionId)
            }), {
              method: 'post'
            }));

          case 3:
          case "end":
            return _context42.stop();
        }
      }
    }, _callee42);
  }));

  return function completeTransaction(_x137, _x138) {
    return _ref42.apply(this, arguments);
  };
}();
/**
 * Approves a claim
 * @param {String} transactionId - TransactionId
 * @param {String} claimId - ClaimId
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var approveClaim = /*#__PURE__*/function () {
  var _ref43 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee43(transactionId, claimId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee43$(_context43) {
      while (1) {
        switch (_context43.prev = _context43.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              transactionId: transactionId
            }, opts.hyperMediaEndpoint);
            return _context43.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathApproveClaim(transactionId, claimId)
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context43.stop();
        }
      }
    }, _callee43);
  }));

  return function approveClaim(_x139, _x140, _x141, _x142) {
    return _ref43.apply(this, arguments);
  };
}();
/**
 * Cancels a claim
 * @param {String} transactionId - Transaction ID
 * @param {String} claimId - Claim ID
 * @param {Object} opts - Additional options
 */

var cancelClaim = /*#__PURE__*/function () {
  var _ref44 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee44(transactionId, claimId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee44$(_context44) {
      while (1) {
        switch (_context44.prev = _context44.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              claimId: claimId,
              transactionId: transactionId
            }, opts.hyperMediaEndpoint);
            return _context44.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathCancelClaim(transactionId, claimId)
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context44.stop();
        }
      }
    }, _callee44);
  }));

  return function cancelClaim(_x143, _x144, _x145, _x146) {
    return _ref44.apply(this, arguments);
  };
}();
/**
 * Submit a claim
 * @param {String} transactionId - TransactionId
 * @param {String} claimId - ClaimId
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var submitClaim = /*#__PURE__*/function () {
  var _ref45 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee45(transactionId, claimId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee45$(_context45) {
      while (1) {
        switch (_context45.prev = _context45.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              transactionId: transactionId
            }, opts.hyperMediaEndpoint);
            return _context45.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathSubmitClaim(transactionId, claimId)
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context45.stop();
        }
      }
    }, _callee45);
  }));

  return function submitClaim(_x147, _x148, _x149, _x150) {
    return _ref45.apply(this, arguments);
  };
}();
/**
 * Save claim details
 * @param {String} transactionId - Transaction ID
 * @param {String} claimId - Claim ID
 * @param {Object} opts - Additional options
 */

var saveClaimDetails = /*#__PURE__*/function () {
  var _ref46 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee46(transactionId, claimId, opts) {
    return _regeneratorRuntime.wrap(function _callee46$(_context46) {
      while (1) {
        switch (_context46.prev = _context46.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              claimId: claimId,
              transactionId: transactionId
            }, opts.hyperMediaEndpoint);
            return _context46.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathSaveClaim(transactionId, claimId)
            }), {
              method: 'post'
            }));

          case 3:
          case "end":
            return _context46.stop();
        }
      }
    }, _callee46);
  }));

  return function saveClaimDetails(_x151, _x152, _x153) {
    return _ref46.apply(this, arguments);
  };
}();
/**
 * Create payment
 * @param {String} transactionId - Transaction ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var pay = /*#__PURE__*/function () {
  var _ref47 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee47(transactionId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee47$(_context47) {
      while (1) {
        switch (_context47.prev = _context47.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              transactionId: transactionId
            }, opts.hyperMediaEndpoint);
            return _context47.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathTransactionPays(transactionId)
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context47.stop();
        }
      }
    }, _callee47);
  }));

  return function pay(_x154, _x155, _x156) {
    return _ref47.apply(this, arguments);
  };
}();
/**
 * Send a processing request
 * @param {String} transactionId - TransactionId
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var sendProcessingRequest$1 = /*#__PURE__*/function () {
  var _ref48 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee48(transactionId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee48$(_context48) {
      while (1) {
        switch (_context48.prev = _context48.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              transactionId: transactionId
            }, opts.hyperMediaEndpoint);
            return _context48.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathTransactionProcessingRequests(transactionId)
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context48.stop();
        }
      }
    }, _callee48);
  }));

  return function sendProcessingRequest(_x157, _x158, _x159) {
    return _ref48.apply(this, arguments);
  };
}();
/**
 * Cancel invoice
 * @param {String} transactionId - TransactionId
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var cancelInvoice = /*#__PURE__*/function () {
  var _ref49 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee49(transactionId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee49$(_context49) {
      while (1) {
        switch (_context49.prev = _context49.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              transactionId: transactionId
            }, opts.hyperMediaEndpoint);
            return _context49.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathTransactionCancel(transactionId)
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context49.stop();
        }
      }
    }, _callee49);
  }));

  return function cancelInvoice(_x160, _x161, _x162) {
    return _ref49.apply(this, arguments);
  };
}();
/**
 * Get payment link
 * @param {String} transactionId - TransactionId
 * @param {Object} opts - Additional options
 */

var getPaymentLink$1 = /*#__PURE__*/function () {
  var _ref50 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee50(transactionId, opts) {
    return _regeneratorRuntime.wrap(function _callee50$(_context50) {
      while (1) {
        switch (_context50.prev = _context50.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              transactionId: transactionId
            }, opts.hyperMediaEndpoint);
            return _context50.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathTransactionPaymentLink(transactionId)
            }), {
              method: 'get'
            }));

          case 3:
          case "end":
            return _context50.stop();
        }
      }
    }, _callee50);
  }));

  return function getPaymentLink(_x163, _x164) {
    return _ref50.apply(this, arguments);
  };
}();
/**
 * Refund transaction
 * @param {String} businessId - BusinessId
 * @param {String} transactionId - TransactionId
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var refundByBusiness = /*#__PURE__*/function () {
  var _ref51 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee51(businessId, transactionId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee51$(_context51) {
      while (1) {
        switch (_context51.prev = _context51.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              transactionId: transactionId
            }, opts.hyperMediaEndpoint);
            return _context51.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathBusinessTransactionRefund(businessId, transactionId)
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context51.stop();
        }
      }
    }, _callee51);
  }));

  return function refundByBusiness(_x165, _x166, _x167, _x168) {
    return _ref51.apply(this, arguments);
  };
}();
/**
 * Refund transaction
 * @param {String} transactionId - TransactionId
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var refund = /*#__PURE__*/function () {
  var _ref52 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee52(transactionId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee52$(_context52) {
      while (1) {
        switch (_context52.prev = _context52.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              transactionId: transactionId
            }, opts.hyperMediaEndpoint);
            return _context52.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathTransactionRefund(transactionId)
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context52.stop();
        }
      }
    }, _callee52);
  }));

  return function refund(_x169, _x170, _x171) {
    return _ref52.apply(this, arguments);
  };
}();
/**
 * Save invoice as draft
 * @param {String} businessId - BusinessId
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var saveDraft = /*#__PURE__*/function () {
  var _ref53 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee53(businessId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee53$(_context53) {
      while (1) {
        switch (_context53.prev = _context53.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId
            }, opts.hyperMediaEndpoint);
            return _context53.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathCreateDraft(businessId)
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context53.stop();
        }
      }
    }, _callee53);
  }));

  return function saveDraft(_x172, _x173, _x174) {
    return _ref53.apply(this, arguments);
  };
}();
/**
 * Convert draft to an invoice
 * @param {String} transactionId - Transaction ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var convertDraft = /*#__PURE__*/function () {
  var _ref54 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee54(transactionId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee54$(_context54) {
      while (1) {
        switch (_context54.prev = _context54.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              transactionId: transactionId
            }, opts.hyperMediaEndpoint);
            return _context54.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathConvertDraft(transactionId)
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context54.stop();
        }
      }
    }, _callee54);
  }));

  return function convertDraft(_x175, _x176, _x177) {
    return _ref54.apply(this, arguments);
  };
}();
/**
 * Archive an invoice
 * @param {String} transactionId - Transaction ID
 * @param {Object} opts - Additional options
 */

var archive = /*#__PURE__*/function () {
  var _ref55 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee55(transactionId, opts) {
    return _regeneratorRuntime.wrap(function _callee55$(_context55) {
      while (1) {
        switch (_context55.prev = _context55.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              transactionId: transactionId
            }, opts.hyperMediaEndpoint);
            return _context55.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathTransactionArchives(transactionId)
            }), {
              method: 'put'
            }));

          case 3:
          case "end":
            return _context55.stop();
        }
      }
    }, _callee55);
  }));

  return function archive(_x178, _x179) {
    return _ref55.apply(this, arguments);
  };
}();
/**
 * Unarchive an invoice
 * @param {String} transactionId - Transaction ID
 * @param {Object} opts - Additional options
 */

var unarchive = /*#__PURE__*/function () {
  var _ref56 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee56(transactionId, opts) {
    return _regeneratorRuntime.wrap(function _callee56$(_context56) {
      while (1) {
        switch (_context56.prev = _context56.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              transactionId: transactionId
            }, opts.hyperMediaEndpoint);
            return _context56.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathTransactionUnarchives(transactionId)
            }), {
              method: 'put'
            }));

          case 3:
          case "end":
            return _context56.stop();
        }
      }
    }, _callee56);
  }));

  return function unarchive(_x180, _x181) {
    return _ref56.apply(this, arguments);
  };
}();
/**
 * Send terminal input
 * @param {String} transactionId - Transaction ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var terminalInput = /*#__PURE__*/function () {
  var _ref57 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee57(transactionId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee57$(_context57) {
      while (1) {
        switch (_context57.prev = _context57.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              transactionId: transactionId
            }, opts.hyperMediaEndpoint);
            return _context57.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathTransactionTerminalInput(transactionId)
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context57.stop();
        }
      }
    }, _callee57);
  }));

  return function terminalInput(_x182, _x183, _x184) {
    return _ref57.apply(this, arguments);
  };
}();
/**
 * Send terminal cancellation
 * @param {String} transactionId - Transaction ID
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var terminalCancellation = /*#__PURE__*/function () {
  var _ref58 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee58(transactionId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee58$(_context58) {
      while (1) {
        switch (_context58.prev = _context58.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              transactionId: transactionId
            }, opts.hyperMediaEndpoint);
            return _context58.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathTransactionTerminalCancel(transactionId)
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context58.stop();
        }
      }
    }, _callee58);
  }));

  return function terminalCancellation(_x185, _x186, _x187) {
    return _ref58.apply(this, arguments);
  };
}();
/**
 * Refund transaction's payment
 * @param {String} transactionId - TransactionId
 * @param {String} paymentId - PaymentId
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var refundPayment = /*#__PURE__*/function () {
  var _ref59 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee59(transactionId, paymentId, body, opts) {
    return _regeneratorRuntime.wrap(function _callee59$(_context59) {
      while (1) {
        switch (_context59.prev = _context59.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              transactionId: transactionId
            }, opts.hyperMediaEndpoint);
            return _context59.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathTransactionPaymentRefund(transactionId, paymentId)
            }), {
              method: 'post',
              data: body
            }));

          case 3:
          case "end":
            return _context59.stop();
        }
      }
    }, _callee59);
  }));

  return function refundPayment(_x188, _x189, _x190, _x191) {
    return _ref59.apply(this, arguments);
  };
}();
/**
 * Create ECLIPSE invoice - In Patient
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var createEclipseInPatientInvoice = /*#__PURE__*/function () {
  var _ref60 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee60(body, opts) {
    return _regeneratorRuntime.wrap(function _callee60$(_context60) {
      while (1) {
        switch (_context60.prev = _context60.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            return _context60.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathCreateEclipseInPatientInvoice()
            }), {
              method: 'post',
              data: body
            }));

          case 2:
          case "end":
            return _context60.stop();
        }
      }
    }, _callee60);
  }));

  return function createEclipseInPatientInvoice(_x192, _x193) {
    return _ref60.apply(this, arguments);
  };
}();
/**
 * Create ECLIPSE invoice - Overseas
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var createEclipseOverseasInvoice = /*#__PURE__*/function () {
  var _ref61 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee61(body, opts) {
    return _regeneratorRuntime.wrap(function _callee61$(_context61) {
      while (1) {
        switch (_context61.prev = _context61.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            return _context61.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathCreateEclipseOverseasInvoice()
            }), {
              method: 'post',
              data: body
            }));

          case 2:
          case "end":
            return _context61.stop();
        }
      }
    }, _callee61);
  }));

  return function createEclipseOverseasInvoice(_x194, _x195) {
    return _ref61.apply(this, arguments);
  };
}();
/**
 * Create ECLIPSE invoice - Online Eligibility Check
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var createEclipseOnlineEligibilityCheckInvoice = /*#__PURE__*/function () {
  var _ref62 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee62(body, opts) {
    return _regeneratorRuntime.wrap(function _callee62$(_context62) {
      while (1) {
        switch (_context62.prev = _context62.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            return _context62.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathCreateEclipseOnlineEligibilityCheckInvoice()
            }), {
              method: 'post',
              data: body
            }));

          case 2:
          case "end":
            return _context62.stop();
        }
      }
    }, _callee62);
  }));

  return function createEclipseOnlineEligibilityCheckInvoice(_x196, _x197) {
    return _ref62.apply(this, arguments);
  };
}();
/**
 * Get business ECLIPSE transaction payment report
 * @param {String} businessId - Business ID
 * @param {String} transactionId - Transaction ID
 * @param {Object} opts - Additional options
 */

var getBusinessEclipseTransactionPaymentReport = /*#__PURE__*/function () {
  var _ref63 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee63(businessId, transactionId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee63$(_context63) {
      while (1) {
        switch (_context63.prev = _context63.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              transactionId: transactionId
            }, opts.hyperMediaEndpoint);
            return _context63.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathBusinessTransaction(businessId, transactionId) + "/paymentreport/eclipse"
            }), {
              method: 'get',
              params: query
            }));

          case 3:
          case "end":
            return _context63.stop();
        }
      }
    }, _callee63);
  }));

  return function getBusinessEclipseTransactionPaymentReport(_x198, _x199, _x200, _x201) {
    return _ref63.apply(this, arguments);
  };
}();
/**
 * Get business ECLIPSE transaction processing report
 * @param {String} businessId - Business ID
 * @param {String} transactionId - Transaction ID
 * @param {Object} opts - Additional options
 */

var getBusinessEclipseTransactionProcessingReport = /*#__PURE__*/function () {
  var _ref64 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee64(businessId, transactionId, query, opts) {
    return _regeneratorRuntime.wrap(function _callee64$(_context64) {
      while (1) {
        switch (_context64.prev = _context64.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              businessId: businessId,
              transactionId: transactionId
            }, opts.hyperMediaEndpoint);
            return _context64.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathBusinessTransaction(businessId, transactionId) + "/processingreport/eclipse"
            }), {
              method: 'get',
              params: query
            }));

          case 3:
          case "end":
            return _context64.stop();
        }
      }
    }, _callee64);
  }));

  return function getBusinessEclipseTransactionProcessingReport(_x202, _x203, _x204, _x205) {
    return _ref64.apply(this, arguments);
  };
}();
/**
 * Reconciles a claim
 * @param {String} transactionId - TransactionId
 * @param {String} claimId - ClaimId
 * @param {Object} opts - Additional options
 */

var reconcileClaim = /*#__PURE__*/function () {
  var _ref65 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee65(transactionId, claimId, opts) {
    return _regeneratorRuntime.wrap(function _callee65$(_context65) {
      while (1) {
        switch (_context65.prev = _context65.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              transactionId: transactionId
            }, opts.hyperMediaEndpoint);
            return _context65.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathReconcileClaim(transactionId, claimId)
            }), {
              method: 'post'
            }));

          case 3:
          case "end":
            return _context65.stop();
        }
      }
    }, _callee65);
  }));

  return function reconcileClaim(_x206, _x207, _x208) {
    return _ref65.apply(this, arguments);
  };
}();
/**
 * Save draft for ECLIPSE invoice - In Patient
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var saveDraftEclipseInPatientInvoice = /*#__PURE__*/function () {
  var _ref66 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee66(body, opts) {
    return _regeneratorRuntime.wrap(function _callee66$(_context66) {
      while (1) {
        switch (_context66.prev = _context66.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            return _context66.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathSaveDraftEclipseInPatientInvoice()
            }), {
              method: 'post',
              data: body
            }));

          case 2:
          case "end":
            return _context66.stop();
        }
      }
    }, _callee66);
  }));

  return function saveDraftEclipseInPatientInvoice(_x209, _x210) {
    return _ref66.apply(this, arguments);
  };
}();
/**
 * Save draft ECLIPSE invoice - Overseas
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var saveDraftEclipseOverseasInvoice = /*#__PURE__*/function () {
  var _ref67 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee67(body, opts) {
    return _regeneratorRuntime.wrap(function _callee67$(_context67) {
      while (1) {
        switch (_context67.prev = _context67.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            return _context67.abrupt("return", request(_objectSpread$17({}, opts, {
              path: pathSaveDraftEclipseOverseasInvoice()
            }), {
              method: 'post',
              data: body
            }));

          case 2:
          case "end":
            return _context67.stop();
        }
      }
    }, _callee67);
  }));

  return function saveDraftEclipseOverseasInvoice(_x211, _x212) {
    return _ref67.apply(this, arguments);
  };
}();

var transactions = /*#__PURE__*/Object.freeze({
  __proto__: null,
  approveTransaction: approveTransaction,
  assignHealthFundTransactions: assignHealthFundTransactions,
  assignHealthFundTransactionToSelf: assignHealthFundTransactionToSelf,
  assignTransactionToSelf: assignTransactionToSelf,
  cancelTransaction: cancelTransaction,
  cancelBusinessTransaction: cancelBusinessTransaction,
  createBusinessPracticeStaffMemberInvoice: createBusinessPracticeStaffMemberInvoice,
  createBusinessPracticeInvoice: createBusinessPracticeInvoice,
  createBusinessTransactionQuote: createBusinessTransactionQuote,
  createBusinessPracticeStaffMemberQuote: createBusinessPracticeStaffMemberQuote,
  createPayment: createPayment,
  createPaymentRequest: createPaymentRequest,
  completeQuote: completeQuote,
  deleteTransactionTag: deleteTransactionTag,
  deleteTransaction: deleteTransaction,
  getBusinessTransactions: getBusinessTransactions,
  getBusinessTransaction: getBusinessTransaction,
  getBusinessTransactionByInvoiceReference: getBusinessTransactionByInvoiceReference,
  getBusinessTransactionPaymentReport: getBusinessTransactionPaymentReport,
  getBusinessTransactionProcessingReport: getBusinessTransactionProcessingReport,
  getBusinessPracticeTransactions: getBusinessPracticeTransactions,
  getBusinessPracticeStaffTransactions: getBusinessPracticeStaffTransactions,
  getTransactionsForHealthFund: getTransactionsForHealthFund,
  getHealthFundTransaction: getHealthFundTransaction,
  getTransactionsByMember: getTransactionsByMember,
  getHealthFundMemberTransactions: getHealthFundMemberTransactions,
  getTransactionByTransactionId: getTransactionByTransactionId,
  getTransactionPDF: getTransactionPDF,
  getTransactionClaimPDF: getTransactionClaimPDF,
  getTransactionClaimPdfV2: getTransactionClaimPdfV2,
  replyToQuote: replyToQuote,
  sendReceipt: sendReceipt$1,
  submitInvoice: submitInvoice,
  updateTransaction: updateTransaction,
  validateTransaction: validateTransaction,
  submitTransactionBridgeClaim: submitTransactionBridgeClaim,
  submitTransactionBridgePayment: submitTransactionBridgePayment,
  triggerBridge: triggerBridge,
  createInvoice: createInvoice,
  createSendClaim: createSendClaim,
  updateClaim: updateClaim,
  completeTransaction: completeTransaction,
  approveClaim: approveClaim,
  cancelClaim: cancelClaim,
  submitClaim: submitClaim,
  saveClaimDetails: saveClaimDetails,
  pay: pay,
  sendProcessingRequest: sendProcessingRequest$1,
  cancelInvoice: cancelInvoice,
  getPaymentLink: getPaymentLink$1,
  refundByBusiness: refundByBusiness,
  refund: refund,
  saveDraft: saveDraft,
  convertDraft: convertDraft,
  archive: archive,
  unarchive: unarchive,
  terminalInput: terminalInput,
  terminalCancellation: terminalCancellation,
  refundPayment: refundPayment,
  createEclipseInPatientInvoice: createEclipseInPatientInvoice,
  createEclipseOverseasInvoice: createEclipseOverseasInvoice,
  createEclipseOnlineEligibilityCheckInvoice: createEclipseOnlineEligibilityCheckInvoice,
  getBusinessEclipseTransactionPaymentReport: getBusinessEclipseTransactionPaymentReport,
  getBusinessEclipseTransactionProcessingReport: getBusinessEclipseTransactionProcessingReport,
  reconcileClaim: reconcileClaim,
  saveDraftEclipseInPatientInvoice: saveDraftEclipseInPatientInvoice,
  saveDraftEclipseOverseasInvoice: saveDraftEclipseOverseasInvoice
});

function ownKeys$18(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$18(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$18(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$18(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var pathTrigger = function pathTrigger(triggerId) {
  return "/triggers/" + triggerId;
};

var PATH__TRIGGERS = '/triggers';
var PATH__TRIGGER_CATEGORIES = '/triggercategories';
/**
 * Get trigger
 * @param {String} triggerId - Trigger ID
 * @param {Object} opts - Additional options
 */

var getTrigger = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(triggerId, opts) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            doesParamExist.default({
              triggerId: triggerId
            }, opts.hyperMediaEndpoint);
            return _context.abrupt("return", request(_objectSpread$18({}, opts, {
              path: pathTrigger(triggerId)
            }), {
              method: 'get'
            }));

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function getTrigger(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * Get triggers
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getTriggers = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(query, opts) {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            return _context2.abrupt("return", request(_objectSpread$18({}, opts, {
              path: PATH__TRIGGERS
            }), {
              method: 'get',
              params: query
            }));

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function getTriggers(_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();
/**
 * Get trigger categories
 * @param {Object} query - Query parameters
 * @param {Object} opts - Additional options
 */

var getTriggerCategories = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(query, opts) {
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (query === void 0) {
              query = {};
            }

            if (opts === void 0) {
              opts = {};
            }

            return _context3.abrupt("return", request(_objectSpread$18({}, opts, {
              path: PATH__TRIGGER_CATEGORIES
            }), {
              method: 'get',
              params: query
            }));

          case 3:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function getTriggerCategories(_x5, _x6) {
    return _ref3.apply(this, arguments);
  };
}();

var triggers = /*#__PURE__*/Object.freeze({
  __proto__: null,
  getTrigger: getTrigger,
  getTriggers: getTriggers,
  getTriggerCategories: getTriggerCategories
});

function ownKeys$19(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$19(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$19(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$19(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var pathHealthFundVendors = function pathHealthFundVendors(healthFundId) {
  return "/healthfunds/" + healthFundId + "/vendors";
};
var pathHealthFundVendor = function pathHealthFundVendor(healthFundId, vendorId) {
  return "/healthfunds/" + healthFundId + "/vendors/" + vendorId;
};
var getHealthFundVendor = function getHealthFundVendor(healthFundId, vendorId, query, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    healthFundId: healthFundId,
    vendorId: vendorId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$19({}, opts, {
    path: pathHealthFundVendor(healthFundId, vendorId)
  }), {
    method: 'get',
    params: query
  });
};
var getHealthFundVendors = function getHealthFundVendors(healthFundId, query, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    healthFundId: healthFundId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$19({}, opts, {
    path: pathHealthFundVendors(healthFundId)
  }), {
    method: 'get',
    params: query
  });
};

var vendors = /*#__PURE__*/Object.freeze({
  __proto__: null,
  pathHealthFundVendors: pathHealthFundVendors,
  pathHealthFundVendor: pathHealthFundVendor,
  getHealthFundVendor: getHealthFundVendor,
  getHealthFundVendors: getHealthFundVendors
});

function ownKeys$1a(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$1a(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1a(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1a(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var PATH__MEDICARE_VERIFY = '/medicare/verify';
/**
 * Verify medicare details
 * @param {Object} body - Request body
 * @param {Object} opts - Additional options
 */

var verifyMedicare$1 = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(body, opts) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            return _context.abrupt("return", request(_objectSpread$1a({}, opts, {
              path: PATH__MEDICARE_VERIFY
            }), {
              method: 'POST',
              data: body
            }));

          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function verifyMedicare(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var verify = /*#__PURE__*/Object.freeze({
  __proto__: null,
  PATH__MEDICARE_VERIFY: PATH__MEDICARE_VERIFY,
  verifyMedicare: verifyMedicare$1
});

function ownKeys$1b(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$1b(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1b(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1b(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var pathSendWorkerMessage = function pathSendWorkerMessage() {
  return "/workers/messages";
};
var sendWorkerMessage = function sendWorkerMessage(body, opts) {
  if (opts === void 0) {
    opts = {};
  }

  return request(_objectSpread$1b({}, opts, {
    path: pathSendWorkerMessage()
  }), {
    method: 'post',
    data: body
  });
};

var workers = /*#__PURE__*/Object.freeze({
  __proto__: null,
  pathSendWorkerMessage: pathSendWorkerMessage,
  sendWorkerMessage: sendWorkerMessage
});

function ownKeys$1c(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$1c(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1c(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1c(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var pathHealthFundWorkflowExceptions = function pathHealthFundWorkflowExceptions(healthFundId) {
  return "/healthfunds/" + healthFundId + "/workflowexceptions";
};
var getHealthFundWorkflowExceptions = function getHealthFundWorkflowExceptions(healthFundId, query, opts) {
  if (opts === void 0) {
    opts = {};
  }

  doesParamExist.default({
    healthFundId: healthFundId
  }, opts.hyperMediaEndpoint);
  return request(_objectSpread$1c({}, opts, {
    path: pathHealthFundWorkflowExceptions(healthFundId)
  }), {
    method: 'get',
    params: query
  });
};

var workflowExceptions = /*#__PURE__*/Object.freeze({
  __proto__: null,
  pathHealthFundWorkflowExceptions: pathHealthFundWorkflowExceptions,
  getHealthFundWorkflowExceptions: getHealthFundWorkflowExceptions
});

/**
 * Upload health fund form file to S3
 * @param {String} healthFundId - Health fund ID
 * @param {Object} file - File
 */

var uploadHealthFundFormFileToS3 = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(healthFundId, file, opts) {
    var awsAxios, _yield$getHealthFundF, signedPost, s3Url, bodyFormData, key;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            awsAxios = axios.create();

            if (healthFundId) {
              _context.next = 3;
              break;
            }

            throw new paramError.default('healthFundId');

          case 3:
            if (file) {
              _context.next = 5;
              break;
            }

            throw new paramError.default('file');

          case 5:
            _context.prev = 5;
            _context.next = 8;
            return getHealthFundFormUploadUrl(healthFundId, {
              contentType: file.type,
              fileName: file.name
            }, opts);

          case 8:
            _yield$getHealthFundF = _context.sent;
            signedPost = _yield$getHealthFundF.signedPost;
            s3Url = _yield$getHealthFundF.s3Url;
            // eslint-disable-next-line
            bodyFormData = new FormData();

            for (key in signedPost.fields) {
              bodyFormData.append(key, signedPost.fields[key]);
            }

            bodyFormData.append('file', file);
            _context.next = 16;
            return awsAxios.post(signedPost.url, bodyFormData);

          case 16:
            return _context.abrupt("return", {
              publicUrl: s3Url
            });

          case 19:
            _context.prev = 19;
            _context.t0 = _context["catch"](5);
            throw _context.t0;

          case 22:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[5, 19]]);
  }));

  return function uploadHealthFundFormFileToS3(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();
/**
 * Upload scanned application to S3
 * @param {String} businessId
 * @param {String} practiceId
 * @param {String} formId
 * @param {Object} file - File
 */

var uploadScannedApplicationToS3 = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(businessId, practiceId, formId, file, opts) {
    var awsAxios, _yield$getManualFormU, signedPost, s3Url, bodyFormData, key;

    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            awsAxios = axios.create();

            if (businessId) {
              _context2.next = 3;
              break;
            }

            throw new paramError.default('businessId');

          case 3:
            if (practiceId) {
              _context2.next = 5;
              break;
            }

            throw new paramError.default('practiceId');

          case 5:
            if (formId) {
              _context2.next = 7;
              break;
            }

            throw new paramError.default('formId');

          case 7:
            if (file) {
              _context2.next = 9;
              break;
            }

            throw new paramError.default('file');

          case 9:
            _context2.prev = 9;
            _context2.next = 12;
            return getManualFormUploadUrl(businessId, practiceId, formId, {
              contentType: file.type,
              fileName: file.name
            }, opts);

          case 12:
            _yield$getManualFormU = _context2.sent;
            signedPost = _yield$getManualFormU.signedPost;
            s3Url = _yield$getManualFormU.s3Url;
            // eslint-disable-next-line
            bodyFormData = new FormData();

            for (key in signedPost.fields) {
              bodyFormData.append(key, signedPost.fields[key]);
            }

            bodyFormData.append('file', file);
            _context2.next = 20;
            return awsAxios.post(signedPost.url, bodyFormData);

          case 20:
            return _context2.abrupt("return", {
              publicUrl: s3Url
            });

          case 23:
            _context2.prev = 23;
            _context2.t0 = _context2["catch"](9);
            throw _context2.t0;

          case 26:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[9, 23]]);
  }));

  return function uploadScannedApplicationToS3(_x4, _x5, _x6, _x7, _x8) {
    return _ref2.apply(this, arguments);
  };
}();
/**
 * Upload claim attachment to S3
 * @param {String} businessId - Business ID
 * @param {String} practiceId - Practice ID
 * @param {String} staffId - Staff ID
 * @param {Object} file - File
 */

var uploadClaimAttachmentToS3 = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(businessId, practiceId, staffId, healthFundId, file, opts) {
    var awsAxios, _yield$getClaimAttach, signedPost, s3Url, s3SignedUrlId, bodyFormData, key;

    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            awsAxios = axios.create();

            if (businessId) {
              _context3.next = 3;
              break;
            }

            throw new paramError.default('businessId');

          case 3:
            if (practiceId) {
              _context3.next = 5;
              break;
            }

            throw new paramError.default('practiceId');

          case 5:
            if (staffId) {
              _context3.next = 7;
              break;
            }

            throw new paramError.default('staffId');

          case 7:
            if (healthFundId) {
              _context3.next = 9;
              break;
            }

            throw new paramError.default('healthFundId');

          case 9:
            if (file) {
              _context3.next = 11;
              break;
            }

            throw new paramError.default('file');

          case 11:
            _context3.prev = 11;
            _context3.next = 14;
            return getClaimAttachmentUrl(businessId, practiceId, staffId, {
              contentType: file.type,
              fileName: file.name,
              healthFundId: healthFundId,
              contentLength: file.size
            }, opts);

          case 14:
            _yield$getClaimAttach = _context3.sent;
            signedPost = _yield$getClaimAttach.signedPost;
            s3Url = _yield$getClaimAttach.s3Url;
            s3SignedUrlId = _yield$getClaimAttach.s3SignedUrlId;
            // eslint-disable-next-line
            bodyFormData = new FormData();

            for (key in signedPost.fields) {
              bodyFormData.append(key, signedPost.fields[key]);
            }

            bodyFormData.append('file', file);
            _context3.next = 23;
            return awsAxios.post(signedPost.url, bodyFormData);

          case 23:
            return _context3.abrupt("return", {
              s3Url: s3Url,
              s3SignedUrlId: s3SignedUrlId
            });

          case 26:
            _context3.prev = 26;
            _context3.t0 = _context3["catch"](11);
            throw _context3.t0;

          case 29:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, null, [[11, 26]]);
  }));

  return function uploadClaimAttachmentToS3(_x9, _x10, _x11, _x12, _x13, _x14) {
    return _ref3.apply(this, arguments);
  };
}();
/**
 * Upload business practice image to S3
 * @param {String} businessId - Business ID
 * @param {String} practiceId - Practice ID
 * @param {Object} file - File
 */

var uploadBusinessPracticeImageToS3 = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(businessId, practiceId, file) {
    var awsAxios, _yield$getBusinessPra, signedPost, s3Url, bodyFormData, key, data;

    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            awsAxios = axios.create();

            if (businessId) {
              _context4.next = 3;
              break;
            }

            throw new paramError.default('businessId');

          case 3:
            if (practiceId) {
              _context4.next = 5;
              break;
            }

            throw new paramError.default('practiceId');

          case 5:
            if (file) {
              _context4.next = 7;
              break;
            }

            throw new paramError.default('file');

          case 7:
            _context4.prev = 7;
            _context4.next = 10;
            return getBusinessPracticeUploadUrl(businessId, practiceId, {
              contentType: file.type
            });

          case 10:
            _yield$getBusinessPra = _context4.sent;
            signedPost = _yield$getBusinessPra.signedPost;
            s3Url = _yield$getBusinessPra.s3Url;
            // eslint-disable-next-line
            bodyFormData = new FormData();

            for (key in signedPost.fields) {
              bodyFormData.append(key, signedPost.fields[key]);
            }

            bodyFormData.append('file', file);
            _context4.next = 18;
            return awsAxios.post(signedPost.url, bodyFormData);

          case 18:
            _context4.next = 20;
            return updateBusinessPractice(businessId, practiceId, {
              logoUrl: s3Url
            });

          case 20:
            data = _context4.sent;
            return _context4.abrupt("return", data);

          case 24:
            _context4.prev = 24;
            _context4.t0 = _context4["catch"](7);
            throw _context4.t0;

          case 27:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, null, [[7, 24]]);
  }));

  return function uploadBusinessPracticeImageToS3(_x15, _x16, _x17) {
    return _ref4.apply(this, arguments);
  };
}();
/**
 * Upload business staff image to S3
 * @param {String} businessId - Business ID
 * @param {String} practiceId - Staff ID
 * @param {Object} file - File
 */

var uploadBusinessStaffMemberImageToS3 = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(businessId, staffId, file) {
    var awsAxios, _yield$getBusinessSta, signedPost, s3Url, bodyFormData, key, data;

    return _regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            awsAxios = axios.create();

            if (businessId) {
              _context5.next = 3;
              break;
            }

            throw new paramError.default('businessId');

          case 3:
            if (staffId) {
              _context5.next = 5;
              break;
            }

            throw new paramError.default('staffId');

          case 5:
            if (file) {
              _context5.next = 7;
              break;
            }

            throw new paramError.default('file');

          case 7:
            _context5.prev = 7;
            _context5.next = 10;
            return getBusinessStaffUploadUrl(businessId, staffId, file.type);

          case 10:
            _yield$getBusinessSta = _context5.sent;
            signedPost = _yield$getBusinessSta.signedPost;
            s3Url = _yield$getBusinessSta.s3Url;
            // eslint-disable-next-line
            bodyFormData = new FormData();

            for (key in signedPost.fields) {
              bodyFormData.append(key, signedPost.fields[key]);
            }

            bodyFormData.append('file', file);
            _context5.next = 18;
            return awsAxios.post(signedPost.url, bodyFormData);

          case 18:
            _context5.next = 20;
            return updateBusinessStaffMember(businessId, staffId, {
              profilePictureUrl: s3Url
            });

          case 20:
            data = _context5.sent;
            return _context5.abrupt("return", data);

          case 24:
            _context5.prev = 24;
            _context5.t0 = _context5["catch"](7);
            throw _context5.t0;

          case 27:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5, null, [[7, 24]]);
  }));

  return function uploadBusinessStaffMemberImageToS3(_x18, _x19, _x20) {
    return _ref5.apply(this, arguments);
  };
}();
/**
 * Upload invoice scan to S3
 * @param {String} businessId - Business ID
 * @param {Object} file - File
 */

var uploadInvoiceScanToS3 = /*#__PURE__*/function () {
  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(businessId, file, opts) {
    var awsAxios, _yield$getInvoiceScan, signedPost, s3Url, s3SignedUrlId, bodyFormData, key;

    return _regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            awsAxios = axios.create();

            if (businessId) {
              _context6.next = 3;
              break;
            }

            throw new paramError.default('businessId');

          case 3:
            if (file) {
              _context6.next = 5;
              break;
            }

            throw new paramError.default('file');

          case 5:
            _context6.prev = 5;
            _context6.next = 8;
            return getInvoiceScanUploadUrl(businessId, {
              contentType: file.type,
              fileName: file.name,
              contentLength: file.size
            }, opts);

          case 8:
            _yield$getInvoiceScan = _context6.sent;
            signedPost = _yield$getInvoiceScan.signedPost;
            s3Url = _yield$getInvoiceScan.s3Url;
            s3SignedUrlId = _yield$getInvoiceScan.s3SignedUrlId;
            // eslint-disable-next-line
            bodyFormData = new FormData();

            for (key in signedPost.fields) {
              bodyFormData.append(key, signedPost.fields[key]);
            }

            bodyFormData.append('file', file);
            _context6.next = 17;
            return awsAxios.post(signedPost.url, bodyFormData);

          case 17:
            return _context6.abrupt("return", {
              s3Url: s3Url,
              s3SignedUrlId: s3SignedUrlId
            });

          case 20:
            _context6.prev = 20;
            _context6.t0 = _context6["catch"](5);
            throw _context6.t0;

          case 23:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6, null, [[5, 20]]);
  }));

  return function uploadInvoiceScanToS3(_x21, _x22, _x23) {
    return _ref6.apply(this, arguments);
  };
}();
/**
 * Upload bulk upload CSV to S3
 * @param {String} businessId - Business ID
 * @param {Object} file - File
 */

var uploadBulkUploadCSVToS3 = /*#__PURE__*/function () {
  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(businessId, file, opts) {
    var awsAxios, contentType, _yield$getBulkUploadU, signedPost, s3Url, s3SignedUrlId, bodyFormData, key;

    return _regeneratorRuntime.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            awsAxios = axios.create();

            if (businessId) {
              _context7.next = 3;
              break;
            }

            throw new paramError.default('businessId');

          case 3:
            if (file) {
              _context7.next = 5;
              break;
            }

            throw new paramError.default('file');

          case 5:
            contentType = file.type;

            if (file.name.includes('.csv') || file.path.includes('.csv')) {
              contentType = 'text/csv';
            }

            _context7.prev = 7;
            _context7.next = 10;
            return getBulkUploadUrl(businessId, {
              contentType: contentType,
              fileName: file.name,
              contentLength: file.size
            }, opts);

          case 10:
            _yield$getBulkUploadU = _context7.sent;
            signedPost = _yield$getBulkUploadU.signedPost;
            s3Url = _yield$getBulkUploadU.s3Url;
            s3SignedUrlId = _yield$getBulkUploadU.s3SignedUrlId;
            // eslint-disable-next-line
            bodyFormData = new FormData();

            for (key in signedPost.fields) {
              bodyFormData.append(key, signedPost.fields[key]);
            }

            bodyFormData.append('file', file);
            _context7.next = 19;
            return awsAxios.post(signedPost.url, bodyFormData);

          case 19:
            return _context7.abrupt("return", {
              s3Url: s3Url,
              s3SignedUrlId: s3SignedUrlId
            });

          case 22:
            _context7.prev = 22;
            _context7.t0 = _context7["catch"](7);
            throw _context7.t0;

          case 25:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7, null, [[7, 22]]);
  }));

  return function uploadBulkUploadCSVToS3(_x24, _x25, _x26) {
    return _ref7.apply(this, arguments);
  };
}();
/**
 * Upload business kyc trust document to S3
 * @param {String} businessId - Business ID
 * @param {Object} file - File
 */

var uploadKycTrustDocumentToS3 = /*#__PURE__*/function () {
  var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(businessId, file, opts) {
    var awsAxios, _yield$getTrustDocume, signedPost, s3Url, s3SignedUrlId, bodyFormData, key;

    return _regeneratorRuntime.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            awsAxios = axios.create();

            if (businessId) {
              _context8.next = 3;
              break;
            }

            throw new paramError.default('businessId');

          case 3:
            if (file) {
              _context8.next = 5;
              break;
            }

            throw new paramError.default('file');

          case 5:
            _context8.prev = 5;
            _context8.next = 8;
            return getTrustDocumentUploadUrl(businessId, {
              contentType: file.type,
              fileName: file.name,
              contentLength: file.size
            }, opts);

          case 8:
            _yield$getTrustDocume = _context8.sent;
            signedPost = _yield$getTrustDocume.signedPost;
            s3Url = _yield$getTrustDocume.s3Url;
            s3SignedUrlId = _yield$getTrustDocume.s3SignedUrlId;
            // eslint-disable-next-line
            bodyFormData = new FormData();

            for (key in signedPost.fields) {
              bodyFormData.append(key, signedPost.fields[key]);
            }

            bodyFormData.append('file', file);
            _context8.next = 17;
            return awsAxios.post(signedPost.url, bodyFormData);

          case 17:
            return _context8.abrupt("return", {
              s3Url: s3Url,
              s3SignedUrlId: s3SignedUrlId
            });

          case 20:
            _context8.prev = 20;
            _context8.t0 = _context8["catch"](5);
            throw _context8.t0;

          case 23:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8, null, [[5, 20]]);
  }));

  return function uploadKycTrustDocumentToS3(_x27, _x28, _x29) {
    return _ref8.apply(this, arguments);
  };
}();

var aws = /*#__PURE__*/Object.freeze({
  __proto__: null,
  uploadHealthFundFormFileToS3: uploadHealthFundFormFileToS3,
  uploadScannedApplicationToS3: uploadScannedApplicationToS3,
  uploadClaimAttachmentToS3: uploadClaimAttachmentToS3,
  uploadBusinessPracticeImageToS3: uploadBusinessPracticeImageToS3,
  uploadBusinessStaffMemberImageToS3: uploadBusinessStaffMemberImageToS3,
  uploadInvoiceScanToS3: uploadInvoiceScanToS3,
  uploadBulkUploadCSVToS3: uploadBulkUploadCSVToS3,
  uploadKycTrustDocumentToS3: uploadKycTrustDocumentToS3
});

function ownKeys$1d(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$1d(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1d(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1d(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
/**
 * Get current app version
 */

var getCurrentAppVersion = function getCurrentAppVersion() {
  return _get(sdkClient, 'appVersion');
};
/**
 * Set current app version
 */

var setCurrentAppVersion = function setCurrentAppVersion(version) {
  sdkClient.appVersion = version;
};
/**
 * Fetch latest app version
 */

var fetchLatestAppVersion = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    var versionAxios, res;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            versionAxios = axios.create();
            _context.prev = 1;
            _context.next = 4;
            return versionAxios.get('/manifest.json');

          case 4:
            res = _context.sent;
            return _context.abrupt("return", _get(res, 'data.app_version'));

          case 8:
            _context.prev = 8;
            _context.t0 = _context["catch"](1);

            if (!(_get(_context.t0, 'response.status') === 404)) {
              _context.next = 12;
              break;
            }

            return _context.abrupt("return", null);

          case 12:
            throw _context.t0;

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[1, 8]]);
  }));

  return function fetchLatestAppVersion() {
    return _ref.apply(this, arguments);
  };
}();
/**
 * Fetch minimum app version
 */
// @ts-expect-error TS(1064): The return type of an async function or method mus... Remove this comment to see the full error message

var fetchMinimumAppVerson = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
    var res;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.prev = 0;
            _context2.next = 3;
            return sdkClient.applications.getSelfApplication();

          case 3:
            res = _context2.sent;
            return _context2.abrupt("return", _get(res, 'minVersion'));

          case 7:
            _context2.prev = 7;
            _context2.t0 = _context2["catch"](0);
            throw _context2.t0;

          case 10:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[0, 7]]);
  }));

  return function fetchMinimumAppVerson() {
    return _ref2.apply(this, arguments);
  };
}();
/**
 * Check app version
 * Checks if the app is up-to-date
 */
// @ts-expect-error TS(1064): The return type of an async function or method mus... Remove this comment to see the full error message

var checkAppVersion = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
    var currentVersion, latestVersion, minimumVersion, versions;
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            currentVersion = getCurrentAppVersion();
            _context3.next = 3;
            return fetchLatestAppVersion();

          case 3:
            latestVersion = _context3.sent;
            _context3.next = 6;
            return fetchMinimumAppVerson();

          case 6:
            minimumVersion = _context3.sent;

            if (!(!latestVersion || !currentVersion)) {
              _context3.next = 9;
              break;
            }

            return _context3.abrupt("return", {});

          case 9:
            versions = {
              currentVersion: currentVersion,
              latestVersion: latestVersion,
              minimumVersion: minimumVersion
            };

            if (!(minimumVersion && compareVersions(currentVersion, minimumVersion) < 0)) {
              _context3.next = 12;
              break;
            }

            return _context3.abrupt("return", _objectSpread$1d({}, versions, {
              requiresUpdate: true,
              isForced: true
            }));

          case 12:
            if (!(compareVersions(currentVersion, latestVersion) !== 0)) {
              _context3.next = 14;
              break;
            }

            return _context3.abrupt("return", _objectSpread$1d({}, versions, {
              requiresUpdate: true
            }));

          case 14:
            return _context3.abrupt("return", _objectSpread$1d({}, versions, {
              requiresUpdate: false
            }));

          case 15:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function checkAppVersion() {
    return _ref3.apply(this, arguments);
  };
}();

var versions = /*#__PURE__*/Object.freeze({
  __proto__: null,
  getCurrentAppVersion: getCurrentAppVersion,
  setCurrentAppVersion: setCurrentAppVersion,
  fetchLatestAppVersion: fetchLatestAppVersion,
  fetchMinimumAppVerson: fetchMinimumAppVerson,
  checkAppVersion: checkAppVersion
});

var _getSelfApplicationCache;

var _getSelfApplicationCacheInProgress = false;
var getSelfApplicationCached = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    var data;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!_getSelfApplicationCache) {
              _context.next = 2;
              break;
            }

            return _context.abrupt("return", _getSelfApplicationCache);

          case 2:
            if (_getSelfApplicationCacheInProgress) {
              _context.next = 13;
              break;
            }

            _context.prev = 3;
            _getSelfApplicationCacheInProgress = true;
            _context.next = 7;
            return sdkClient.applications.getSelfApplication();

          case 7:
            _getSelfApplicationCache = _context.sent;

          case 8:
            _context.prev = 8;
            _getSelfApplicationCacheInProgress = false;
            return _context.finish(8);

          case 11:
            _context.next = 18;
            break;

          case 13:
            _context.next = 15;
            return new Promise(function (resolve) {
              return setTimeout(resolve, 100);
            });

          case 15:
            data = _getSelfApplicationCache;

          case 16:
            if (!data) {
              _context.next = 13;
              break;
            }

          case 17:
            return _context.abrupt("return", data);

          case 18:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[3,, 8, 11]]);
  }));

  return function getSelfApplicationCached() {
    return _ref.apply(this, arguments);
  };
}();

var applicationUtils = /*#__PURE__*/Object.freeze({
  __proto__: null,
  getSelfApplicationCached: getSelfApplicationCached
});

function ownKeys$1e(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$1e(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1e(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1e(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function parseProfessions(_x, _x2) {
  return _parseProfessions.apply(this, arguments);
}

function _parseProfessions() {
  _parseProfessions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(professions, _temp) {
    var _ref, providerRegistrationTypes, professionalCategoryIds, uniqueProfessionalCategoryIds, professionalCategoryIdsString, specialtyIdSets, specialtyIds, uniqueSpecialtyIds, specialtyIdsString, _yield$Promise$all, professionalCategoriesResponse, specialtiesResponse, providerTypesResponse, professionalCategoriesMap, specialtiesMap, providerRegistrationTypesMap, newProfessions;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _ref = _temp === void 0 ? {} : _temp, providerRegistrationTypes = _ref.providerRegistrationTypes;
            professionalCategoryIds = professions.map(function (registration) {
              return registration.professionalCategoryId;
            });
            uniqueProfessionalCategoryIds = _uniq(professionalCategoryIds).filter(Boolean);
            professionalCategoryIdsString = uniqueProfessionalCategoryIds.join(',');
            specialtyIdSets = professions.map(function (registration) {
              return registration.specialtyIds;
            });
            specialtyIds = _flatten(specialtyIdSets);
            uniqueSpecialtyIds = _uniq(specialtyIds).filter(Boolean);
            specialtyIdsString = uniqueSpecialtyIds.join(',');
            _context.next = 10;
            return Promise.all([professionalCategoryIdsString ? sdkClient.professionalCategories.getProfessionalCategories({
              // @ts-expect-error TS(2345): Argument of type '{ professionalCategoryIds: strin... Remove this comment to see the full error message
              professionalCategoryIds: professionalCategoryIdsString,
              limit: 99
            }) : undefined, specialtyIdsString ? sdkClient.specialties.getSpecialties({
              // @ts-expect-error TS(2345): Argument of type '{ specialtyIds: string; limit: n... Remove this comment to see the full error message
              specialtyIds: specialtyIdsString,
              limit: 99
            }) : undefined, providerRegistrationTypes ? providerRegistrationTypes : sdkClient.providerRegistrationTypes.getProviderRegistrationTypes({
              limit: 99
            })]);

          case 10:
            _yield$Promise$all = _context.sent;
            professionalCategoriesResponse = _yield$Promise$all[0];
            specialtiesResponse = _yield$Promise$all[1];
            providerTypesResponse = _yield$Promise$all[2];
            professionalCategoriesMap = _get(professionalCategoriesResponse, 'items', []).reduce(function (currentProfessionalCategories, professionalCategory) {
              var _objectSpread2;

              return _objectSpread$1e({}, currentProfessionalCategories, (_objectSpread2 = {}, _objectSpread2[professionalCategory._id] = professionalCategory, _objectSpread2));
            }, // @ts-expect-error TS(2345): Argument of type '{}' is not assignable to paramet... Remove this comment to see the full error message
            {});
            specialtiesMap = _get(specialtiesResponse, 'items', []).reduce(function (currentSpecialties, professionalCategory) {
              var _objectSpread3;

              return _objectSpread$1e({}, currentSpecialties, (_objectSpread3 = {}, _objectSpread3[professionalCategory._id] = professionalCategory, _objectSpread3));
            }, // @ts-expect-error TS(2345): Argument of type '{}' is not assignable to paramet... Remove this comment to see the full error message
            {});
            providerRegistrationTypesMap = _get(providerTypesResponse, 'items', []).reduce(function (currentProviderType, providerType) {
              var _objectSpread4;

              return _objectSpread$1e({}, currentProviderType, (_objectSpread4 = {}, _objectSpread4[providerType._id] = providerType, _objectSpread4));
            }, {});
            newProfessions = professions.map(function (registration) {
              var professionalCategory = professionalCategoriesMap[registration.professionalCategoryId];
              var specialties = registration.specialtyIds.map(function (specialtyId) {
                return specialtiesMap[specialtyId];
              });
              var providerRegistrationType = providerRegistrationTypesMap[registration.providerRegistrationTypeId];
              return {
                professionalCategory: professionalCategory,
                specialties: specialties,
                providerRegistrationType: providerRegistrationType
              };
            });
            return _context.abrupt("return", newProfessions);

          case 19:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _parseProfessions.apply(this, arguments);
}

var professionsUtils = /*#__PURE__*/Object.freeze({
  __proto__: null,
  parseProfessions: parseProfessions
});

function ownKeys$1f(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$1f(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1f(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1f(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var APP_ID = 'web-application';
var API_VER = '0.82.0';
var API_VERSIONS = {
  core: 'v3',
  risk: 'v1'
};
var CONTENT_TYPE = 'application/json';
var DEFAULT_ENV = 'prod';
var DEFAULT_REGION = 'au';
var DEFAULT_VERSION = 'v1';
var HEADER__APP_ID = 'x-appid';
var HEADER__APP_VERSION = 'x-appver';
var HEADER__API_VER = 'x-apiver';
var HEADER__DEVICE_ID = 'x-deviceid';
var HEADER__INTERCOM_HASH = 'x-intercom-hash';
var HEADER__SDK_VERSION = 'x-sdkver';
var HEADER__TOKEN = 'x-token';
var _isTokenExpired = function _isTokenExpired(token) {
  try {
    var decodedToken = jwtDecode(token);
    return differenceInSeconds(decodedToken.exp * 1000, new Date()) < 0;
  } catch (err) {
    return true;
  }
};

var _getEnvBaseUrls = function _getEnvBaseUrls(envBaseUrls, _ref) {
  var env = _ref.env,
      region = _ref.region;
  return Object.keys(envBaseUrls).reduce(function (baseUrls, apiName) {
    var _objectSpread2;

    return _objectSpread$1f({}, baseUrls, (_objectSpread2 = {}, _objectSpread2[apiName] = envBaseUrls[apiName][region][env], _objectSpread2));
  }, {});
};

var sdkClient = {
  account: storage.default.get('account'),
  accountId: storage.default.get('accountId'),
  apiVersions: API_VERSIONS,
  appId: APP_ID,
  appVersion: storage.default.get('appVersion'),
  apiVer: API_VER,
  axios: axios.create(),
  baseUrls: undefined,
  defaultVersion: DEFAULT_VERSION,
  device: storage.default.get('device'),
  env: DEFAULT_ENV,
  hasInit: false,
  intercomHash: storage.default.get('intercomHash'),
  isSuperAdmin: storage.default.get('isSuperAdmin'),
  isAnalyticsInitialised: false,
  member: storage.default.get('member'),
  region: undefined,
  requestInterceptor: undefined,
  requestInterceptorSuccess: undefined,
  sdkVersion: storage.default.get('sdkVersion'),
  tokens: storage.default.get('tokens', {
    storeType: 'session'
  }) || {
    account: null,
    session: null
  },
  // Attach resource getters/setters
  abr: abr,
  accounts: accounts,
  actions: actions,
  apiKeys: apiKeys,
  attachments: attachments,
  auth: auth,
  applications: applications,
  bulkUploads: bulkUploads,
  bulkSubmits: bulkSubmits,
  businessProfiles: businessProfiles,
  businesses: businesses,
  claimItems: claimItems,
  devices: devices,
  docAccounts: docAccounts,
  documents: documents,
  emails: emails,
  filterOptions: filterOptions,
  formApplicationTemplates: formApplicationTemplates,
  formApplications: formApplications,
  forms: forms,
  funders: funders,
  funderServices: funderServices,
  funderSettings: funderSettings,
  funderValues: funderValues,
  futures: futures,
  healthFundAccounts: healthFundAccounts,
  healthFundSettings: healthFundSettings,
  healthfunds: healthfunds,
  icdItems: icdItems,
  invoiceScans: invoiceScans,
  jhcs: jhcs,
  kyc: kyc,
  logs: logs,
  members: members,
  messageMappings: messageMappings,
  minions: minions,
  modalities: modalities,
  notes: notes,
  onboardingApplications: onboardingApplications,
  onboardingRequests: onboardingRequests,
  ops: ops,
  organisations: organisations,
  partners: partners,
  patients: patients,
  payments: payments,
  pms: pms,
  practiceProfiles: practiceProfiles,
  practices: practices,
  practiceTypes: practiceTypes,
  products: products,
  professionalCategories: professionalCategories,
  providerRequests: providerRequests,
  providerRegistrationTypes: providerRegistrationTypes,
  providerNumberTypes: providerNumberTypes,
  providerTypes: providerTypes,
  refSources: refSources,
  risk: risk,
  rnas: rnas,
  roles: roles,
  selfCheckoutSessions: selfCheckoutSessions,
  settlements: settlements,
  services: services,
  signUp: signUp$1,
  specialties: specialties,
  staffProfiles: staffProfiles,
  staff: staff,
  statistics: statistics,
  subscriptions: subscriptions,
  terminals: terminals,
  transactionExport: transactionExport,
  transactions: transactions,
  triggers: triggers,
  vendors: vendors,
  verify: verify,
  workflowExceptions: workflowExceptions,
  workers: workers,
  // Attach services
  aws: aws,
  versions: versions,
  // Attach utils
  regions: regions.regions,
  professionsUtils: professionsUtils,
  staffUtils: staffUtils,
  applicationUtils: applicationUtils,
  storage: storage.default,

  /**
   * Setup the Medipass SDK
   * @param {String} env - The environment that the SDK will point to
   * @param {?Object} opts - Additional setup options
   */
  // @ts-expect-error TS(1015): Parameter cannot have question mark and initialize... Remove this comment to see the full error message
  setup: function setup(env, opts) {
    if (opts === void 0) {
      opts = {};
    }

    // Setup axios instance
    this.axios = axios.create();

    if (this.axios) {
      this.axios.defaults.headers.post['Content-Type'] = CONTENT_TYPE;
      this.axios.defaults.headers.post.Accept = CONTENT_TYPE;
    }

    this.setConfig(_objectSpread$1f({}, opts, {
      env: env
    }));
    this.hasInit = true; // Setup request/response interceptors

    this.setRequestInterceptor({});
    this.setResponseInterceptor();
  },
  setConfig: function setConfig(opts) {
    // Setup initial SDK properties
    this.appId = _get(opts, 'appId', this.appId);
    this.appVersion = _get(opts, 'appVersion', this.appVersion);
    this.apiVer = _get(opts, 'apiVer', this.apiVer);
    this.apiVersions = _get(opts, 'apiVersions', this.apiVersions);
    this.defaultVersion = _get(opts, 'defaultVersion', this.defaultVersion);
    this.env = _get(opts, 'env', this.env);
    this.sdkVersion = _get(opts, 'sdkVersion', this.sdkVersion);
    this.baseUrls = _get(opts, 'baseUrls');
    this.setRegion(_get(opts, 'region', this.regions.getUserRegion()));
  },
  setSDKAppVersion: function setSDKAppVersion(version) {
    this.sdkVersion = this.appVersion;
    this.appVersion = version;
  },

  /**
   * Check if the token is valid and the client is logged in
   * @return {Boolean} hasValidSession
   */
  // @ts-expect-error TS(1015): Parameter cannot have question mark and initialize... Remove this comment to see the full error message
  hasValidSession: function hasValidSession(tokenType) {
    if (tokenType === void 0) {
      tokenType = 'account';
    }

    return this.tokens[tokenType] && !_isTokenExpired(this.tokens[tokenType]);
  },

  /**
   * Check if the token has expired
   * @return {Boolean} hasSessionExpired
   */
  // @ts-expect-error TS(1015): Parameter cannot have question mark and initialize... Remove this comment to see the full error message
  hasSessionExpired: function hasSessionExpired(tokenType) {
    if (tokenType === void 0) {
      tokenType = 'account';
    }

    return this.tokens[tokenType] && _isTokenExpired(this.tokens[tokenType]);
  },

  /**
   * Set the HTTP request interceptor - will intercept every HTTP request that the Medipass SDK uses.
   * @param {Object} headers - Headers to be included in every request
   */
  setRequestInterceptor: function setRequestInterceptor(headers) {
    var _this = this;

    this.requestInterceptor = this.axios.interceptors.request.use( /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(config) {
        var request, deviceId;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                request = Object.assign({}, config);

                _forOwn(headers, function (val, key) {
                  request.headers[key] = val;
                });

                request.headers[HEADER__APP_ID] = _this.appId;
                request.headers[HEADER__APP_VERSION] = _this.appVersion;
                request.headers[HEADER__API_VER] = _this.apiVer;

                if (_this.sdkVersion) {
                  request.headers[HEADER__SDK_VERSION] = _this.sdkVersion;
                }

                if (config.tokenType === 'session' && _this.tokens.session) {
                  request.headers.Authorization = _this.tokens.session;
                } else if (_this.tokens.account) {
                  request.headers.Authorization = _this.tokens.account;
                }

                if (config.skipDeviceCheck) {
                  _context.next = 12;
                  break;
                }

                _context.next = 10;
                return getDeviceId();

              case 10:
                deviceId = _context.sent;
                request.headers[HEADER__DEVICE_ID] = deviceId;

              case 12:
                if (_this.requestInterceptorSuccess) {
                  _this.requestInterceptorSuccess(config);
                }

                return _context.abrupt("return", request);

              case 14:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }(), function (error) {
      return Promise.reject(error);
    });
  },

  /**
   * Set the HTTP response interceptor - will intercept every HTTP response that the Medipass SDK uses.
   */
  setResponseInterceptor: function setResponseInterceptor() {
    var _this2 = this;

    this.responseInterceptor = this.axios.interceptors.response.use(function (config) {
      var response = Object.assign({}, config);

      if (response.headers && response.headers[HEADER__TOKEN] && !_get(response, 'config.url', '').includes('/auth/impersonate')) {
        var authToken = response.headers[HEADER__TOKEN];

        _this2.setToken(authToken);
      }

      if (response.headers && response.headers[HEADER__INTERCOM_HASH]) {
        _this2.intercomHash = response.headers[HEADER__INTERCOM_HASH];
        storage.default.set('intercomHash', _this2.intercomHash);
      }

      if (_this2.responseInterceptorSuccess) {
        _this2.responseInterceptorSuccess(config);
      }

      return response;
    }, function (err) {
      if (_this2.responseInterceptorFailure) {
        _this2.responseInterceptorFailure(_get(err, 'response', err));
      }

      return Promise.reject(err);
    });
  },
  clearTokens: function clearTokens() {
    this.tokens = {
      account: null,
      session: null
    };
    storage.default.remove('tokens');
  },
  isImpersonating: function isImpersonating() {
    var _jwtDecode = jwtDecode(this.tokens.account),
        imp = _jwtDecode.imp;

    return Boolean(imp);
  },
  // @ts-expect-error TS(1015): Parameter cannot have question mark and initialize... Remove this comment to see the full error message
  getTokenExpiry: function getTokenExpiry(tokenType) {
    if (tokenType === void 0) {
      tokenType = 'account';
    }

    return jwtDecode(this.tokens[tokenType]).exp;
  },
  // @ts-expect-error TS(1015): Parameter cannot have question mark and initialize... Remove this comment to see the full error message
  setToken: function setToken(token, tokenType) {
    var _Object$assign;

    if (tokenType === void 0) {
      tokenType = 'account';
    }

    this.tokens[tokenType] = token;
    storage.default.set('tokens', Object.assign({}, this.tokens, (_Object$assign = {}, _Object$assign[tokenType] = token, _Object$assign)), {
      storeType: 'session'
    });
  },
  setAccount: function setAccount(account) {
    storage.default.set('accountId', account._id);
    this.accountId = account._id;
    storage.default.set('account', account);
    this.account = account;
  },
  setMember: function setMember(member) {
    storage.default.set('member', member);
    this.member = member;
  },
  setRegion: function setRegion(region) {
    if (region) {
      this.region = region;
    }

    if (this.env && this.region) {
      this.baseUrls = this.baseUrls || _getEnvBaseUrls(index.default, {
        env: this.env,
        region: this.region
      });
    }

    storage.default.set('region', region);
  },

  /**
   * Kill the SDK - stop interceptors, clear class properties, clear local storage
   */
  stop: function stop() {
    this.axios.interceptors.request.eject(this.requestInterceptor);
    this.axios.interceptors.request.eject(this.responseInterceptor);
    this.removeStorage();
  },
  removeStorage: function removeStorage() {
    this.clearTokens();
    this.account = null;
    this.accountId = null;
    this.intercomHash = null;
    this.isSuperAdmin = null;
    this.member = null;
    storage.default.clearAll();
  },
  setIsAnalyticsInitialised: function setIsAnalyticsInitialised(isInitialised) {
    this.isAnalyticsInitialised = isInitialised;
  }
};

function ownKeys$1g(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$1g(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1g(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1g(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function parseProviderSet(_x, _x2) {
  return _parseProviderSet.apply(this, arguments);
}

function _parseProviderSet() {
  _parseProviderSet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(providerSet, _temp) {
    var _ref, businessId, funders, providerRegistrationTypes, _providerNumberTypes, _ref$parseProviderNum, parseProviderNumberType, fetchPractices, fetchProviderNumberTypes, _yield$Promise$all, fundersResponse, practicesResponse, providerRegistrations, providerNumberTypesResponse, fundersMap, practicesMap, providerNumberTypesMap, newProviderSet;

    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _ref = _temp === void 0 ? {} : _temp, businessId = _ref.businessId, funders = _ref.funders, providerRegistrationTypes = _ref.providerRegistrationTypes, _providerNumberTypes = _ref.providerNumberTypes, _ref$parseProviderNum = _ref.parseProviderNumberType, parseProviderNumberType = _ref$parseProviderNum === void 0 ? false : _ref$parseProviderNum;

            fetchPractices = /*#__PURE__*/function () {
              var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
                var practiceIds, uniquePracticeIds, practices;
                return _regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        practiceIds = providerSet.map(function (providerData) {
                          return providerData.practiceId;
                        });
                        uniquePracticeIds = _uniq(practiceIds).filter(Boolean);
                        practices = [];
                        _context.next = 5;
                        return Promise.all(uniquePracticeIds.map(function (practiceId) {
                          return (// @ts-expect-error TS(2345): Argument of type 'unknown' is not assignable to pa... Remove this comment to see the full error message
                            sdkClient.practices.getBusinessPractice(businessId, practiceId).catch(function () {
                              return {
                                _id: practiceId
                              };
                            })
                          );
                        }));

                      case 5:
                        practices = _context.sent;
                        return _context.abrupt("return", practices);

                      case 7:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }));

              return function fetchPractices() {
                return _ref2.apply(this, arguments);
              };
            }();

            fetchProviderNumberTypes = /*#__PURE__*/function () {
              var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
                var providerNumberTypeIds, uniqueProviderNumberTypeIds, providerNumberTypes;
                return _regeneratorRuntime.wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        if (!_providerNumberTypes) {
                          _context2.next = 2;
                          break;
                        }

                        return _context2.abrupt("return", _providerNumberTypes);

                      case 2:
                        providerNumberTypeIds = providerSet.map(function (providerData) {
                          return providerData.providerNumberTypeId;
                        });
                        uniqueProviderNumberTypeIds = _uniq(providerNumberTypeIds).filter(Boolean);
                        _context2.next = 6;
                        return Promise.all(uniqueProviderNumberTypeIds.map(function (providerNumberTypeId) {
                          return (// @ts-expect-error TS(2345): Argument of type 'unknown' is not assignable to pa... Remove this comment to see the full error message
                            sdkClient.providerNumberTypes.getProviderNumberType(providerNumberTypeId)
                          );
                        }));

                      case 6:
                        providerNumberTypes = _context2.sent;
                        return _context2.abrupt("return", providerNumberTypes);

                      case 8:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, _callee2);
              }));

              return function fetchProviderNumberTypes() {
                return _ref3.apply(this, arguments);
              };
            }();

            _context3.next = 5;
            return Promise.all([funders ? funders : sdkClient.funders.getFunders(), fetchPractices(), // providerSet is in the same shape as professions, so let's just use that func.
            parseProfessions(providerSet, {
              providerRegistrationTypes: providerRegistrationTypes
            }), parseProviderNumberType ? fetchProviderNumberTypes() : []]);

          case 5:
            _yield$Promise$all = _context3.sent;
            fundersResponse = _yield$Promise$all[0];
            practicesResponse = _yield$Promise$all[1];
            providerRegistrations = _yield$Promise$all[2];
            providerNumberTypesResponse = _yield$Promise$all[3];
            fundersMap = fundersResponse.reduce(function (currentFunders, funder) {
              var _objectSpread2;

              return _objectSpread$1g({}, currentFunders, (_objectSpread2 = {}, _objectSpread2[funder._id] = funder, _objectSpread2));
            }, {});
            practicesMap = practicesResponse.reduce(function (currentPractices, practice) {
              var _objectSpread3;

              return _objectSpread$1g({}, currentPractices, (_objectSpread3 = {}, _objectSpread3[practice._id] = practice, _objectSpread3));
            }, {});
            providerNumberTypesMap = providerNumberTypesResponse == null ? void 0 : providerNumberTypesResponse.reduce(function (currentProviderNumberTypes, providerNumberType) {
              var _objectSpread4;

              return _objectSpread$1g({}, currentProviderNumberTypes, (_objectSpread4 = {}, _objectSpread4[providerNumberType._id] = providerNumberType, _objectSpread4));
            }, {});
            newProviderSet = providerSet.map(function (providerData, i) {
              return _objectSpread$1g({}, providerData, {}, providerRegistrations[i], {
                practice: practicesMap[providerData.practiceId],
                funder: fundersMap[providerData.funderId]
              }, parseProviderNumberType && {
                providerNumberType: providerNumberTypesMap == null ? void 0 : providerNumberTypesMap[providerData == null ? void 0 : providerData.providerNumberTypeId]
              });
            });
            return _context3.abrupt("return", newProviderSet);

          case 15:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _parseProviderSet.apply(this, arguments);
}

function parseProviderRegistrations(_x3, _x4) {
  return _parseProviderRegistrations.apply(this, arguments);
}

function _parseProviderRegistrations() {
  _parseProviderRegistrations = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(providerRegistrations, opts) {
    var professions, newProviderRegistrations;
    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (opts === void 0) {
              opts = {};
            }

            _context4.next = 3;
            return parseProfessions(providerRegistrations, opts);

          case 3:
            professions = _context4.sent;
            newProviderRegistrations = _merge(providerRegistrations, professions);
            return _context4.abrupt("return", newProviderRegistrations);

          case 6:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _parseProviderRegistrations.apply(this, arguments);
}

Object.defineProperty(exports, 'FilterGroup', {
  enumerable: true,
  get: function () {
    return filterOption.FilterGroup;
  }
});
exports.regions = regions.regions;
exports.API_VER = API_VER;
exports.API_VERSIONS = API_VERSIONS;
exports.APP_ID = APP_ID;
exports.CONTENT_TYPE = CONTENT_TYPE;
exports.DEFAULT_ENV = DEFAULT_ENV;
exports.DEFAULT_REGION = DEFAULT_REGION;
exports.DEFAULT_VERSION = DEFAULT_VERSION;
exports.HEADER__API_VER = HEADER__API_VER;
exports.HEADER__APP_ID = HEADER__APP_ID;
exports.HEADER__APP_VERSION = HEADER__APP_VERSION;
exports.HEADER__DEVICE_ID = HEADER__DEVICE_ID;
exports.HEADER__INTERCOM_HASH = HEADER__INTERCOM_HASH;
exports.HEADER__SDK_VERSION = HEADER__SDK_VERSION;
exports.HEADER__TOKEN = HEADER__TOKEN;
exports.PATH__FUNDERS = PATH__FUNDERS;
exports.PATH__JHCS = PATH__JHCS;
exports.PATH__MEDICARE_VERIFY = PATH__MEDICARE_VERIFY;
exports.PATH__REF_SOURCES = PATH__REF_SOURCES;
exports._isTokenExpired = _isTokenExpired;
exports.abr = abr;
exports.acceptInvite = acceptInvite;
exports.accounts = accounts;
exports.actions = actions;
exports.addBeneficialOwner = addBeneficialOwner;
exports.addHealthFundAccountToSelfCheckoutSession = addHealthFundAccountToSelfCheckoutSession;
exports.addMemberToSelfCheckoutSession = addMemberToSelfCheckoutSession;
exports.addPaymentMethodToSelfCheckoutSession = addPaymentMethodToSelfCheckoutSession;
exports.addTransactionNote = addTransactionNote;
exports.apiKeys = apiKeys;
exports.applicationUtils = applicationUtils;
exports.applications = applications;
exports.applyForBusinessForm = applyForBusinessForm;
exports.approve = approve;
exports.approveClaim = approveClaim;
exports.approveHealthFundDocument = approveHealthFundDocument;
exports.approveTransaction = approveTransaction;
exports.archive = archive;
exports.assignHealthFundDocumentToMe = assignHealthFundDocumentToMe;
exports.assignHealthFundTransactionToSelf = assignHealthFundTransactionToSelf;
exports.assignHealthFundTransactions = assignHealthFundTransactions;
exports.assignTransactionToSelf = assignTransactionToSelf;
exports.attachments = attachments;
exports.auth = auth;
exports.aws = aws;
exports.bulkSubmits = bulkSubmits;
exports.bulkUploads = bulkUploads;
exports.businessProfiles = businessProfiles;
exports.businesses = businesses;
exports.cancel = cancel;
exports.cancel$1 = cancel$1;
exports.cancelBusinessDocument = cancelBusinessDocument;
exports.cancelBusinessTransaction = cancelBusinessTransaction;
exports.cancelClaim = cancelClaim;
exports.cancelInvoice = cancelInvoice;
exports.cancelSession = cancelSession;
exports.cancelTransaction = cancelTransaction;
exports.ceaseHealthFundDocument = ceaseHealthFundDocument;
exports.changePassword = changePassword;
exports.checkAppVersion = checkAppVersion;
exports.checkDupe = checkDupe;
exports.checkDupe$1 = checkDupe$1;
exports.checkRNAExists = checkRNAExists;
exports.checkStaffMemberEmailExists = checkStaffMemberEmailExists;
exports.claimItems = claimItems;
exports.clonePracticeIntoBusiness = clonePracticeIntoBusiness;
exports.cloneStaffMemberIntoBusiness = cloneStaffMemberIntoBusiness;
exports.completeQuote = completeQuote;
exports.completeTransaction = completeTransaction;
exports.convertDraft = convertDraft;
exports.createAccountMember = createAccountMember;
exports.createAccountPaymentMethod = createAccountPaymentMethod;
exports.createAccountSecretKey = createAccountSecretKey;
exports.createApiKey = createApiKey;
exports.createApplication = createApplication;
exports.createAppointmentForHealthFundRNA = createAppointmentForHealthFundRNA;
exports.createBulkUpload = createBulkUpload;
exports.createBusinesFunderSettings = createBusinesFunderSettings;
exports.createBusiness = createBusiness;
exports.createBusinessAccount = createBusinessAccount;
exports.createBusinessFunderValue = createBusinessFunderValue;
exports.createBusinessHold = createBusinessHold;
exports.createBusinessInstalmentPlan = createBusinessInstalmentPlan;
exports.createBusinessLog = createBusinessLog;
exports.createBusinessOnboardingApplication = createBusinessOnboardingApplication;
exports.createBusinessOnboardingRequest = createBusinessOnboardingRequest;
exports.createBusinessPatient = createBusinessPatient;
exports.createBusinessPatientHealthFundAccount = createBusinessPatientHealthFundAccount;
exports.createBusinessPatientPaymentMethod = createBusinessPatientPaymentMethod;
exports.createBusinessPaymentMethod = createBusinessPaymentMethod;
exports.createBusinessPractice = createBusinessPractice;
exports.createBusinessPracticeInvoice = createBusinessPracticeInvoice;
exports.createBusinessPracticeService = createBusinessPracticeService;
exports.createBusinessPracticeStaffMemberInvoice = createBusinessPracticeStaffMemberInvoice;
exports.createBusinessPracticeStaffMemberQuote = createBusinessPracticeStaffMemberQuote;
exports.createBusinessService = createBusinessService;
exports.createBusinessStaffMember = createBusinessStaffMember;
exports.createBusinessSubscription = createBusinessSubscription;
exports.createBusinessTransactionQuote = createBusinessTransactionQuote;
exports.createConsumerAccount = createConsumerAccount;
exports.createDocAccount = createDocAccount;
exports.createEclipseInPatientInvoice = createEclipseInPatientInvoice;
exports.createEclipseOnlineEligibilityCheckInvoice = createEclipseOnlineEligibilityCheckInvoice;
exports.createEclipseOverseasInvoice = createEclipseOverseasInvoice;
exports.createEmailPackage = createEmailPackage;
exports.createHealthFund = createHealthFund;
exports.createHealthFundDocumentNote = createHealthFundDocumentNote;
exports.createHealthFundForm = createHealthFundForm;
exports.createHealthFundRNA = createHealthFundRNA;
exports.createHealthFundSetting = createHealthFundSetting;
exports.createHealthFundTransactionExport = createHealthFundTransactionExport;
exports.createInvoice = createInvoice;
exports.createInvoiceScan = createInvoiceScan;
exports.createLog = createLog;
exports.createMembersHealthFundAccount = createMembersHealthFundAccount;
exports.createMinionForHealthFund = createMinionForHealthFund;
exports.createMyInvoice = createMyInvoice;
exports.createOrganisationAccount = createOrganisationAccount;
exports.createOrganisationBusiness = createOrganisationBusiness;
exports.createOrganisationPractice = createOrganisationPractice;
exports.createOrganisationStaffMember = createOrganisationStaffMember;
exports.createPayment = createPayment;
exports.createPaymentAuthority = createPaymentAuthority;
exports.createPaymentMethod = createPaymentMethod;
exports.createPaymentRequest = createPaymentRequest;
exports.createProviderRequest = createProviderRequest;
exports.createProviderSetItemOnboardingApplication = createProviderSetItemOnboardingApplication;
exports.createSelfCheckoutSession = createSelfCheckoutSession;
exports.createSendClaim = createSendClaim;
exports.createService = createService;
exports.createShortLivedToken = createShortLivedToken;
exports.createStaffProviderSetItem = createStaffProviderSetItem;
exports.createSupportNote = createSupportNote;
exports.declineHealthFundDocument = declineHealthFundDocument;
exports.decrypt = decrypt;
exports.deleteAccount = deleteAccount;
exports.deleteAccountPaymentMethod = deleteAccountPaymentMethod;
exports.deleteAccountSecretKey = deleteAccountSecretKey;
exports.deleteApiKey = deleteApiKey;
exports.deleteBusinesFunderSettings = deleteBusinesFunderSettings;
exports.deleteBusiness = deleteBusiness;
exports.deleteBusinessFunderValue = deleteBusinessFunderValue;
exports.deleteBusinessPatient = deleteBusinessPatient;
exports.deleteBusinessPatientHealthFundAccount = deleteBusinessPatientHealthFundAccount;
exports.deleteBusinessPatientPaymentMethod = deleteBusinessPatientPaymentMethod;
exports.deleteBusinessPaymentMethod = deleteBusinessPaymentMethod;
exports.deleteBusinessPractice = deleteBusinessPractice;
exports.deleteBusinessService = deleteBusinessService;
exports.deleteBusinessStaffMember = deleteBusinessStaffMember;
exports.deleteBusinessStaffMemberEmail = deleteBusinessStaffMemberEmail;
exports.deleteDocAccount = deleteDocAccount;
exports.deleteHealthFund = deleteHealthFund;
exports.deleteHealthFundDocumentTag = deleteHealthFundDocumentTag;
exports.deleteHealthFundForm = deleteHealthFundForm;
exports.deleteHealthFundNote = deleteHealthFundNote;
exports.deleteHealthFundSetting = deleteHealthFundSetting;
exports.deleteMember = deleteMember;
exports.deleteMembersHealthFundAccount = deleteMembersHealthFundAccount;
exports.deleteMinionForHealthFund = deleteMinionForHealthFund;
exports.deleteOnboardingRequest = deleteOnboardingRequest;
exports.deleteOrganisationPractice = deleteOrganisationPractice;
exports.deletePaymentMethod = deletePaymentMethod;
exports.deleteService = deleteService;
exports.deleteStaffProviderSetItem = deleteStaffProviderSetItem;
exports.deleteTerminal = deleteTerminal;
exports.deleteTransaction = deleteTransaction;
exports.deleteTransactionNote = deleteTransactionNote;
exports.deleteTransactionTag = deleteTransactionTag;
exports.deployService = deployService;
exports.devices = devices;
exports.disableAccount = disableAccount;
exports.disableBusiness = disableBusiness;
exports.discoverMember = discoverMember;
exports.discoverMember$1 = discoverMember$1;
exports.docAccounts = docAccounts;
exports.documents = documents;
exports.emailBusinessOnboardingQuestions = emailBusinessOnboardingQuestions;
exports.emails = emails;
exports.enableAccount = enableAccount;
exports.enableBusiness = enableBusiness;
exports.fetchLatestAppVersion = fetchLatestAppVersion;
exports.fetchMinimumAppVerson = fetchMinimumAppVerson;
exports.filterOptions = filterOptions;
exports.formApplicationTemplates = formApplicationTemplates;
exports.formApplications = formApplications;
exports.forms = forms;
exports.funderServices = funderServices;
exports.funderSettings = funderSettings;
exports.funderValues = funderValues;
exports.funders = funders;
exports.futures = futures;
exports.generateAuthy = generateAuthy;
exports.generateDocumentEmailTemplate = generateDocumentEmailTemplate;
exports.generateEmailTemplate = generateEmailTemplate;
exports.getAbr = getAbr;
exports.getAccount = getAccount;
exports.getAccountExists = getAccountExists;
exports.getAccountMembers = getAccountMembers;
exports.getAccountPaymentMethod = getAccountPaymentMethod;
exports.getAccountPaymentMethods = getAccountPaymentMethods;
exports.getAccountPractices = getAccountPractices;
exports.getAccountRoles = getAccountRoles;
exports.getAccountSecretKeys = getAccountSecretKeys;
exports.getAccountTransactions = getAccountTransactions;
exports.getAccounts = getAccounts;
exports.getAccountsBusinesses = getAccountsBusinesses;
exports.getAction = getAction;
exports.getActions = getActions;
exports.getApplication = getApplication;
exports.getApplications = getApplications;
exports.getBsbDetails = getBsbDetails;
exports.getBulkUpload = getBulkUpload;
exports.getBulkUploadUrl = getBulkUploadUrl;
exports.getBusinesFunderSettingsById = getBusinesFunderSettingsById;
exports.getBusiness = getBusiness;
exports.getBusinessApiKeys = getBusinessApiKeys;
exports.getBusinessCbo = getBusinessCbo;
exports.getBusinessClaimItem = getBusinessClaimItem;
exports.getBusinessClaimItems = getBusinessClaimItems;
exports.getBusinessClientToken = getBusinessClientToken;
exports.getBusinessDocument = getBusinessDocument;
exports.getBusinessDocuments = getBusinessDocuments;
exports.getBusinessEclipseTransactionPaymentReport = getBusinessEclipseTransactionPaymentReport;
exports.getBusinessEclipseTransactionProcessingReport = getBusinessEclipseTransactionProcessingReport;
exports.getBusinessFilterOptions = getBusinessFilterOptions;
exports.getBusinessForm = getBusinessForm;
exports.getBusinessFormApplication = getBusinessFormApplication;
exports.getBusinessFormApplicationTemplate = getBusinessFormApplicationTemplate;
exports.getBusinessFormPracticeStaffMembers = getBusinessFormPracticeStaffMembers;
exports.getBusinessFormPractices = getBusinessFormPractices;
exports.getBusinessFunderSettings = getBusinessFunderSettings;
exports.getBusinessFunderValueById = getBusinessFunderValueById;
exports.getBusinessFunderValues = getBusinessFunderValues;
exports.getBusinessFuture = getBusinessFuture;
exports.getBusinessFutures = getBusinessFutures;
exports.getBusinessHealthFunds = getBusinessHealthFunds;
exports.getBusinessKyc = getBusinessKyc;
exports.getBusinessMember = getBusinessMember;
exports.getBusinessMembers = getBusinessMembers;
exports.getBusinessMessageMappings = getBusinessMessageMappings;
exports.getBusinessModalities = getBusinessModalities;
exports.getBusinessOnboardingApplications = getBusinessOnboardingApplications;
exports.getBusinessOnboardingRequests = getBusinessOnboardingRequests;
exports.getBusinessPDFs = getBusinessPDFs;
exports.getBusinessPMSPractices = getBusinessPMSPractices;
exports.getBusinessPMSServices = getBusinessPMSServices;
exports.getBusinessPMSStaffMembers = getBusinessPMSStaffMembers;
exports.getBusinessPatient = getBusinessPatient;
exports.getBusinessPatientByRefId = getBusinessPatientByRefId;
exports.getBusinessPatientHealthFundAccount = getBusinessPatientHealthFundAccount;
exports.getBusinessPatientHealthFundAccounts = getBusinessPatientHealthFundAccounts;
exports.getBusinessPatientPaymentMethod = getBusinessPatientPaymentMethod;
exports.getBusinessPatientPaymentMethods = getBusinessPatientPaymentMethods;
exports.getBusinessPatientPaymentMethodsByRefId = getBusinessPatientPaymentMethodsByRefId;
exports.getBusinessPatients = getBusinessPatients;
exports.getBusinessPaymentClientToken = getBusinessPaymentClientToken;
exports.getBusinessPaymentMethod = getBusinessPaymentMethod;
exports.getBusinessPaymentMethods = getBusinessPaymentMethods;
exports.getBusinessPractice = getBusinessPractice;
exports.getBusinessPracticeOnboardingApplications = getBusinessPracticeOnboardingApplications;
exports.getBusinessPracticeService = getBusinessPracticeService;
exports.getBusinessPracticeServices = getBusinessPracticeServices;
exports.getBusinessPracticeStaffMember = getBusinessPracticeStaffMember;
exports.getBusinessPracticeStaffMemberHealthFundSettings = getBusinessPracticeStaffMemberHealthFundSettings;
exports.getBusinessPracticeStaffMemberModalities = getBusinessPracticeStaffMemberModalities;
exports.getBusinessPracticeStaffMemberService = getBusinessPracticeStaffMemberService;
exports.getBusinessPracticeStaffMemberServices = getBusinessPracticeStaffMemberServices;
exports.getBusinessPracticeStaffMembers = getBusinessPracticeStaffMembers;
exports.getBusinessPracticeStaffTransactions = getBusinessPracticeStaffTransactions;
exports.getBusinessPracticeTransactions = getBusinessPracticeTransactions;
exports.getBusinessPracticeUploadUrl = getBusinessPracticeUploadUrl;
exports.getBusinessPractices = getBusinessPractices;
exports.getBusinessProduct = getBusinessProduct;
exports.getBusinessProducts = getBusinessProducts;
exports.getBusinessProfessionalCategories = getBusinessProfessionalCategories;
exports.getBusinessRNA = getBusinessRNA;
exports.getBusinessRNAs = getBusinessRNAs;
exports.getBusinessSalesClientToken = getBusinessSalesClientToken;
exports.getBusinessService = getBusinessService;
exports.getBusinessServiceStaffMembers = getBusinessServiceStaffMembers;
exports.getBusinessServices = getBusinessServices;
exports.getBusinessSettlementSummaries = getBusinessSettlementSummaries;
exports.getBusinessSettlementSummariesByPeriod = getBusinessSettlementSummariesByPeriod;
exports.getBusinessSettlementSummariesSearchOptions = getBusinessSettlementSummariesSearchOptions;
exports.getBusinessSettlementSummaryById = getBusinessSettlementSummaryById;
exports.getBusinessSettlements = getBusinessSettlements;
exports.getBusinessSpecialties = getBusinessSpecialties;
exports.getBusinessStaffAccount = getBusinessStaffAccount;
exports.getBusinessStaffMember = getBusinessStaffMember;
exports.getBusinessStaffMemberRoles = getBusinessStaffMemberRoles;
exports.getBusinessStaffMemberServices = getBusinessStaffMemberServices;
exports.getBusinessStaffMembers = getBusinessStaffMembers;
exports.getBusinessStaffPractices = getBusinessStaffPractices;
exports.getBusinessStaffUploadUrl = getBusinessStaffUploadUrl;
exports.getBusinessSubscription = getBusinessSubscription;
exports.getBusinessSubscriptions = getBusinessSubscriptions;
exports.getBusinessTerminals = getBusinessTerminals;
exports.getBusinessTransaction = getBusinessTransaction;
exports.getBusinessTransactionByInvoiceReference = getBusinessTransactionByInvoiceReference;
exports.getBusinessTransactionPaymentReport = getBusinessTransactionPaymentReport;
exports.getBusinessTransactionProcessingReport = getBusinessTransactionProcessingReport;
exports.getBusinessTransactions = getBusinessTransactions;
exports.getBusinesses = getBusinesses;
exports.getClaimAttachmentUrl = getClaimAttachmentUrl;
exports.getClientToken = getClientToken;
exports.getClientToken$1 = getClientToken$1;
exports.getCurrentAppVersion = getCurrentAppVersion;
exports.getDeployment = getDeployment;
exports.getDeployments = getDeployments;
exports.getDeviceId = getDeviceId;
exports.getDocAccount = getDocAccount;
exports.getDocAccounts = getDocAccounts;
exports.getDraftProgressStatus = getDraftProgressStatus;
exports.getFunder = getFunder;
exports.getFunders = getFunders;
exports.getFuture = getFuture;
exports.getHealthFund = getHealthFund;
exports.getHealthFundAccount = getHealthFundAccount;
exports.getHealthFundAccountStatsForHealthFundId = getHealthFundAccountStatsForHealthFundId;
exports.getHealthFundAccounts = getHealthFundAccounts;
exports.getHealthFundClaimItem = getHealthFundClaimItem;
exports.getHealthFundClaimItems = getHealthFundClaimItems;
exports.getHealthFundDocument = getHealthFundDocument;
exports.getHealthFundDocumentNotes = getHealthFundDocumentNotes;
exports.getHealthFundDocuments = getHealthFundDocuments;
exports.getHealthFundEmailSections = getHealthFundEmailSections;
exports.getHealthFundEmailTemplates = getHealthFundEmailTemplates;
exports.getHealthFundForm = getHealthFundForm;
exports.getHealthFundFormApplication = getHealthFundFormApplication;
exports.getHealthFundFormApplicationTemplate = getHealthFundFormApplicationTemplate;
exports.getHealthFundFormUploadUrl = getHealthFundFormUploadUrl;
exports.getHealthFundForms = getHealthFundForms;
exports.getHealthFundMemberByMemberId = getHealthFundMemberByMemberId;
exports.getHealthFundMemberTransactions = getHealthFundMemberTransactions;
exports.getHealthFundNote = getHealthFundNote;
exports.getHealthFundRNA = getHealthFundRNA;
exports.getHealthFundRNAs = getHealthFundRNAs;
exports.getHealthFundSettings = getHealthFundSettings;
exports.getHealthFundTransaction = getHealthFundTransaction;
exports.getHealthFundTransactionExport = getHealthFundTransactionExport;
exports.getHealthFundTransactionNote = getHealthFundTransactionNote;
exports.getHealthFundVendor = getHealthFundVendor;
exports.getHealthFundVendors = getHealthFundVendors;
exports.getHealthFundWorkflowExceptions = getHealthFundWorkflowExceptions;
exports.getHealthFunds = getHealthFunds;
exports.getHealthFundsForAccount = getHealthFundsForAccount;
exports.getICDItems = getICDItems;
exports.getInvoiceScan = getInvoiceScan;
exports.getInvoiceScanUploadUrl = getInvoiceScanUploadUrl;
exports.getJHC = getJHC;
exports.getJHCs = getJHCs;
exports.getLatestApprovedDocument = getLatestApprovedDocument;
exports.getManualFormUploadUrl = getManualFormUploadUrl;
exports.getMedicareHealthFund = getMedicareHealthFund;
exports.getMember = getMember;
exports.getMembers = getMembers;
exports.getMembersForHealthFund = getMembersForHealthFund;
exports.getMembersHealthFundAccount = getMembersHealthFundAccount;
exports.getMembersHealthFundAccounts = getMembersHealthFundAccounts;
exports.getMinionForHealthFund = getMinionForHealthFund;
exports.getMinionsForHealthFund = getMinionsForHealthFund;
exports.getModalities = getModalities;
exports.getModality = getModality;
exports.getModalityICDItems = getModalityICDItems;
exports.getMyBusinesses = getMyBusinesses;
exports.getMySelfCheckoutSession = getMySelfCheckoutSession;
exports.getMySelfCheckoutSessionTransaction = getMySelfCheckoutSessionTransaction;
exports.getNonce = getNonce;
exports.getOnboardingRequest = getOnboardingRequest;
exports.getOrganisationAccounts = getOrganisationAccounts;
exports.getOrganisationBusinessProfiles = getOrganisationBusinessProfiles;
exports.getOrganisationBusinesses = getOrganisationBusinesses;
exports.getOrganisationHealthFunds = getOrganisationHealthFunds;
exports.getOrganisationPracticeProfiles = getOrganisationPracticeProfiles;
exports.getOrganisationPractices = getOrganisationPractices;
exports.getOrganisationStaffMembers = getOrganisationStaffMembers;
exports.getOrganisationStaffProfiles = getOrganisationStaffProfiles;
exports.getOrganisations = getOrganisations;
exports.getPartner = getPartner;
exports.getPartners = getPartners;
exports.getPaymentGatewayError = getPaymentGatewayError;
exports.getPaymentLink = getPaymentLink;
exports.getPaymentLink$1 = getPaymentLink$1;
exports.getPaymentMethods = getPaymentMethods;
exports.getPractice = getPractice;
exports.getPracticeKyc = getPracticeKyc;
exports.getPracticeProfile = getPracticeProfile;
exports.getPracticeTypes = getPracticeTypes;
exports.getPracticesWithApprovedApplications = getPracticesWithApprovedApplications;
exports.getProducts = getProducts;
exports.getProfessionalCategories = getProfessionalCategories;
exports.getProfessionalCategory = getProfessionalCategory;
exports.getProviderNumberType = getProviderNumberType;
exports.getProviderNumberTypes = getProviderNumberTypes;
exports.getProviderRegistrationType = getProviderRegistrationType;
exports.getProviderRegistrationTypes = getProviderRegistrationTypes;
exports.getProviderSetItemOnboardingApplication = getProviderSetItemOnboardingApplication;
exports.getProviderTypes = getProviderTypes;
exports.getProvidersStatus = getProvidersStatus;
exports.getRefSources = getRefSources;
exports.getRoles = getRoles;
exports.getS3SignedUrl = getS3SignedUrl;
exports.getSelfApplication = getSelfApplication;
exports.getSelfApplicationCached = getSelfApplicationCached;
exports.getService = getService;
exports.getServices = getServices;
exports.getSpecialties = getSpecialties;
exports.getSpecialty = getSpecialty;
exports.getStaffMember = getStaffMember;
exports.getStaffProfile = getStaffProfile;
exports.getTerminal = getTerminal;
exports.getTerminals = getTerminals;
exports.getTransactionByTransactionId = getTransactionByTransactionId;
exports.getTransactionClaimPDF = getTransactionClaimPDF;
exports.getTransactionClaimPdfV2 = getTransactionClaimPdfV2;
exports.getTransactionNote = getTransactionNote;
exports.getTransactionNotes = getTransactionNotes;
exports.getTransactionPDF = getTransactionPDF;
exports.getTransactionRiskScore = getTransactionRiskScore;
exports.getTransactionStatsCSVForHealthFundId = getTransactionStatsCSVForHealthFundId;
exports.getTransactionStatsForBusiness = getTransactionStatsForBusiness;
exports.getTransactionStatsForHealthFundId = getTransactionStatsForHealthFundId;
exports.getTransactionStatsForOrganisation = getTransactionStatsForOrganisation;
exports.getTransactionStatsForPractice = getTransactionStatsForPractice;
exports.getTransactionsByMember = getTransactionsByMember;
exports.getTransactionsForHealthFund = getTransactionsForHealthFund;
exports.getTrigger = getTrigger;
exports.getTriggerCategories = getTriggerCategories;
exports.getTriggers = getTriggers;
exports.getTrustDocumentUploadUrl = getTrustDocumentUploadUrl;
exports.grantBusinessPracticeStaffRole = grantBusinessPracticeStaffRole;
exports.grantBusinessStaffRole = grantBusinessStaffRole;
exports.healthFundAccounts = healthFundAccounts;
exports.healthFundDocumentEmail = healthFundDocumentEmail;
exports.healthFundEmailSections = healthFundEmailSections;
exports.healthFundEmailTemplates = healthFundEmailTemplates;
exports.healthFundSettings = healthFundSettings;
exports.healthFundTransactionEmail = healthFundTransactionEmail;
exports.healthfunds = healthfunds;
exports.icdItems = icdItems;
exports.impersonate = impersonate;
exports.importBusinessPMSPractice = importBusinessPMSPractice;
exports.importBusinessPMSService = importBusinessPMSService;
exports.importBusinessPMSStaffMember = importBusinessPMSStaffMember;
exports.inviteAnyone = inviteAnyone;
exports.inviteBusinessStaffMember = inviteBusinessStaffMember;
exports.inviteHealthFundAccount = inviteHealthFundAccount;
exports.inviteMember = inviteMember;
exports.inviteNewBusinessStaffMember = inviteNewBusinessStaffMember;
exports.invoiceScans = invoiceScans;
exports.jhcs = jhcs;
exports.kyc = kyc;
exports.linkBusinessProfile = linkBusinessProfile;
exports.linkPracticeProfile = linkPracticeProfile;
exports.linkStaffProfile = linkStaffProfile;
exports.login = login;
exports.loginWithToken = loginWithToken;
exports.logout = logout;
exports.logs = logs;
exports.members = members;
exports.messageMappings = messageMappings;
exports.minions = minions;
exports.modalities = modalities;
exports.notes = notes;
exports.notifyPartnerAccount = notifyPartnerAccount;
exports.oldVerifyDVA = oldVerifyDVA;
exports.onboardingApplications = onboardingApplications;
exports.onboardingRequests = onboardingRequests;
exports.ops = ops;
exports.organisations = organisations;
exports.parkHealthFundDocument = parkHealthFundDocument;
exports.parseProfessions = parseProfessions;
exports.parseProviderRegistrations = parseProviderRegistrations;
exports.parseProviderSet = parseProviderSet;
exports.partners = partners;
exports.pathApiKeyByApiKeyId = pathApiKeyByApiKeyId;
exports.pathApiKeysByBusinessId = pathApiKeysByBusinessId;
exports.pathBusinessAddBeneficialOwner = pathBusinessAddBeneficialOwner;
exports.pathBusinessBulkUpload = pathBusinessBulkUpload;
exports.pathBusinessBulkUploadUrl = pathBusinessBulkUploadUrl;
exports.pathBusinessBulkUploads = pathBusinessBulkUploads;
exports.pathBusinessCbo = pathBusinessCbo;
exports.pathBusinessDocument = pathBusinessDocument;
exports.pathBusinessDocumentCancel = pathBusinessDocumentCancel;
exports.pathBusinessDocuments = pathBusinessDocuments;
exports.pathBusinessForm = pathBusinessForm;
exports.pathBusinessFormApplication = pathBusinessFormApplication;
exports.pathBusinessFormApplicationTemplate = pathBusinessFormApplicationTemplate;
exports.pathBusinessFormApplications = pathBusinessFormApplications;
exports.pathBusinessFuture = pathBusinessFuture;
exports.pathBusinessFutures = pathBusinessFutures;
exports.pathBusinessHolds = pathBusinessHolds;
exports.pathBusinessInstalmentPlans = pathBusinessInstalmentPlans;
exports.pathBusinessKyc = pathBusinessKyc;
exports.pathBusinessKycUnverify = pathBusinessKycUnverify;
exports.pathBusinessKycVerify = pathBusinessKycVerify;
exports.pathBusinessLog = pathBusinessLog;
exports.pathBusinessMessageMappings = pathBusinessMessageMappings;
exports.pathBusinessOnboardingApplications = pathBusinessOnboardingApplications;
exports.pathBusinessOnboardingRequests = pathBusinessOnboardingRequests;
exports.pathBusinessPracticeOnboardingApplications = pathBusinessPracticeOnboardingApplications;
exports.pathBusinessProduct = pathBusinessProduct;
exports.pathBusinessProducts = pathBusinessProducts;
exports.pathBusinessProfessionalCategories = pathBusinessProfessionalCategories;
exports.pathBusinessRNA = pathBusinessRNA;
exports.pathBusinessRemoveBeneficialOwner = pathBusinessRemoveBeneficialOwner;
exports.pathBusinessSignUp = pathBusinessSignUp;
exports.pathBusinessSpecialties = pathBusinessSpecialties;
exports.pathBusinessSubscription = pathBusinessSubscription;
exports.pathBusinessSubscriptions = pathBusinessSubscriptions;
exports.pathBusinessVerifyBeneficialOwner = pathBusinessVerifyBeneficialOwner;
exports.pathBusinessesRNAs = pathBusinessesRNAs;
exports.pathCancels = pathCancels;
exports.pathClientTokenByPracticeId = pathClientTokenByPracticeId;
exports.pathCreateHealthFundTransactionExport = pathCreateHealthFundTransactionExport;
exports.pathFilterOptions = pathFilterOptions;
exports.pathFunder = pathFunder;
exports.pathFunderSettings = pathFunderSettings;
exports.pathFunderSettingsById = pathFunderSettingsById;
exports.pathFunderValues = pathFunderValues;
exports.pathFunderValuesById = pathFunderValuesById;
exports.pathFuture = pathFuture;
exports.pathGetAbr = pathGetAbr;
exports.pathGetClaimAttachmentUrl = pathGetClaimAttachmentUrl;
exports.pathGetDraftProgressStatus = pathGetDraftProgressStatus;
exports.pathGetHealthFundTransactionExport = pathGetHealthFundTransactionExport;
exports.pathGetLatestApprovedDocument = pathGetLatestApprovedDocument;
exports.pathGetManualFormUploadUrl = pathGetManualFormUploadUrl;
exports.pathGetProviderRegistrationType = pathGetProviderRegistrationType;
exports.pathGetProviderRegistrationTypes = pathGetProviderRegistrationTypes;
exports.pathGetS3SignedUrl = pathGetS3SignedUrl;
exports.pathGetTransactionNote = pathGetTransactionNote;
exports.pathGetTrustDocumentUploadUrl = pathGetTrustDocumentUploadUrl;
exports.pathHealthFundDocument = pathHealthFundDocument;
exports.pathHealthFundDocumentApprove = pathHealthFundDocumentApprove;
exports.pathHealthFundDocumentAssignToMe = pathHealthFundDocumentAssignToMe;
exports.pathHealthFundDocumentCease = pathHealthFundDocumentCease;
exports.pathHealthFundDocumentDecline = pathHealthFundDocumentDecline;
exports.pathHealthFundDocumentNotes = pathHealthFundDocumentNotes;
exports.pathHealthFundDocumentPark = pathHealthFundDocumentPark;
exports.pathHealthFundDocumentTag = pathHealthFundDocumentTag;
exports.pathHealthFundDocuments = pathHealthFundDocuments;
exports.pathHealthFundForm = pathHealthFundForm;
exports.pathHealthFundFormApplication = pathHealthFundFormApplication;
exports.pathHealthFundFormApplicationTemplate = pathHealthFundFormApplicationTemplate;
exports.pathHealthFundFormPublish = pathHealthFundFormPublish;
exports.pathHealthFundFormUnpublish = pathHealthFundFormUnpublish;
exports.pathHealthFundFormUploadUrl = pathHealthFundFormUploadUrl;
exports.pathHealthFundForms = pathHealthFundForms;
exports.pathHealthFundNote = pathHealthFundNote;
exports.pathHealthFundRNA = pathHealthFundRNA;
exports.pathHealthFundRNAAppointment = pathHealthFundRNAAppointment;
exports.pathHealthFundRNAAppointments = pathHealthFundRNAAppointments;
exports.pathHealthFundRNAs = pathHealthFundRNAs;
exports.pathHealthFundTransactionNote = pathHealthFundTransactionNote;
exports.pathHealthFundVendor = pathHealthFundVendor;
exports.pathHealthFundVendors = pathHealthFundVendors;
exports.pathHealthFundWorkflowExceptions = pathHealthFundWorkflowExceptions;
exports.pathInvoiceScanByInvoiceScanId = pathInvoiceScanByInvoiceScanId;
exports.pathInvoiceScansByBusinessId = pathInvoiceScansByBusinessId;
exports.pathJHC = pathJHC;
exports.pathLinkBusinessProfile = pathLinkBusinessProfile;
exports.pathLinkPracticeProfile = pathLinkPracticeProfile;
exports.pathLinkStaffProfile = pathLinkStaffProfile;
exports.pathLog = pathLog;
exports.pathOnboardingRequest = pathOnboardingRequest;
exports.pathOnboardingRequestOnboardingStep = pathOnboardingRequestOnboardingStep;
exports.pathOnboardingRequestSubmit = pathOnboardingRequestSubmit;
exports.pathOrganisationBusinessProfiles = pathOrganisationBusinessProfiles;
exports.pathOrganisationPracticeProfiles = pathOrganisationPracticeProfiles;
exports.pathOrganisationStaffProfiles = pathOrganisationStaffProfiles;
exports.pathPaymentLink = pathPaymentLink;
exports.pathPracticeKyc = pathPracticeKyc;
exports.pathPracticeKycUnverify = pathPracticeKycUnverify;
exports.pathPracticeKycVerify = pathPracticeKycVerify;
exports.pathPracticeOnboardingApplications = pathPracticeOnboardingApplications;
exports.pathPracticeProfile = pathPracticeProfile;
exports.pathProcessingRequests = pathProcessingRequests;
exports.pathProfessionalCategories = pathProfessionalCategories;
exports.pathProfessionalCategory = pathProfessionalCategory;
exports.pathProviderNumberType = pathProviderNumberType;
exports.pathProviderNumberTypes = pathProviderNumberTypes;
exports.pathProviderSetItemOnboardingApplication = pathProviderSetItemOnboardingApplication;
exports.pathProviderSetItemOnboardingApplications = pathProviderSetItemOnboardingApplications;
exports.pathRequestVerificationSupport = pathRequestVerificationSupport;
exports.pathResetTerminal = pathResetTerminal;
exports.pathResumeComplexVerification = pathResumeComplexVerification;
exports.pathScanClaimFile = pathScanClaimFile;
exports.pathSendReceipt = pathSendReceipt;
exports.pathSendWorkerMessage = pathSendWorkerMessage;
exports.pathSignUp = pathSignUp;
exports.pathSpecialties = pathSpecialties;
exports.pathSpecialty = pathSpecialty;
exports.pathStaffProfile = pathStaffProfile;
exports.pathSubmitDraftInvoices = pathSubmitDraftInvoices;
exports.pathSubmits = pathSubmits;
exports.pathTerminalByTerminalId = pathTerminalByTerminalId;
exports.pathTerminalsByBusinessId = pathTerminalsByBusinessId;
exports.pathTerminalsByPracticeId = pathTerminalsByPracticeId;
exports.pathTransactionNote = pathTransactionNote;
exports.pathTransactionNotes = pathTransactionNotes;
exports.pathUnlinkBusinessProfile = pathUnlinkBusinessProfile;
exports.pathUnlinkPracticeProfile = pathUnlinkPracticeProfile;
exports.pathUnlinkStaffProfile = pathUnlinkStaffProfile;
exports.pathUpdatePracticeRepresentative = pathUpdatePracticeRepresentative;
exports.pathUploadUrlByBusinessId = pathUploadUrlByBusinessId;
exports.pathVerifyEclipse = pathVerifyEclipse;
exports.patients = patients;
exports.pay = pay;
exports.payments = payments;
exports.pms = pms;
exports.practiceProfiles = practiceProfiles;
exports.practiceTypes = practiceTypes;
exports.practices = practices;
exports.products = products;
exports.professionalCategories = professionalCategories;
exports.professionsUtils = professionsUtils;
exports.providerNumberTypes = providerNumberTypes;
exports.providerRegistrationTypes = providerRegistrationTypes;
exports.providerRequests = providerRequests;
exports.providerTypes = providerTypes;
exports.publishHealthFundForm = publishHealthFundForm;
exports.reconcileClaim = reconcileClaim;
exports.refSources = refSources;
exports.refund = refund;
exports.refundByBusiness = refundByBusiness;
exports.refundPayment = refundPayment;
exports.registerDevice = registerDevice;
exports.registerTerminal = registerTerminal;
exports.rememberMe = rememberMe;
exports.removeAuthy = removeAuthy;
exports.removeBeneficialOwner = removeBeneficialOwner;
exports.removeHealthFundFromAccount = removeHealthFundFromAccount;
exports.replyToQuote = replyToQuote;
exports.request = request;
exports.requestAccountReset = requestAccountReset;
exports.requestBusinessPracticeStaffMemberProviderNumberToBeEnabled = requestBusinessPracticeStaffMemberProviderNumberToBeEnabled;
exports.requestClaimPractice = requestClaimPractice;
exports.requestMobileReset = requestMobileReset;
exports.requestOtk = requestOtk;
exports.requestOtk$1 = requestOtk$1;
exports.requestPasswordReset = requestPasswordReset;
exports.requestToAddProviderToPractice = requestToAddProviderToPractice;
exports.requestToVerifyAccount = requestToVerifyAccount;
exports.requestUpdatePatientPaymentMethod = requestUpdatePatientPaymentMethod;
exports.requestVerificationSupport = requestVerificationSupport;
exports.resetAccount = resetAccount;
exports.resetMobile = resetMobile;
exports.resetPassword = resetPassword;
exports.resetTerminal = resetTerminal;
exports.resumeComplexVerification = resumeComplexVerification;
exports.revokeBusinessPracticeStaffRole = revokeBusinessPracticeStaffRole;
exports.revokeBusinessStaffRole = revokeBusinessStaffRole;
exports.risk = risk;
exports.rnas = rnas;
exports.roles = roles;
exports.saveClaimDetails = saveClaimDetails;
exports.saveDraft = saveDraft;
exports.saveDraftEclipseInPatientInvoice = saveDraftEclipseInPatientInvoice;
exports.saveDraftEclipseOverseasInvoice = saveDraftEclipseOverseasInvoice;
exports.scanClaimFile = scanClaimFile;
exports.scoreAndSaveTransaction = scoreAndSaveTransaction;
exports.sdk = sdkClient;
exports.sdkClient = sdkClient;
exports.searchOnboardingPractices = searchOnboardingPractices;
exports.selfCheckoutSessions = selfCheckoutSessions;
exports.sendBusinessEmail = sendBusinessEmail;
exports.sendEmailPackage = sendEmailPackage;
exports.sendProcessingRequest = sendProcessingRequest;
exports.sendProcessingRequest$1 = sendProcessingRequest$1;
exports.sendReceipt = sendReceipt;
exports.sendReceipt$1 = sendReceipt$1;
exports.sendWorkerMessage = sendWorkerMessage;
exports.services = services;
exports.setCurrentAppVersion = setCurrentAppVersion;
exports.settlements = settlements;
exports.signUp = signUp;
exports.signUp$1 = signUp$1;
exports.specialties = specialties;
exports.staff = staff;
exports.staffProfiles = staffProfiles;
exports.staffUtils = staffUtils;
exports.statistics = statistics;
exports.submit = submit;
exports.submitClaim = submitClaim;
exports.submitDraftInvoices = submitDraftInvoices;
exports.submitInvoice = submitInvoice;
exports.submitOnboardingRequest = submitOnboardingRequest;
exports.submitPracticeOnboardingApplication = submitPracticeOnboardingApplication;
exports.submitTransactionBridgeClaim = submitTransactionBridgeClaim;
exports.submitTransactionBridgePayment = submitTransactionBridgePayment;
exports.subscriptions = subscriptions;
exports.suspendBusiness = suspendBusiness;
exports.terminalCancellation = terminalCancellation;
exports.terminalInput = terminalInput;
exports.terminals = terminals;
exports.transactionEmailPackage = transactionEmailPackage;
exports.transactionEmailPackages = transactionEmailPackages;
exports.transactionExport = transactionExport;
exports.transactions = transactions;
exports.triggerBridge = triggerBridge;
exports.triggers = triggers;
exports.unarchive = unarchive;
exports.unlinkBusinessProfile = unlinkBusinessProfile;
exports.unlinkPracticeProfile = unlinkPracticeProfile;
exports.unlinkStaffProfile = unlinkStaffProfile;
exports.unpublishHealthFundForm = unpublishHealthFundForm;
exports.unsuspendBusiness = unsuspendBusiness;
exports.unverifyBusinessKyc = unverifyBusinessKyc;
exports.unverifyPracticeKyc = unverifyPracticeKyc;
exports.update = update;
exports.updateAccount = updateAccount;
exports.updateAccountPaymentMethod = updateAccountPaymentMethod;
exports.updateAccountRoles = updateAccountRoles;
exports.updateApplication = updateApplication;
exports.updateAppointmentForHealthFundRNA = updateAppointmentForHealthFundRNA;
exports.updateBusinesFunderSettings = updateBusinesFunderSettings;
exports.updateBusiness = updateBusiness;
exports.updateBusinessFunderValue = updateBusinessFunderValue;
exports.updateBusinessKyc = updateBusinessKyc;
exports.updateBusinessOnboardingApplication = updateBusinessOnboardingApplication;
exports.updateBusinessPatient = updateBusinessPatient;
exports.updateBusinessPatientHealthFundAccount = updateBusinessPatientHealthFundAccount;
exports.updateBusinessPatientPaymentMethod = updateBusinessPatientPaymentMethod;
exports.updateBusinessPaymentMethod = updateBusinessPaymentMethod;
exports.updateBusinessPractice = updateBusinessPractice;
exports.updateBusinessService = updateBusinessService;
exports.updateBusinessStaffMember = updateBusinessStaffMember;
exports.updateBusinessStaffMemberEmail = updateBusinessStaffMemberEmail;
exports.updateBusinessSubscription = updateBusinessSubscription;
exports.updateClaim = updateClaim;
exports.updateDocAccount = updateDocAccount;
exports.updateEmailPackage = updateEmailPackage;
exports.updateHealthFund = updateHealthFund;
exports.updateHealthFundForm = updateHealthFundForm;
exports.updateHealthFundNote = updateHealthFundNote;
exports.updateHealthFundSetting = updateHealthFundSetting;
exports.updateMember = updateMember;
exports.updateMembersHealthFundAccounts = updateMembersHealthFundAccounts;
exports.updateMinionForHealthFund = updateMinionForHealthFund;
exports.updateMySelfCheckoutSession = updateMySelfCheckoutSession;
exports.updateOnboardingRequestStep = updateOnboardingRequestStep;
exports.updateOrganisationPractice = updateOrganisationPractice;
exports.updateOrganisationStaffMember = updateOrganisationStaffMember;
exports.updatePartner = updatePartner;
exports.updatePartnerPractice = updatePartnerPractice;
exports.updatePartnerPracticeProviderData = updatePartnerPracticeProviderData;
exports.updatePracticeRepresentative = updatePracticeRepresentative;
exports.updateService = updateService;
exports.updateStaffProviderSetItem = updateStaffProviderSetItem;
exports.updateTerminal = updateTerminal;
exports.updateTransaction = updateTransaction;
exports.uploadBulkUploadCSVToS3 = uploadBulkUploadCSVToS3;
exports.uploadBusinessPracticeImageToS3 = uploadBusinessPracticeImageToS3;
exports.uploadBusinessStaffMemberImageToS3 = uploadBusinessStaffMemberImageToS3;
exports.uploadClaimAttachmentToS3 = uploadClaimAttachmentToS3;
exports.uploadHealthFundFormFileToS3 = uploadHealthFundFormFileToS3;
exports.uploadInvoiceScanToS3 = uploadInvoiceScanToS3;
exports.uploadKycTrustDocumentToS3 = uploadKycTrustDocumentToS3;
exports.uploadScannedApplicationToS3 = uploadScannedApplicationToS3;
exports.validateTransaction = validateTransaction;
exports.vendors = vendors;
exports.verify = verify;
exports.verifyAccount = verifyAccount;
exports.verifyAuthy = verifyAuthy;
exports.verifyBusinessBeneficialOwner = verifyBusinessBeneficialOwner;
exports.verifyBusinessKyc = verifyBusinessKyc;
exports.verifyClaimPractice = verifyClaimPractice;
exports.verifyComcare = verifyComcare;
exports.verifyDVA = verifyDVA;
exports.verifyEclipse = verifyEclipse;
exports.verifyIcare = verifyIcare;
exports.verifyMedicare = verifyMedicare;
exports.verifyMedicare$1 = verifyMedicare$1;
exports.verifyMember = verifyMember;
exports.verifyPartnerAccount = verifyPartnerAccount;
exports.verifyPracticeKyc = verifyPracticeKyc;
exports.verifyStaffMember = verifyStaffMember;
exports.versions = versions;
exports.workers = workers;
exports.workflowExceptions = workflowExceptions;
