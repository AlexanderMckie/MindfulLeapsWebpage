'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _defineProperty = _interopDefault(require('@babel/runtime/helpers/defineProperty'));
var _get = _interopDefault(require('lodash/get'));
var _isEmpty = _interopDefault(require('lodash/isEmpty'));
var _omitBy = _interopDefault(require('lodash/omitBy'));

function _createForOfIteratorHelperLoose(o) { var i = 0; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } i = o[Symbol.iterator](); return i.next.bind(i); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var REQUIRED_VARIABLES = ['APP_URL'];

var getEnv = function getEnv(env) {
  var LOCAL = {
    ENV: _objectSpread({}, _get(env, '_global', {}), {}, _get(env, 'local', {}), {
      ENV_NAME: 'local',
      FUNDER_URL: 'https://dev-funder.medipass.io',
      CONNECT_URL: 'https://dev-connect.medipass.io',
      CONSUMER_URL: 'https://dev-my.medipass.io',
      ACCOUNTS_URL: 'https://dev-accounts.medipass.io',
      QUOTES_URL: 'https://dev-quotes.medipass.io',
      CHECKOUT_URL: 'https://dev-checkout.medipass.io'
    })
  };
  var DEV = {
    ENV: _objectSpread({}, _get(env, '_global', {}), {}, _get(env, 'dev', {}), {
      ENV_NAME: 'dev',
      FUNDER_URL: 'https://dev-funder.medipass.io',
      CONNECT_URL: 'https://dev-connect.medipass.io',
      CONSUMER_URL: 'https://dev-my.medipass.io',
      ACCOUNTS_URL: 'https://dev-accounts.medipass.io',
      QUOTES_URL: 'https://dev-quotes.medipass.io',
      CHECKOUT_URL: 'https://dev-checkout.medipass.io'
    })
  };
  var STAGING = {
    ENV: _objectSpread({}, _get(env, '_global', {}), {}, _get(env, 'staging', {}), {
      ENV_NAME: 'staging',
      FUNDER_URL: 'https://stg-funder.medipass.io',
      CONNECT_URL: 'https://stg-connect.medipass.io',
      CONSUMER_URL: 'https://stg-my.medipass.io',
      ACCOUNTS_URL: 'https://stg-accounts.medipass.io',
      QUOTES_URL: 'https://stg-quotes.medipass.io',
      CHECKOUT_URL: 'https://stg-checkout.medipass.io'
    })
  };
  var PERF = {
    ENV: _objectSpread({}, _get(env, '_global', {}), {}, _get(env, 'perf', {}), {
      ENV_NAME: 'perf',
      FUNDER_URL: 'https://perf-funder.medipass.io',
      CONNECT_URL: 'https://perf-connect.medipass.io',
      CONSUMER_URL: 'https://perf-my.medipass.io',
      ACCOUNTS_URL: 'https://perf-accounts.medipass.io',
      QUOTES_URL: 'https://perf-quotes.medipass.io',
      CHECKOUT_URL: 'https://perf-checkout.medipass.io'
    })
  };
  var PREPROD = {
    ENV: _objectSpread({}, _get(env, '_global', {}), {}, _get(env, 'preprod', {}), {
      ENV_NAME: 'pre-prod',
      FUNDER_URL: 'https://funder-blue.medipass.io',
      CONNECT_URL: 'https://connect-blue.medipass.io',
      CONSUMER_URL: 'https://my-blue.medipass.io',
      ACCOUNTS_URL: 'https://accounts-blue.medipass.io',
      QUOTES_URL: 'https://quotes-blue.medipass.io',
      CHECKOUT_URL: 'https://checkout-blue.medipass.io'
    })
  };
  var PROD = {
    ENV: _objectSpread({}, _get(env, '_global', {}), {}, _get(env, 'prod', {}), {
      ENV_NAME: 'prod',
      FUNDER_URL: 'https://funder.medipass.io',
      CONNECT_URL: 'https://connect.medipass.io',
      CONSUMER_URL: 'https://my.medipass.io',
      ACCOUNTS_URL: 'https://accounts.medipass.io',
      QUOTES_URL: 'https://quotes.medipass.io',
      CHECKOUT_URL: 'https://checkout.medipass.io'
    })
  };

  var fabSettings = _get(window, 'FAB_SETTINGS', {});

  var origin = window.location.origin;

  if (process.env.REACT_APP_ENV === 'dev' || fabSettings.REACT_APP_ENV === 'dev' || _get(DEV, 'ENV.APP_URL', '') === origin) {
    return DEV.ENV;
  } else if (process.env.REACT_APP_ENV === 'staging' || fabSettings.REACT_APP_ENV === 'staging' || _get(STAGING, 'ENV.APP_URL', '') === origin) {
    return STAGING.ENV;
  } else if (process.env.REACT_APP_ENV === 'perf' || fabSettings.REACT_APP_ENV === 'perf' || _get(PERF, 'ENV.APP_URL', '') === origin) {
    return PERF.ENV;
  } else if (process.env.REACT_APP_ENV === 'pre-prod' || _get(PREPROD, 'ENV.APP_URL', '') === origin) {
    return PREPROD.ENV;
  } else if (process.env.REACT_APP_ENV === 'local') {
    return LOCAL.ENV;
  } else if (process.env.REACT_APP_ENV === 'prod' || _get(PROD, 'ENV.APP_URL', '') === origin) {
    return PROD.ENV;
  }

  return DEV.ENV;
};

var getEnvironmentsMissingVariables = function getEnvironmentsMissingVariables(envVariables) {
  var environmentsMissingVariables = [];

  for (var _iterator = _createForOfIteratorHelperLoose(REQUIRED_VARIABLES), _step; !(_step = _iterator()).done;) {
    var requiredVariable = _step.value;

    if (!envVariables[requiredVariable]) {
      environmentsMissingVariables = [].concat(environmentsMissingVariables, [requiredVariable]);
    }
  }

  return environmentsMissingVariables;
};

var getRequiredEnvironmentVariables = function getRequiredEnvironmentVariables(env) {
  var missingVariables = {};

  for (var key in env) {
    if (key.includes('_')) {
      continue;
    }

    if (Object.prototype.hasOwnProperty.call(env, key)) {
      missingVariables[key] = getEnvironmentsMissingVariables(env[key]);
    }
  }

  return _omitBy(missingVariables, _isEmpty);
};

var logWarningForMissingRequiredEnvironmentVariables = function logWarningForMissingRequiredEnvironmentVariables(missingRequiredEnvironmentVariables) {
  for (var key in missingRequiredEnvironmentVariables) {
    if (Object.prototype.hasOwnProperty.call(missingRequiredEnvironmentVariables, key)) {
      console.error("Warning: Required variables " + missingRequiredEnvironmentVariables[key] + " not defined in the '" + key + "' environment.");
    }
  }
};

var Env = /*#__PURE__*/function () {
  function Env() {}

  var _proto = Env.prototype;

  _proto.setup = function setup(env) {
    this.clear();
    var missingRequiredEnvironmentVariables = getRequiredEnvironmentVariables(env);
    logWarningForMissingRequiredEnvironmentVariables(missingRequiredEnvironmentVariables);
    var newEnv = getEnv(env);

    for (var key in newEnv) {
      if (Object.prototype.hasOwnProperty.call(newEnv, key)) {
        // $FlowFixMe
        this[key] = newEnv[key];
      }
    }
  };

  _proto.clear = function clear() {
    for (var key in this) {
      if (Object.prototype.hasOwnProperty.call(this, key)) {
        // $FlowFixMe
        delete this[key];
      }
    }
  };

  return Env;
}();

var getEnv$1 = new Env();
var ERROR_MESSAGE__INTERNET_ERROR = process.env.REACT_APP_ERROR_MESSAGE__INTERNET_ERROR || 'We are unable to establish an internet connection. We will take you back once you are connected to the internet.';
var ERROR_MESSAGE__NETWORK_ERROR = process.env.REACT_APP_ERROR_MESSAGE__NETWORK_ERROR || 'There are issues connecting to the Medipass platform. Please refresh the page and try again.';
var ERROR_MESSAGE__SERVER_ERROR = process.env.REACT_APP_ERROR_MESSAGE__SERVER_ERROR || 'There are issues connecting to the Medipass platform. Please refresh the page and try again.';
var ERROR_MESSAGE__PAYMENT_GATEWAY_ERROR = process.env.REACT_APP_ERROR_MESSAGE__PAYMENT_GATEWAY_ERROR || 'There are issues connecting to the payment gateway. Please refresh the page and try again.';
var ERROR_MESSAGE__PAYMENT_ERROR = process.env.REACT_APP_ERROR_MESSAGE__PAYMENT_ERROR || 'An error occurred when processing the payment. Please try again. The card was not charged.';
var ERROR_MESSAGE__PAYMENT_GATEWAY_FIELDS = process.env.REACT_APP_ERROR_MESSAGE__PAYMENT_GATEWAY_FIELDS || 'The payment card details you entered were invalid, please review the payment card credentials and try again.';

exports.ERROR_MESSAGE__INTERNET_ERROR = ERROR_MESSAGE__INTERNET_ERROR;
exports.ERROR_MESSAGE__NETWORK_ERROR = ERROR_MESSAGE__NETWORK_ERROR;
exports.ERROR_MESSAGE__PAYMENT_ERROR = ERROR_MESSAGE__PAYMENT_ERROR;
exports.ERROR_MESSAGE__PAYMENT_GATEWAY_ERROR = ERROR_MESSAGE__PAYMENT_GATEWAY_ERROR;
exports.ERROR_MESSAGE__PAYMENT_GATEWAY_FIELDS = ERROR_MESSAGE__PAYMENT_GATEWAY_FIELDS;
exports.ERROR_MESSAGE__SERVER_ERROR = ERROR_MESSAGE__SERVER_ERROR;
exports.REQUIRED_VARIABLES = REQUIRED_VARIABLES;
exports.default = getEnv$1;
