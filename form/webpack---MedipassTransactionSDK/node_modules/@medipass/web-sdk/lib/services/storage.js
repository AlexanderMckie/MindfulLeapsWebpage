'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _defineProperty = _interopDefault(require('@babel/runtime/helpers/defineProperty'));
var storageEngine = _interopDefault(require('store/src/store-engine'));
var localStorage = _interopDefault(require('store/storages/localStorage'));
var sessionStorage = _interopDefault(require('store/storages/sessionStorage'));
var masked = _interopDefault(require('masked'));
var sensitiveKeys = require('@medipass/utils/sensitive-keys');

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var STORAGE_PREFIX = 'medipass-web-sdk';
var PERSIST_KEYS = ['_persist', 'device', 'savedEmail', 'rememberEmail', 'region'];
var noopStore = {
  get: function get(key) {},
  remove: function remove(key) {},
  each: function each(val, key) {},
  set: function set(key, val) {}
};
var stores = {
  default: typeof window !== 'undefined' && window.navigator.cookieEnabled ? storageEngine.createStore(localStorage) : noopStore,
  session: typeof window !== 'undefined' && window.navigator.cookieEnabled ? storageEngine.createStore(sessionStorage) : noopStore
};
var storeTypes = Object.keys(stores);
var clearAll = function clearAll(opts) {
  if (opts === void 0) {
    opts = {};
  }

  function clear(storeType) {
    stores[storeType].each(function (val, key) {
      key = key.replace(STORAGE_PREFIX + ".", '');
      var shouldPersist = PERSIST_KEYS.some(function (persistKey) {
        return key.includes(persistKey);
      });

      if (shouldPersist) {
        return;
      }

      stores[storeType].remove(STORAGE_PREFIX + "." + key);
    });
  } // If a store type has been chosen, then clear all from that store type. Otherwise, clear all from every store type.


  if (opts.storeType) {
    clear(opts.storeType);
  } else {
    storeTypes.forEach(function (storeType) {
      return clear(storeType);
    });
  }
};

var _get = function get(key, opts) {
  if (opts === void 0) {
    opts = {};
  }

  var storeType = opts.storeType || 'default';
  return stores[storeType].get(STORAGE_PREFIX + "." + key);
};

var _remove = function remove(key, opts) {
  if (opts === void 0) {
    opts = {};
  }

  // If a store type has been chosen, then clear all from that store type. Otherwise, clear all from every store type.
  if (opts.storeType) {
    stores[opts.storeType].remove(STORAGE_PREFIX + "." + key);
  } else {
    storeTypes.forEach(function (storeType) {
      return stores[storeType].remove(STORAGE_PREFIX + "." + key);
    });
  }
};

var _set = function set(key, val, opts) {
  if (opts === void 0) {
    opts = {};
  }

  var storeType = opts.storeType || 'default';

  if (opts && opts.override) {
    stores[storeType].set(STORAGE_PREFIX + "." + key, masked(_objectSpread({}, _get(key), {}, val), sensitiveKeys.VERY_SENSITIVE_KEYS, {
      omitKeys: true
    }));
    return;
  }

  stores[storeType].set(STORAGE_PREFIX + "." + key, masked(val, sensitiveKeys.VERY_SENSITIVE_KEYS, {
    omitKeys: true
  }));
};

var _createStorageResource = function _createStorageResource(key) {
  return {
    get: function get() {
      return _get(key);
    },
    set: function set(value, opts) {
      return _set(key, value, opts);
    },
    remove: function remove() {
      return _remove(key);
    }
  };
};

var storage = {
  clearAll: clearAll,
  remove: _remove,
  get: _get,
  set: _set,
  onboardingStatus: _createStorageResource('onboardingStatus'),
  previousCreatePHITransactionFormValues: _createStorageResource('previousTransactionFormValues')
};

exports.clearAll = clearAll;
exports.default = storage;
exports.get = _get;
exports.remove = _remove;
exports.set = _set;
